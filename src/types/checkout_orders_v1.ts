/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/checkout/orders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create order
         * @description Creates an order.
         */
        post: operations["orders.create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/checkout/orders/{order_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show order details
         * @description Shows details for an order, by ID.
         */
        get: operations["orders.get"];
        put?: never;
        post?: never;
        /**
         * Cancel order
         * @description Cancels an order, by ID, and deletes the order. To call this method, the order status must be  `CREATED` or `APPROVED`.
         */
        delete: operations["orders.cancel"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/checkout/orders/{order_id}/pay": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Pay for order
         * @description Initiates a PayPal payment that a buyer has approved.<blockquote><strong>Note:</strong> For Partner use cases, use the <code>disbursement_mode</code> to indicate whether to disburse funds to the seller and partner accounts immediately or later. If you delay disbursement, you must call <a href="/docs/multiparty/checkout/delayed-disbursement/">disburse funds</a> to disburse funds to the merchant and partner.</blockquote>
         */
        post: operations["orders.pay"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * Error Details
         * @description The error details. Required for client-side `4XX` errors.
         */
        error_details: {
            /** @description The field that caused the error. If this field is in the body, set this value to the field's JSON pointer value. Required for client-side errors. */
            field?: string;
            /** @description The value of the field that caused the error. */
            value?: string;
            location?: components["schemas"]["error_location"];
            /** @description The unique, fine-grained application-level error code. */
            issue: string;
            /** @description The human-readable description for an issue. The description can change over the lifetime of an API, so clients must not depend on this value. */
            description?: string;
        };
        /**
         * @description The location of the field that caused the error. Value is `body`, `path`, or `query`.
         * @default body
         * @enum {string}
         */
        error_location: "body" | "path" | "query";
        /**
         * Link Description
         * @description The request-related [HATEOAS link](/api/rest/responses/#hateoas-links) information.
         */
        error_link_description: {
            /** @description The complete target URL. To make the related call, combine the method with this [URI Template-formatted](https://tools.ietf.org/html/rfc6570) link. For pre-processing, include the `$`, `(`, and `)` characters. The `href` is the key HATEOAS component that links a completed call with a subsequent call. */
            href: string;
            /** @description The [link relation type](https://tools.ietf.org/html/rfc5988#section-4), which serves as an ID for a link that unambiguously describes the semantics of the link. See [Link Relations](https://www.iana.org/assignments/link-relations/link-relations.xhtml). */
            rel: string;
            /**
             * @description The HTTP method required to make the related call.
             * @enum {string}
             */
            method?: "GET" | "POST" | "PUT" | "DELETE" | "PATCH";
        };
        /**
         * Bad Request Error
         * @description Request is not well-formed, syntactically incorrect, or violates schema.
         */
        error_400: {
            /** @enum {string} */
            name?: "INVALID_REQUEST";
            /** @enum {string} */
            message?: "Request is not well-formed, syntactically incorrect, or violates schema.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Unauthorized Error
         * @description Authentication failed due to missing Authorization header, or invalid authentication credentials.
         */
        error_401: {
            /** @enum {string} */
            name?: "AUTHENTICATION_FAILURE";
            /** @enum {string} */
            message?: "Authentication failed due to missing authorization header, or invalid authentication credentials.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Not Authorized Error
         * @description The client is not authorized to access this resource, although it may have valid credentials.
         */
        error_403: {
            /** @enum {string} */
            name?: "NOT_AUTHORIZED";
            /** @enum {string} */
            message?: "Authorization failed due to insufficient permissions.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Not found Error
         * @description The server has not found anything matching the request URI. This either means that the URI is incorrect or the resource is not available.
         */
        error_404: {
            /** @enum {string} */
            name?: "RESOURCE_NOT_FOUND";
            /** @enum {string} */
            message?: "The specified resource does not exist.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Resource Conflict Error
         * @description The server has detected a conflict while processing this request.
         */
        error_409: {
            /** @enum {string} */
            name?: "RESOURCE_CONFLICT";
            /** @enum {string} */
            message?: "The server has detected a conflict while processing this request.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Unsupported Media Type Error
         * @description The server does not support the request payload's media type.
         */
        error_415: {
            /** @enum {string} */
            name?: "UNSUPPORTED_MEDIA_TYPE";
            /** @enum {string} */
            message?: "The server does not support the request payload's media type.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Unprocessable Entity Error
         * @description The requested action cannot be performed and may require interaction with APIs or processes outside of the current request. This is distinct from a 500 response in that there are no systemic problems limiting the API from performing the request.
         */
        error_422: {
            /** @enum {string} */
            name?: "UNPROCESSABLE_ENTITY";
            /** @enum {string} */
            message?: "The requested action could not be performed, semantically incorrect, or failed business validation.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Internal Server Error
         * @description This is either a system or application error, and generally indicates that although the client appeared to provide a correct request, something unexpected has gone wrong on the server.
         * @example {
         *       "name": "INTERNAL_SERVER_ERROR",
         *       "message": "An internal server error occurred.",
         *       "debug_id": "90957fca61718",
         *       "links": [
         *         {
         *           "href": "https://developer.paypal.com/api/orders/v2/#error-INTERNAL_SERVER_ERROR",
         *           "rel": "information_link"
         *         }
         *       ]
         *     }
         */
        error_500: {
            /** @enum {string} */
            name?: "INTERNAL_SERVER_ERROR";
            /** @enum {string} */
            message?: "An internal server error occurred.";
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Service Unavailable Error
         * @description The server is temporarily unable to handle the request, for example, because of planned maintenance or downtime.
         * @example {
         *       "name": "SERVICE_UNAVAILABLE",
         *       "message": "Service Unavailable.",
         *       "debug_id": "90957fca61718",
         *       "information_link": "https://developer.paypal.com/docs/api/orders/v2/#error-SERVICE_UNAVAILABLE"
         *     }
         */
        error_503: {
            /** @enum {string} */
            name?: "SERVICE_UNAVAILABLE";
            /** @enum {string} */
            message?: "Service Unavailable.";
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Amount
         * @description The payment amount, with details.
         */
        amount: {
            /** @description The [three-character ISO-4217 currency code](/docs/integration/direct/rest/currency-codes/). PayPal does not support all currencies. */
            currency: string;
            /** @description The total amount charged to the payee by the payer. For refunds, represents the amount that the payee refunds to the original payer. Maximum length is 10 characters, which includes:<ul><li>Seven digits before the decimal point.</li><li>The decimal point.</li><li>Two digits after the decimal point.</li></ul> */
            total: string;
            /**
             * Payment Amount Details
             * @description The additional details about the payment amount.
             */
            details?: {
                /** @description The subtotal amount for the items. If the request includes line items, this property is **required**. Maximum length is 10 characters, which includes:<ul><li>Seven digits before the decimal point.</li><li>The decimal point.</li><li>Two digits after the decimal point.</li></ul> */
                subtotal?: string;
                /** @description The shipping fee. Maximum length is 10 characters, which includes:<ul><li>Seven digits before the decimal point.</li><li>The decimal point.</li><li>Two digits after the decimal point.</li></ul> */
                shipping?: string;
                /** @description The tax. Maximum length is 10 characters, which includes:<ul><li>Seven digits before the decimal point.</li><li>The decimal point.</li><li>Two digits after the decimal point.</li></ul> */
                tax?: string;
                /** @description The handling fee. Maximum length is 10 characters, which includes:<ul><li>Seven digits before the decimal point.</li><li>The decimal point.</li><li>Two digits after the decimal point.</li></ul>Supported for the PayPal payment method only. */
                handling_fee?: string;
                /** @description The shipping fee discount. Maximum length is 10 characters, which includes:<ul><li>Seven digits before the decimal point.</li><li>The decimal point.</li><li>Two digits after the decimal point.</li></ul>Supported for the PayPal payment method only. */
                shipping_discount?: string;
                /** @description The insurance fee. Maximum length is 10 characters, which includes:<ul><li>Seven digits before the decimal point.</li><li>The decimal point.</li><li>Two digits after the decimal point.</li></ul>Supported only for the PayPal payment method. */
                insurance?: string;
                /** @description The gift wrap fee. Maximum length is 10 characters, which includes:<ul><li>Seven digits before the decimal point.</li><li>The decimal point.</li><li>Two digits after the decimal point.</li></ul> */
                gift_wrap?: string;
            };
        };
        /**
         * Payee Display Metadata
         * @description The display-only metadata for the payee.
         */
        payee_display_metadata: {
            /**
             * Format: email
             * @description The email address for the payer. Maximum length is 127 characters.
             */
            email?: string;
            /**
             * Display Phone
             * @description The payee's phone number.
             */
            display_phone?: {
                /** @description The [two-character IS0-3166-1 country code](https://developer.paypal.com/docs/integration/direct/rest/country-codes/) of the payee's country. */
                country_code?: string;
                /** @description The in-country phone number, in [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164-201011-I). */
                number?: string;
            };
            /** @description The payer's business name. */
            brand_name?: string;
        };
        /**
         * Payee
         * @description The payee who receives the funds and fulfills the order.
         */
        payee: {
            /**
             * Format: email
             * @description The email address associated with the payee's PayPal account. For an intent of authorize or order, the email address must be associated with a confirmed PayPal business account. For an intent of sale, the email can either:<ul><li>Be associated with a confirmed PayPal personal or business account.</li><li>Not be associated with a PayPal account.</li></ul>
             */
            email?: string;
            /** @description The encrypted PayPal account ID for the payee. */
            merchant_id?: string;
            payee_display_metadata?: components["schemas"]["payee_display_metadata"];
        };
        /**
         * Item
         * @description The item details.
         */
        item: {
            /** @description The stock keeping unit (SKU) for the item. */
            sku?: string;
            /** @description The item name. Maximum length is 127 characters. */
            name: string;
            /** @description The item description. Supported only for the PayPal payment method. */
            description?: string;
            /** @description The item quantity. Must be a whole number. */
            quantity: string;
            /** @description The item cost. Supports two decimal places. */
            price: string;
            /** @description The [three-character ISO-4217 currency code](/docs/integration/direct/rest/currency-codes/). */
            currency: string;
            /** @description The item tax. Supported only for the PayPal payment method. */
            tax?: string;
            /**
             * Format: uri
             * @description The URL to item information. Available to the payer in the transaction history.
             */
            url?: string;
        };
        /**
         * Format: ppaas_common_country_code_v2
         * @description The [two-character ISO 3166-1 code](/docs/integration/direct/rest/country-codes/) that identifies the country or region.<blockquote><strong>Note:</strong> The country code for Great Britain is <code>GB</code> and not <code>UK</code> as used in the top-level domain names for that country. Use the `C2` country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.</blockquote>
         */
        country_code: string;
        /**
         * Address
         * @description The billing address or shipping address for a payment.
         */
        address: {
            /** @description The first line of the address. For example, number, street, and so on. */
            line1: string;
            /** @description The second line of the address. For example, suite or apartment number. */
            line2?: string;
            /** @description The city name. */
            city?: string;
            country_code: components["schemas"]["country_code"];
            /** @description The postal code, which is the zip code or equivalent. Typically required for countries with a postal code or an equivalent. See [postal code](https://en.wikipedia.org/wiki/Postal_code). */
            postal_code?: string;
            /** @description The [code](/docs/integration/direct/rest/state-codes/) for a US state or the equivalent for other countries. Required for transactions if the address is in one of these countries: [Argentina](/docs/integration/direct/rest/state-codes/#argentina), [Brazil](/docs/integration/direct/rest/state-codes/#brazil), [Canada](/docs/integration/direct/rest/state-codes/#canada), [India](/docs/integration/direct/rest/state-codes/#india), [Italy](/docs/integration/direct/rest/state-codes/#italy), [Japan](/docs/integration/direct/rest/state-codes/#japan), [Mexico](/docs/integration/direct/rest/state-codes/#mexico), [Thailand](/docs/integration/direct/rest/state-codes/#thailand), or [United States](/docs/integration/direct/rest/state-codes/#usa). Maximum length is 40 single-byte characters. */
            state?: string;
            /**
             * Format: phone
             * @description The phone number, in [E.123 format](https://www.itu.int/rec/T-REC-E.123-200102-I/en). Maximum length is 50 characters.
             */
            phone?: string;
            /**
             * @description The address normalization status. Returned only for payers from Brazil.
             * @enum {string}
             */
            readonly normalization_status?: "UNKNOWN" | "UNNORMALIZED_USER_PREFERRED" | "NORMALIZED" | "UNNORMALIZED";
            /** @description The type of address. For example, `HOME_OR_WORK`, `GIFT`, and so on. */
            type?: string;
        };
        /**
         * Shipping Address
         * @description The shipping address details.
         */
        shipping_address: components["schemas"]["address"] & {
            /** @description The name of the recipient at this address. */
            recipient_name?: string;
        };
        /**
         * Currency
         * @description The currency and amount for a transaction.
         */
        currency: {
            /** @description The [three-character ISO-4217 currency code](/docs/integration/direct/rest/currency-codes/). PayPal does not support all currencies. */
            currency: string;
            /** @description The amount. Includes the specified number of digits after decimal separator for the [ISO-4217 currency code](https://en.wikipedia.org/wiki/ISO_4217#Active_codes). */
            value: string;
        };
        /**
         * Partner Fee Details
         * @description The partner fee that is collected for the original transaction.
         */
        partner_fee_details: {
            /** @description The partner who receives the partner fee. */
            receiver: components["schemas"]["payee"];
            /** @description The amount and currency of the partner fee. */
            amount: components["schemas"]["currency"];
        };
        /**
         * Name and Value Pair
         * @description The name-and-value pair details.
         */
        name_value_pair: {
            /** @description The key for the name-and-value pair. You must correlate the value and name types. */
            name: string;
            /** @description The value for the name-and-value pair. */
            value: string;
        };
        /**
         * Metadata
         * @description The name-and-value pairs that contain external data, such as user, user feedback, score, and so on.
         */
        metadata: {
            /** @description An array of name-and-value pairs that contain data required by PayPal for transaction processing. */
            supplementary_data?: components["schemas"]["name_value_pair"][];
        };
        /**
         * Link Description
         * @description The request-related [HATEOAS link](/docs/api/overview/#hateoas-links) information.
         */
        link_description: {
            /** @description The complete target URL. To make the related call, combine the method with this [URI Template-formatted](https://tools.ietf.org/html/rfc6570) link. For pre-processing, include the `$`, `(`, and `)` characters. The `href` is the key HATEOAS component that links a completed call with a subsequent call. */
            href: string;
            /** @description The [link relation type](https://tools.ietf.org/html/rfc5988#section-4), which serves as an ID for a link that unambiguously describes the semantics of the link. See [Link Relations](https://www.iana.org/assignments/link-relations/link-relations.xhtml). */
            rel: string;
            /**
             * @description The HTTP method required to make the related call.
             * @enum {string}
             */
            method?: "GET" | "POST" | "PUT" | "DELETE" | "HEAD" | "CONNECT" | "OPTIONS" | "PATCH";
        };
        /**
         * Capture
         * @description A capture transaction.
         */
        capture: {
            /** @description The ID of the capture transaction. */
            readonly id?: string;
            /** @description The amount to capture. Default is the authorization amount. If that amount is the same as the authorized amount, the authorization state changes to <code>CAPTURED</code>. Otherwise, the authorization state changes to `PARTIALLY_CAPTURED`. To indicate that this capture is the final capture, set `is_final_capture` to `true`. */
            amount?: components["schemas"]["amount"];
            /**
             * @description The status of the capture transaction.
             * @enum {string}
             */
            readonly status?: "PENDING" | "COMPLETED" | "REFUNDED" | "PARTIALLY_REFUNDED" | "DENIED";
            /**
             * @description A reason code that indicates the reason for the transaction state of <code>PENDING</code> or <code>REVERSED</code>.
             * @enum {string}
             */
            readonly reason_code?: "CHARGEBACK" | "GUARANTEE" | "BUYER_COMPLAINT" | "REFUND" | "UNCONFIRMED_SHIPPING_ADDRESS" | "ECHECK" | "INTERNATIONAL_WITHDRAWAL" | "RECEIVING_PREFERENCE_MANDATES_MANUAL_ACTION" | "PAYMENT_REVIEW" | "REGULATORY_REVIEW" | "UNILATERAL" | "VERIFICATION_REQUIRED" | "DELAYED_DISBURSEMENT";
            /** @description The currency and amount of the transaction fee. */
            transaction_fee?: components["schemas"]["currency"];
            /** @description An array of request-related [HATEOAS links](/api/rest/responses/#hateoas-links). */
            readonly links?: components["schemas"]["link_description"][];
        };
        /**
         * Refund
         * @description A refund transaction.
         */
        refund: {
            /** @description The ID of the refund transaction. Maximum length is 17 characters. */
            readonly id?: string;
            /** @description The amount that is refunded to the payer and the amount that is refunded to the payee. Maximum length is 10 characters, which includes:<ul><li>Seven digits before the decimal point.</li><li>The decimal point.</li><li>Two digits after the decimal point.</li></ul> */
            amount?: components["schemas"]["amount"];
            /** @description The ID of the sale transaction to refund. */
            readonly capture_id?: string;
            /** @description The ID of the sale transaction to refund. */
            readonly sale_id?: string;
            /**
             * @description The status of the refund.
             * @enum {string}
             */
            readonly status?: "PENDING" | "COMPLETED" | "FAILED";
            /** @description An array of request-related [HATEOAS links](/api/rest/responses/#hateoas-links). */
            readonly links?: components["schemas"]["link_description"][];
        };
        /**
         * Sale
         * @description A sale transaction.
         */
        sale: {
            /** @description The ID of the sale transaction. */
            readonly id?: string;
            /** @description The amount to collect. Maximum length is 10 characters, which includes:<ul><li>Seven digits before the decimal point.</li><li>The decimal point.</li><li>Two digits after the decimal point.</li></ul> */
            amount?: components["schemas"]["amount"];
            /** @description The currency and amount of the transaction fee. Maximum length is 10 characters, which includes:<ul><li>Seven digits before the decimal point.</li><li>The decimal point.</li><li>Two digits after the decimal point.</li></ul> */
            transaction_fee?: components["schemas"]["currency"];
            /**
             * @description The status of the sale transaction.
             * @enum {string}
             */
            readonly status?: "COMPLETED" | "PARTIALLY_REFUNDED" | "PENDING" | "REFUNDED" | "DENIED";
            /**
             * @description A reason code that indicates the reason for the transaction state of <code>PENDING</code> or <code>REVERSED</code>.
             * @enum {string}
             */
            readonly reason_code?: "CHARGEBACK" | "GUARANTEE" | "BUYER_COMPLAINT" | "REFUND" | "UNCONFIRMED_SHIPPING_ADDRESS" | "ECHECK" | "INTERNATIONAL_WITHDRAWAL" | "RECEIVING_PREFERENCE_MANDATES_MANUAL_ACTION" | "PAYMENT_REVIEW" | "REGULATORY_REVIEW" | "UNILATERAL" | "VERIFICATION_REQUIRED" | "DELAYED_DISBURSEMENT";
            /**
             * Format: date-time
             * @description The date and time when the resource was created, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
             */
            readonly create_time?: string;
            /**
             * Format: date-time
             * @description The date and time when the resource was last updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
             */
            readonly update_time?: string;
            /** @description An array of request-related [HATEOAS links](/api/rest/responses/#hateoas-links). */
            readonly links?: components["schemas"]["link_description"][];
        };
        /**
         * Payment Summary
         * @description The payment summary.
         */
        payment_summary: {
            /** @description An array of captures for a purchase unit. A purchase unit can have zero or more captures. */
            captures?: components["schemas"]["capture"][];
            /** @description An array of refunds for a purchase unit. A purchase unit can have zero or more refunds. */
            refunds?: components["schemas"]["refund"][];
            /** @description An array of sales for a purchase unit. A purchase unit can have zero or more sales. */
            sales?: components["schemas"]["sale"][];
            /** @description An array of authorizations for a purchase unit. A purchase unit can have zero or more authorizations. */
            authorizations?: components["schemas"]["sale"][];
        };
        /**
         * Purchase Unit
         * @description A purchase unit. Establishes a contract between the payer and payee.
         */
        purchase_unit: {
            /** @description The merchant ID for the purchase unit. */
            reference_id: string;
            /** @description The amount to collect. */
            amount: components["schemas"]["amount"];
            /** @description The recipient of the funds for this transaction. */
            payee?: components["schemas"]["payee"];
            /** @description The purchase description. */
            description?: string;
            /** @description The client-provided external ID. Used to reconcile client transactions with PayPal transactions. Returned in transaction and settlement reports. Only supported for the PayPal payment method. */
            custom?: string;
            /** @description The API caller-provided external invoice ID for this order.. Only supported for the PayPal payment method. */
            invoice_number?: string;
            /** @description The payment descriptor on the buyer credit card statement of account activity. */
            payment_descriptor?: string;
            /** @description An array of items that the customer is purchasing from the merchant. */
            items?: components["schemas"]["item"][];
            /**
             * Format: uri
             * @description The payment notifications URL.
             */
            notify_url?: string;
            shipping_address?: components["schemas"]["shipping_address"];
            /** @description The shipping method. For example, `USPSParcel`. */
            shipping_method?: string;
            partner_fee_details?: components["schemas"]["partner_fee_details"];
            /** @description An ID that groups multiple linked purchase units. The purchase transactions are linked only for the payment and not for refund. A refund is processed only for the specific transaction within the same linked group. */
            payment_linked_group?: number;
            metadata?: components["schemas"]["metadata"];
            payment_summary?: components["schemas"]["payment_summary"];
            /**
             * @description The transaction state.
             * @enum {string}
             */
            readonly status?: "NOT_PROCESSED" | "PENDING" | "VOIDED" | "AUTHORIZED" | "CAPTURED";
            /**
             * @description The reason code for a transaction status of <code>PENDING</code> or <code>REVERSED</code>. Eventually, this field will replace <code>pending_reason</code>. Supported only for the PayPal payment method.
             * @enum {string}
             */
            readonly reason_code?: "PAYER_SHIPPING_UNCONFIRMED" | "MULTI_CURRENCY" | "RISK_REVIEW" | "REGULATORY_REVIEW" | "VERIFICATION_REQUIRED" | "ORDER" | "OTHER" | "DECLINED_BY_POLICY";
        };
        /**
         * Payment Details
         * @description The payment details for the order.
         */
        payment_details: {
            /** @description The payment ID for the order. */
            readonly payment_id?: string;
            /**
             * @description Indicates whether to disburse the payment instantly or delay the payment.
             * @enum {string}
             */
            readonly disbursement_mode?: "INSTANT" | "DELAYED";
        };
        /**
         * Format: ppaas_common_language_v3
         * @description The [language tag](https://tools.ietf.org/html/bcp47#section-2) for the language in which to localize the error-related strings, such as messages, issues, and suggested actions. The tag is made up of the [ISO 639-2 language code](https://www.loc.gov/standards/iso639-2/php/code_list.php), the optional [ISO-15924 script tag](https://www.unicode.org/iso15924/codelists.html), and the [ISO-3166 alpha-2 country code](/docs/integration/direct/rest/country-codes/).
         */
        language: string;
        /**
         * Application Context
         * @description Customizes the payer experience during the approval process for the payment with PayPal.<blockquote><strong>Note:</strong> The PayPal Commerce Platform might configure <code>brand_name</code> and <code>shipping_preference</code> during partner account setup, which overrides the request values.</blockquote>
         */
        application_context: {
            /** @description The label that overrides the business name in the PayPal account on the PayPal pages. */
            brand_name?: string;
            locale?: components["schemas"]["language"];
            /**
             * @description The shipping preferences.
             * @enum {string}
             */
            shipping_preference?: "NO_SHIPPING" | "GET_FROM_FILE" | "SET_PROVIDED_ADDRESS";
            /** @description Defines whether to present the customer with a <strong>Continue</strong> or <strong>Pay Now</strong> checkout flow. To present buyers with the <strong>Pay Now</strong> checkout flow, set <code>useraction=commit</code>. Default is the <strong>Continue</strong> checkout flow.<table><thead><tr><th>Checkout&nbsp;flow</th><th>Choose when</th><th>Description</th></tr></thead><tbody><tr><td><strong>Continue</strong></td><td>You do not know the final payment amount when you initiate the checkout flow.</td><td>The default flow. Redirects the customer to the PayPal payment page, which shows the <strong>Continue</strong> button. When the customer clicks <strong>Continue</strong>, the customer can change the payment amount.</td></tr><tr><td><strong>Pay Now</strong></td><td>You know the final payment amount when you initiate the checkout flow.</td><td>Set <code>user_action=commit</code>. Redirects the customer to the PayPal payment page, which shows the <strong>Pay Now</strong> button. When the customer clicks <strong>Pay Now</strong>, the payment is processed immediately.</td></tr></tbody></table> */
            user_action?: string;
            /** @description An array of name-and-value pairs that contain supplementary data required by PayPal for transaction processing. */
            supplementary_data?: components["schemas"]["name_value_pair"][];
        };
        /**
         * Order
         * @description An order.
         */
        order: {
            /** @description The ID of the order. */
            readonly id?: string;
            /**
             * @description The intent.
             * @enum {string}
             */
            intent?: "SALE" | "AUTHORIZE";
            /** @description An array of purchase units. Each purchase unit establishes a contract between a customer and merchant. */
            purchase_units: components["schemas"]["purchase_unit"][];
            payment_details?: components["schemas"]["payment_details"];
            /** @description The currency and amount of the PayPal-computed total of amounts in all purchase units. */
            gross_total_amount?: components["schemas"]["currency"];
            application_context?: components["schemas"]["application_context"];
            /** @deprecated */
            metadata?: components["schemas"]["metadata"];
            /**
             * @description The status of the order. After the customer approves the order, the status is `APPROVED`. After the payment is made for the order and the order completes, the status is `COMPLETED`.
             * @enum {string}
             */
            readonly status?: "CREATED" | "APPROVED" | "COMPLETED" | "FAILED";
            /**
             * Redirect URLs
             * @description The redirect URLs. Required only for the PayPal payment method. The supported settings are return and cancel URLs.
             */
            redirect_urls: {
                /**
                 * Format: uri
                 * @description The URL where the payer is redirected after the payer approves the payment.
                 */
                return_url?: string;
                /**
                 * Format: uri
                 * @description The URL where the payer is redirected after the payer cancels the payment.
                 */
                cancel_url?: string;
            };
            /**
             * Format: date-time
             * @description The date and time when the resource was created, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
             */
            readonly create_time?: string;
            /**
             * Format: date-time
             * @description The date and time when the resource was last updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
             */
            readonly update_time?: string;
            /** @description An array of request-related [HATEOAS links](/api/rest/responses/#hateoas-links). To complete the buyer approval, use the `approval_url` link with the `GET` method and do not use the link that shows the `REDIRECT` method. */
            readonly links?: components["schemas"]["link_description"][];
        };
        /**
         * Error Details
         * @description The error details. Required for client-side `4XX` errors.
         */
        "error_details-2": {
            /** @description The field that caused the error. If the field is in the body, set this value to the JSON pointer to that field. Required for client-side errors. */
            field?: string;
            /** @description The value of the field that caused the error. */
            value?: string;
            /**
             * @description The location of the field that caused the error. Value is `body`, `path`, or `query`.
             * @default body
             */
            location: string;
            /** @description The unique and fine-grained application-level error code. */
            issue: string;
            /** @description The human-readable description for an issue. The description MAY change over the lifetime of an API, so clients **MUST NOT** depend on this value. */
            description?: string;
        };
        /**
         * Error
         * @description The error details.
         */
        error: {
            /** @description The human-readable, unique name of the error. */
            name: string;
            /** @description The message that describes the error. */
            message: string;
            /** @description The PayPal internal ID that is used for correlation purposes. */
            debug_id: string;
            /** @description The information link, or URI, that shows detailed information about this error for the developer. */
            readonly information_link?: string;
            /** @description An array of additional details about the error. */
            details?: components["schemas"]["error_details-2"][];
            /** @description An array of request-related [HATEOAS links](/docs/api/overview/#hateoas-links). */
            readonly links?: components["schemas"]["link_description"][];
        };
        /**
         * Credit Card
         * @description Deprecated. The credit card details. You can use this instrument to fund a payment. Use a payment card instead.
         */
        credit_card: {
            /** @description The credit card number. Value is numeric characters only with no spaces or punctuation. Must conform to the modulo and length required by each credit card type. *Redacted in responses.* */
            number: string;
            /** @description The credit card type. Value is `visa`, `mastercard`, `discover`, or `amex`. Do not use these lowercase values for display. */
            type: string;
            /** @description The expiration month with no leading zero. Value is from `1` to `12`. */
            expire_month: number;
            /** @description The four-digit expiration year. */
            expire_year: number;
            /** @description The three- to four-digit card validation code. */
            cvv2?: string;
            /** @description The card holder's first name. */
            first_name?: string;
            /** @description The card holder's last name. */
            last_name?: string;
            /** @description The billing address for this card. */
            billing_address?: components["schemas"]["address"];
            /** @description An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links). */
            readonly links?: components["schemas"]["link_description"][];
        };
        /**
         * Credit Card Token
         * @description The tokenized credit card details. You can use this instrument to fund a payment.
         */
        credit_card_token: {
            /** @description The ID of credit card that is stored in the PayPal vault. */
            credit_card_id: string;
            /** @description A unique ID that you can assign and track when you store a credit card in the vault or use a vaulted credit card. This ID can help to avoid unintentional use or misuse of credit cards and can be any value, such as a UUID, user name, or email address. **Required** when you use a vaulted credit card and if a `payer_id` was originally provided when you vaulted the credit card. */
            payer_id?: string;
            /** @description The last four digits of the stored credit card number. */
            readonly last4?: string;
            /** @description The credit card type. Value is `visa`, `mastercard`, `discover`, or `amex`. Do not use these lowercase values for display. */
            readonly type?: string;
            /** @description The expiration month with no leading zero. Value is from `1` to `12`. */
            readonly expire_month?: number;
            /** @description The four-digit expiration year. */
            readonly expire_year?: number;
        };
        /**
         * Funding Instrument
         * @description The funding instrument details. An instance of this schema is valid if and only if it validates against exactly one of these supported properties.
         */
        funding_instrument: {
            /** @description Deprecated. The credit card details. You can use this instrument to fund a payment. Use a payment card instead. */
            credit_card?: components["schemas"]["credit_card"];
            /** @description The tokenized credit card details. You can use this instrument to fund a payment. */
            credit_card_token?: components["schemas"]["credit_card_token"];
        };
        /**
         * Payer Information
         * @description The payer information.
         */
        payer_info: {
            /**
             * Format: email
             * @description The payer's email address. Maximum length is 127 characters.
             */
            email?: string;
            /** @description The payer's salutation. */
            readonly salutation?: string;
            /** @description The payer's first name. */
            readonly first_name?: string;
            /** @description The payer's middle name. */
            readonly middle_name?: string;
            /** @description The payer's last name. */
            readonly last_name?: string;
            /** @description The payer's suffix. */
            readonly suffix?: string;
            /** @description The PayPal-assigned encrypted payer ID. */
            readonly payer_id?: string;
            /**
             * Format: date-time
             * @description The birth date of the payer, in [Internet date format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, `1990-04-12`.
             */
            birth_date?: string;
            /** @description The payer’s tax ID. Supported for the PayPal payment method only. */
            tax_id?: string;
            /**
             * @description The payer’s tax ID type. Supported for the PayPal payment method only.
             * @enum {string}
             */
            tax_id_type?: "BR_CPF" | "BR_CNPJ";
            /** @description The payer's [two-character IS0-3166-1 country code](/docs/integration/direct/rest/country-codes/). */
            country_code?: string;
            /** @description The payer's billing address. */
            billing_address?: components["schemas"]["address"];
            /** @description Deprecated. The shipping address. Use the shipping address for the purchase unit or at the root level of the checkout session. */
            readonly shipping_address?: components["schemas"]["shipping_address"];
        };
        /**
         * Payer
         * @description The payer. The payer funds the payment.
         */
        payer: {
            /**
             * @description The payment method. Value is PayPal Wallet payment, bank direct debit, or direct credit card.
             * @enum {string}
             */
            payment_method?: "credit_card" | "bank" | "paypal" | "pay_upon_invoice" | "carrier" | "alternate_payment";
            /**
             * @description The status of payer's PayPal account.
             * @enum {string}
             */
            readonly status?: "VERIFIED" | "UNVERIFIED";
            /** @description An array of a single funding instrument for the current payment. Valid only and required for the credit card payment method. The array must include either a `credit_card` or `credit_card_token` object. If the array contains more than one instrument, the payment is declined. */
            funding_instruments?: components["schemas"]["funding_instrument"][];
            payer_info?: components["schemas"]["payer_info"];
        };
        /**
         * Execute Order
         * @description An execute order request.
         */
        pay_order_request: {
            /**
             * @description Indicates whether to disburse money instantly or later.
             * @enum {string}
             */
            disbursement_mode: "INSTANT" | "DELAYED";
            /** @description The source of the funds for this payment. Either a PayPal account or a credit card. */
            payer?: components["schemas"]["payer"];
        };
        /**
         * Pay Order Response
         * @description A pay order response.
         */
        pay_order_response: {
            /** @description The ID of the order. */
            readonly order_id?: string;
            /**
             * @description The status of the order.
             * @enum {string}
             */
            readonly status?: "APPROVED" | "CANCELED" | "COMPLETED" | "CREATED" | "EXPIRED" | "FAILED" | "IN_PROGRESS" | "PARTIALLY_COMPLETED" | "SUBMITTED";
            /**
             * @description The intent.
             * @enum {string}
             */
            intent?: "SALE" | "AUTHORIZE";
            /** @description The payer information. */
            payer_info?: components["schemas"]["payer_info"];
            /** @description An array of purchase units. Each purchase unit establishes a contract between a customer and merchant. */
            purchase_units?: components["schemas"]["purchase_unit"][];
            /**
             * Format: date-time
             * @description The date and time when the resource was created, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
             */
            readonly create_time?: string;
            /**
             * Format: date-time
             * @description The date and time when the resource was last updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
             */
            readonly update_time?: string;
            /** @description An array of request-related [HATEOAS links](/api/rest/responses/#hateoas-links). */
            readonly links?: components["schemas"]["link_description"][];
        };
    };
    responses: never;
    parameters: {
        paypal_partner_attribution_id: string;
        /** @description The ID of the order for which to execute a payment. */
        order_id: string;
        /** @description The server stores keys forever. */
        paypal_request_id: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "orders.create": {
        parameters: {
            query?: never;
            header?: {
                "PayPal-Partner-Attribution-Id"?: components["parameters"]["paypal_partner_attribution_id"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["order"];
            };
        };
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that includes the PayPal-generated order ID, an array of purchase unit objects, payment details, customer information, metadata, and order status. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["order"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "orders.get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the order for which to execute a payment. */
                order_id: components["parameters"]["order_id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that shows order details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["order"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "orders.cancel": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the order for which to execute a payment. */
                order_id: components["parameters"]["order_id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `204 No Content` status code with no JSON response body. If the order is already paid, the order cannot be canceled and the request returns the HTTP `422 Unprocessable Entity` status code with the message, `This order is in progress`. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "orders.pay": {
        parameters: {
            query?: never;
            header?: {
                "PayPal-Partner-Attribution-Id"?: components["parameters"]["paypal_partner_attribution_id"];
                /** @description The server stores keys forever. */
                "PayPal-Request-Id"?: components["parameters"]["paypal_request_id"];
            };
            path: {
                /** @description The ID of the order for which to execute a payment. */
                order_id: components["parameters"]["order_id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["pay_order_request"];
            };
        };
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that shows order and payment details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["pay_order_response"];
                };
            };
            /** @description A successful request returns the HTTP `201 Created` status code and a JSON response body that shows order and payment details.<blockquote><strong>Note:</strong> Applies to existing asynchronous payment processing integrations.</blockquote> */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["pay_order_response"];
                };
            };
            /** @description A successful request returns the HTTP `202 Accepted` status code and a JSON response body that shows order and payment details.<blockquote><strong>Note:</strong> Applies to existing asynchronous payment processing integrations.</blockquote> */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["pay_order_response"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
}
