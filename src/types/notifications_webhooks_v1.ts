/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/notifications/webhooks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List webhooks
         * @description Lists webhooks for an app.
         */
        get: operations["webhooks.list"];
        put?: never;
        /**
         * Create webhook
         * @description Subscribes your webhook listener to events.
         */
        post: operations["webhooks.post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/notifications/webhooks/{webhook_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show webhook details
         * @description Shows details for a webhook, by ID.
         */
        get: operations["webhooks.get"];
        put?: never;
        post?: never;
        /**
         * Delete webhook
         * @description Deletes a webhook, by ID.
         */
        delete: operations["webhooks.delete"];
        options?: never;
        head?: never;
        /**
         * Update webhook
         * @description Updates a webhook to replace webhook fields with new values. Supports only the `replace` operation. Pass a `json_patch` object with `replace` operation and `path`, which is `/url` for a URL or `/event_types` for events. The `value` is either the URL or a list of events.
         */
        patch: operations["webhooks.update"];
        trace?: never;
    };
    "/v1/notifications/webhooks/{webhook_id}/event-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List event subscriptions for webhook
         * @description Lists event subscriptions for a webhook, by ID.
         */
        get: operations["event-types.list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/notifications/webhooks-lookup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List webhook lookups
         * @description Lists webhook lookups.
         */
        get: operations["webhooks-lookup.list"];
        put?: never;
        /**
         * Create webhook lookup
         * @description Creates a webhook lookup.
         */
        post: operations["webhooks-lookup.post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/notifications/webhooks-lookup/{webhook_lookup_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show webhook lookup details
         * @description Shows details for a webhook lookup, by ID.
         */
        get: operations["webhooks-lookup.get"];
        put?: never;
        post?: never;
        /**
         * Delete webhook lookup
         * @description Deletes a webhook lookup, by ID.
         */
        delete: operations["webhooks-lookup.delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/notifications/verify-webhook-signature": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Verify webhook signature
         * @description Verifies a webhook signature.
         */
        post: operations["verify-webhook-signature.post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/notifications/webhooks-event-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List available events
         * @description Lists available events to which any webhook can subscribe. For a list of supported events, see [Webhook event names](/docs/api/notifications/webhooks/event-names/).
         */
        get: operations["webhooks-event-types.list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/notifications/webhooks-events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List event notifications
         * @description Lists webhooks event notifications. Use query parameters to filter the response.
         */
        get: operations["webhooks-events.list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/notifications/webhooks-events/{event_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show event notification details
         * @description Shows details for a webhooks event notification, by ID.
         */
        get: operations["webhooks-events.get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/notifications/webhooks-events/{event_id}/resend": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Resend event notification
         * @description Resends a webhook event notification, by ID. Any pending notifications are not resent.
         */
        post: operations["webhooks-events.resend"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/notifications/simulate-event": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Simulate webhook event
         * @description Simulates a webhook event. In the JSON request body, specify a sample payload.<br>You need to subscribe to the following webhook events for Pay upon Invoice:<br><table><thead><tr><th>Event</th><th>Trigger</th></tr></thead><tbody><tr><td><code>PAYMENT.CAPTURE.COMPLETED</code></td><td>A payment capture completes.</td></tr><tr><td><code>PAYMENT.CAPTURE.DENIED</code></td><td>A payment capture is denied.</td></tr><tr><td><code>CHECKOUT.PAYMENT-APPROVAL.REVERSED</code></td><td>PayPal reverses a payment capture.</td></tr></tbody></table>
         */
        post: operations["simulate-event.post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * Error Details
         * @description The error details. Required for client-side `4XX` errors.
         */
        error_details: {
            /** @description The field that caused the error. If this field is in the body, set this value to the field's JSON pointer value. Required for client-side errors. */
            field?: string;
            /** @description The value of the field that caused the error. */
            value?: string;
            location?: components["schemas"]["error_location"];
            /** @description The unique, fine-grained application-level error code. */
            issue: string;
            /** @description The human-readable description for an issue. The description can change over the lifetime of an API, so clients must not depend on this value. */
            description?: string;
        };
        /**
         * @description The location of the field that caused the error. Value is `body`, `path`, or `query`.
         * @default body
         * @enum {string}
         */
        error_location: "body" | "path" | "query";
        /**
         * Link Description
         * @description The request-related [HATEOAS link](/api/rest/responses/#hateoas-links) information.
         */
        error_link_description: {
            /** @description The complete target URL. To make the related call, combine the method with this [URI Template-formatted](https://tools.ietf.org/html/rfc6570) link. For pre-processing, include the `$`, `(`, and `)` characters. The `href` is the key HATEOAS component that links a completed call with a subsequent call. */
            href: string;
            /** @description The [link relation type](https://tools.ietf.org/html/rfc5988#section-4), which serves as an ID for a link that unambiguously describes the semantics of the link. See [Link Relations](https://www.iana.org/assignments/link-relations/link-relations.xhtml). */
            rel: string;
            /**
             * @description The HTTP method required to make the related call.
             * @enum {string}
             */
            method?: "GET" | "POST" | "PUT" | "DELETE" | "PATCH";
        };
        /**
         * Bad Request Error
         * @description Request is not well-formed, syntactically incorrect, or violates schema.
         */
        error_400: {
            /** @enum {string} */
            name?: "INVALID_REQUEST";
            /** @enum {string} */
            message?: "Request is not well-formed, syntactically incorrect, or violates schema.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Unauthorized Error
         * @description Authentication failed due to missing Authorization header, or invalid authentication credentials.
         */
        error_401: {
            /** @enum {string} */
            name?: "AUTHENTICATION_FAILURE";
            /** @enum {string} */
            message?: "Authentication failed due to missing authorization header, or invalid authentication credentials.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Not Authorized Error
         * @description The client is not authorized to access this resource, although it may have valid credentials.
         */
        error_403: {
            /** @enum {string} */
            name?: "NOT_AUTHORIZED";
            /** @enum {string} */
            message?: "Authorization failed due to insufficient permissions.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Not found Error
         * @description The server has not found anything matching the request URI. This either means that the URI is incorrect or the resource is not available.
         */
        error_404: {
            /** @enum {string} */
            name?: "RESOURCE_NOT_FOUND";
            /** @enum {string} */
            message?: "The specified resource does not exist.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Resource Conflict Error
         * @description The server has detected a conflict while processing this request.
         */
        error_409: {
            /** @enum {string} */
            name?: "RESOURCE_CONFLICT";
            /** @enum {string} */
            message?: "The server has detected a conflict while processing this request.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Unsupported Media Type Error
         * @description The server does not support the request payload's media type.
         */
        error_415: {
            /** @enum {string} */
            name?: "UNSUPPORTED_MEDIA_TYPE";
            /** @enum {string} */
            message?: "The server does not support the request payload's media type.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Unprocessable Entity Error
         * @description The requested action cannot be performed and may require interaction with APIs or processes outside of the current request. This is distinct from a 500 response in that there are no systemic problems limiting the API from performing the request.
         */
        error_422: {
            /** @enum {string} */
            name?: "UNPROCESSABLE_ENTITY";
            /** @enum {string} */
            message?: "The requested action could not be performed, semantically incorrect, or failed business validation.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Internal Server Error
         * @description This is either a system or application error, and generally indicates that although the client appeared to provide a correct request, something unexpected has gone wrong on the server.
         * @example {
         *       "name": "INTERNAL_SERVER_ERROR",
         *       "message": "An internal server error occurred.",
         *       "debug_id": "90957fca61718",
         *       "links": [
         *         {
         *           "href": "https://developer.paypal.com/api/orders/v2/#error-INTERNAL_SERVER_ERROR",
         *           "rel": "information_link"
         *         }
         *       ]
         *     }
         */
        error_500: {
            /** @enum {string} */
            name?: "INTERNAL_SERVER_ERROR";
            /** @enum {string} */
            message?: "An internal server error occurred.";
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Service Unavailable Error
         * @description The server is temporarily unable to handle the request, for example, because of planned maintenance or downtime.
         * @example {
         *       "name": "SERVICE_UNAVAILABLE",
         *       "message": "Service Unavailable.",
         *       "debug_id": "90957fca61718",
         *       "information_link": "https://developer.paypal.com/docs/api/orders/v2/#error-SERVICE_UNAVAILABLE"
         *     }
         */
        error_503: {
            /** @enum {string} */
            name?: "SERVICE_UNAVAILABLE";
            /** @enum {string} */
            message?: "Service Unavailable.";
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Event Type List
         * @description A list of webhook events.
         */
        EventTypeList: {
            /** @description An array of webhook events. */
            event_types?: components["schemas"]["event_type"][];
        };
        /**
         * Webhook List
         * @description A list of webhooks.
         */
        WebhookList: {
            /** @description An array of webhooks. */
            webhooks?: components["schemas"]["webhook"][];
        };
        /**
         * Event List
         * @description A list of webhooks events.
         */
        EventList: {
            /** @description An array of webhooks events. */
            events?: components["schemas"]["event"][];
            /** @description The number of items in each range of results. Note that the response might have fewer items than the requested `page_size` value. */
            count?: number;
            /** @description An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links). */
            readonly links?: components["schemas"]["link_description"][];
        };
        /**
         * Webhook Lookup List
         * @description A list of webhook lookups.
         */
        WebhookLookupList: {
            /** @description An array of webhook lookups. */
            webhooks_lookups?: components["schemas"]["webhooks_lookup"][];
        };
        /**
         * Error Details
         * @description The error details. Required for client-side `4XX` errors.
         */
        "error_details-2": {
            /** @description The field that caused the error. If this field is in the body, set this value to the field's JSON pointer value. Required for client-side errors. */
            field?: string;
            /** @description The value of the field that caused the error. */
            value?: string;
            /**
             * @description The location of the field that caused the error. Value is `body`, `path`, or `query`.
             * @default body
             */
            location: string;
            /** @description The unique, fine-grained application-level error code. */
            issue: string;
            /** @description The human-readable description for an issue. The description can change over the lifetime of an API, so clients must not depend on this value. */
            description?: string;
        };
        /**
         * Link Description
         * @description The request-related [HATEOAS link](/docs/api/reference/api-responses/#hateoas-links) information.
         */
        link_description: {
            /** @description The complete target URL. To make the related call, combine the method with this [URI Template-formatted](https://tools.ietf.org/html/rfc6570) link. For pre-processing, include the `$`, `(`, and `)` characters. The `href` is the key HATEOAS component that links a completed call with a subsequent call. */
            href: string;
            /** @description The [link relation type](https://tools.ietf.org/html/rfc5988#section-4), which serves as an ID for a link that unambiguously describes the semantics of the link. See [Link Relations](https://www.iana.org/assignments/link-relations/link-relations.xhtml). */
            rel: string;
            /**
             * @description The HTTP method required to make the related call.
             * @enum {string}
             */
            method?: "GET" | "POST" | "PUT" | "DELETE" | "HEAD" | "CONNECT" | "OPTIONS" | "PATCH";
        };
        /**
         * Error
         * @description The error details.
         */
        error: {
            /** @description The human-readable, unique name of the error. */
            name: string;
            /** @description The message that describes the error. */
            message: string;
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id: string;
            /** @description The information link, or URI, that shows detailed information about this error for the developer. */
            readonly information_link?: string;
            /** @description An array of additional details about the error. */
            details?: components["schemas"]["error_details-2"][];
            /** @description An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links). */
            readonly links?: components["schemas"]["link_description"][];
        };
        /**
         * Event Type
         * @description An event type.
         */
        event_type: {
            /** @description The unique event name.<blockquote><strong>Note:</strong> To subscribe to all events, including events as they are added, specify an `*` as the value to represent a wildcard.</blockquote> */
            name: string;
            /** @description A human-readable description of the event. */
            readonly description?: string;
            /** @description The status of a webhook event. */
            readonly status?: string;
            /** @description Identifier for the event type example: 1.0/2.0 etc. */
            readonly resource_versions?: string[];
        };
        /**
         * Webhook
         * @description One or more webhook objects.
         */
        webhook: {
            /** @description The ID of the webhook. */
            readonly id?: string;
            /**
             * Format: uri
             * @description The URL that is configured to listen on `localhost` for incoming `POST` notification messages that contain event information.
             */
            url: string;
            /** @description An array of events to which to subscribe your webhook. To subscribe to all events, including events as they are added, specify the asterisk wild card. To replace the `event_types` array, specify the asterisk wild card. To list all supported events, <a href="#event-type_list">list available events</a>. */
            event_types: components["schemas"]["event_type"][];
            /** @description An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links/). */
            readonly links?: components["schemas"]["link_description"][];
        };
        /**
         * Patch
         * @description The JSON patch object to apply partial updates to resources.
         */
        patch: {
            /**
             * @description The operation.
             * @enum {string}
             */
            op: "add" | "remove" | "replace" | "move" | "copy" | "test";
            /** @description The <a href="https://tools.ietf.org/html/rfc6901">JSON Pointer</a> to the target document location at which to complete the operation. */
            path?: string;
            /**
             * Patch Value
             * @description The value to apply. The <code>remove</code> operation does not require a value.
             */
            value?: unknown;
            /** @description The <a href="https://tools.ietf.org/html/rfc6901">JSON Pointer</a> to the target document location from which to move the value. Required for the <code>move</code> operation. */
            from?: string;
        };
        /**
         * Patch Request
         * @description An array of JSON patch objects to apply partial updates to resources.
         */
        patch_request: components["schemas"]["patch"][];
        /**
         * Webhook Lookup
         * @description The webhook lookup details.
         */
        webhooks_lookup: {
            /** @description The ID of the webhook lookup. */
            readonly id?: string;
            /** @description The application client ID. */
            readonly client_id?: string;
            /** @description An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links/). */
            readonly links?: components["schemas"]["link_description"][];
        };
        /**
         * Event Version
         * @deprecated
         * @description The event version in the webhook notification.
         */
        event_version: string;
        /**
         * Resource Version
         * @description The resource version in the webhook notification.
         */
        resource_version: string;
        /**
         * Event
         * @description A webhook event notification.
         */
        event: {
            /** @description The ID of the webhook event notification. */
            readonly id?: string;
            /**
             * Format: date-time
             * @description The date and time when the webhook event notification was created, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
             */
            readonly create_time?: string;
            /** @description The name of the resource related to the webhook notification event. */
            readonly resource_type?: string;
            event_version?: components["schemas"]["event_version"];
            /** @description The event that triggered the webhook event notification. */
            readonly event_type?: string;
            /** @description A summary description for the event notification. */
            readonly summary?: string;
            resource_version?: components["schemas"]["resource_version"];
            /**
             * Resource
             * @description The resource that triggered the webhook event notification.
             */
            readonly resource?: {
                [key: string]: unknown;
            };
            /** @description An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links). */
            readonly links?: components["schemas"]["link_description"][];
        };
        /**
         * Verify Webhook Signature
         * @description A verify webhook signature request.
         */
        verify_webhook_signature: {
            /** @description The algorithm that PayPal uses to generate the signature and that you can use to verify the signature. Extract this value from the `PAYPAL-AUTH-ALGO` response header, which is received with the webhook notification. */
            auth_algo: string;
            /**
             * Format: uri
             * @description The X.509 public key certificate. Download the certificate from this URL and use it to verify the signature. Extract this value from the `PAYPAL-CERT-URL` response header, which is received with the webhook notification.
             */
            cert_url: string;
            /** @description The ID of the HTTP transmission. Contained in the `PAYPAL-TRANSMISSION-ID` header of the notification message. */
            transmission_id: string;
            /** @description The PayPal-generated asymmetric signature. Appears in the `PAYPAL-TRANSMISSION-SIG` header of the notification message. */
            transmission_sig: string;
            /**
             * Format: date-time
             * @description The date and time of the HTTP transmission, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Appears in the `PAYPAL-TRANSMISSION-TIME` header of the notification message.
             */
            transmission_time: string;
            /** @description The ID of the webhook as configured in your Developer Portal account. */
            webhook_id: string;
            webhook_event: components["schemas"]["event"];
        };
        /**
         * Verify Webhook Signature Response
         * @description The verify webhook signature response.
         */
        verify_webhook_signature_response: {
            /**
             * @description The status of the signature verification.
             * @enum {string}
             */
            verification_status: "SUCCESS" | "FAILURE";
        };
        /**
         * Event Resend
         * @description Resends a webhook event notification, by ID.
         */
        event_resend: {
            /** @description An array of webhook account IDs. */
            webhook_ids?: string[];
        };
        /**
         * Simulate Event
         * @description Simulates a mock webhook event.
         */
        simulate_event: {
            /** @description The ID of the webhook. If omitted, the URL is required. */
            webhook_id?: string;
            /**
             * Format: uri
             * @description The URL for the webhook endpoint. If omitted, the webhook ID is required.
             */
            url?: string;
            /** @description The event name. Specify one of the subscribed events. For each request, provide only one event. */
            event_type: string;
            /** @description The identifier for event type ex: 1.0/2.0 etc. */
            resource_version?: string;
        };
    };
    responses: never;
    parameters: {
        /** @description Filters the webhooks in the response by an `anchor_id` entity type. */
        anchor_type: "APPLICATION" | "ACCOUNT";
        /** @description The ID of the webhook for which to list subscriptions. */
        webhook_id: string;
        /** @description The ID of the webhook lookup to delete. */
        webhook_lookup_id: string;
        /** @description The number of webhook event notifications to return in the response. */
        page_size: number;
        /** @description Filters the webhook event notifications in the response to those created on or after this date and time and on or before the `end_time` value. Both values are in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6) format. Example: `start_time=2013-03-06T11:00:00Z`. */
        start_time: string;
        /** @description Filters the webhook event notifications in the response to those created on or after the `start_time` and on or before this date and time. Both values are in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6) format. Example: `end_time=2013-03-06T11:00:00Z`. */
        end_time: string;
        /** @description Filters the response to a single transaction, by ID. */
        transaction_id: string;
        /** @description Filters the response to a single event. */
        event_type: string;
        /** @description The ID of the webhook event notification to resend. */
        event_id: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "webhooks.list": {
        parameters: {
            query?: {
                /** @description Filters the webhooks in the response by an `anchor_id` entity type. */
                anchor_type?: components["parameters"]["anchor_type"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that lists webhooks with webhook details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebhookList"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "webhooks.post": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["webhook"];
            };
        };
        responses: {
            /** @description A successful request returns the HTTP `201 Created` status code and a JSON response body with a [`webhook`](/docs/api/webhooks/v1/#definition-webhook) object that includes the webhook ID for later use. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["webhook"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "webhooks.get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the webhook for which to list subscriptions. */
                webhook_id: components["parameters"]["webhook_id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that shows webhook details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["webhook"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "webhooks.delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the webhook for which to list subscriptions. */
                webhook_id: components["parameters"]["webhook_id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `204 No Content` status code with no JSON response body. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "webhooks.update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the webhook for which to list subscriptions. */
                webhook_id: components["parameters"]["webhook_id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["patch_request"];
            };
        };
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that shows webhook details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["webhook"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "event-types.list": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the webhook for which to list subscriptions. */
                webhook_id: components["parameters"]["webhook_id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that lists event subscriptions for a webhook. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventTypeList"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "webhooks-lookup.list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that lists webhook lookups with webhook lookup details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebhookLookupList"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "webhooks-lookup.post": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `201 Created` status code and a JSON response body that shows webhook lookup details. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["webhooks_lookup"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "webhooks-lookup.get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the webhook lookup to delete. */
                webhook_lookup_id: components["parameters"]["webhook_lookup_id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that shows webhook lookup details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["webhooks_lookup"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "webhooks-lookup.delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the webhook lookup to delete. */
                webhook_lookup_id: components["parameters"]["webhook_lookup_id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `204 No Content` status code with no JSON response body. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "verify-webhook-signature.post": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["verify_webhook_signature"];
            };
        };
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that shows the verification status. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["verify_webhook_signature_response"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "webhooks-event-types.list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that lists available events to which any webhook can subscribe. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventTypeList"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "webhooks-events.list": {
        parameters: {
            query?: {
                /** @description The number of webhook event notifications to return in the response. */
                page_size?: components["parameters"]["page_size"];
                /** @description Filters the webhook event notifications in the response to those created on or after this date and time and on or before the `end_time` value. Both values are in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6) format. Example: `start_time=2013-03-06T11:00:00Z`. */
                start_time?: components["parameters"]["start_time"];
                /** @description Filters the webhook event notifications in the response to those created on or after the `start_time` and on or before this date and time. Both values are in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6) format. Example: `end_time=2013-03-06T11:00:00Z`. */
                end_time?: components["parameters"]["end_time"];
                /** @description Filters the response to a single transaction, by ID. */
                transaction_id?: components["parameters"]["transaction_id"];
                /** @description Filters the response to a single event. */
                event_type?: components["parameters"]["event_type"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that lists webhooks event notifications. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventList"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "webhooks-events.get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the webhook event notification to resend. */
                event_id: components["parameters"]["event_id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that shows webhooks event notification details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["event"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "webhooks-events.resend": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the webhook event notification to resend. */
                event_id: components["parameters"]["event_id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["event_resend"];
            };
        };
        responses: {
            /** @description A successful request returns the HTTP `202 Accepted` status code and a JSON response body that shows webhook event notification details. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["event"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "simulate-event.post": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["simulate_event"];
            };
        };
        responses: {
            /** @description A successful request returns the HTTP `202 Accepted` status code and a JSON response body that shows details for the mock event. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["event"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
}
