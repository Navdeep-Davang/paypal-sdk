/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v2/payments/authorizations/{authorization_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show details for authorized payment
         * @description Shows details for an authorized payment, by ID.
         */
        get: operations["authorizations.get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/payments/authorizations/{authorization_id}/capture": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Capture authorized payment
         * @description Captures an authorized payment, by ID.
         */
        post: operations["authorizations.capture"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/payments/authorizations/{authorization_id}/reauthorize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reauthorize authorized payment
         * @description Reauthorizes an authorized PayPal account payment, by ID. To ensure that funds are still available, reauthorize a payment after its initial three-day honor period expires. Within the 29-day authorization period, you can issue multiple re-authorizations after the honor period expires.<br/><br/>If 30 days have transpired since the date of the original authorization, you must create an authorized payment instead of reauthorizing the original authorized payment.<br/><br/>A reauthorized payment itself has a new honor period of three days.<br/><br/>You can reauthorize an authorized payment from 4 to 29 days after the 3-day honor period. The allowed amount depends on context and geography, for example in US it is up to 115% of the original authorized amount, not to exceed an increase of $75 USD.<br/><br/>Supports only the `amount` request parameter.<blockquote><strong>Note:</strong> This request is currently not supported for Partner use cases.</blockquote>
         */
        post: operations["authorizations.reauthorize"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/payments/authorizations/{authorization_id}/void": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Void authorized payment
         * @description Voids, or cancels, an authorized payment, by ID. You cannot void an authorized payment that has been fully captured.
         */
        post: operations["authorizations.void"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/payments/captures/{capture_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show captured payment details
         * @description Shows details for a captured payment, by ID.
         */
        get: operations["captures.get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/payments/captures/{capture_id}/refund": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refund captured payment
         * @description Refunds a captured payment, by ID. For a full refund, include an empty payload in the JSON request body. For a partial refund, include an <code>amount</code> object in the JSON request body.
         */
        post: operations["captures.refund"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/payments/refunds/{refund_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show refund details
         * @description Shows details for a refund, by ID.
         */
        get: operations["refunds.get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        400: {
            details?: ({
                /** @enum {string} */
                issue?: "INVALID_PARAMETER_VALUE";
                /** @enum {string} */
                description?: "The value of a field is invalid.";
            } | {
                /** @enum {string} */
                issue?: "MISSING_REQUIRED_PARAMETER";
                /** @enum {string} */
                description?: "A required field / parameter is missing.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_LENGTH";
                /** @enum {string} */
                description?: "The value of a field is either too short or too long.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "The value of a field is too long.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_PARAMETER_SYNTAX";
                /** @enum {string} */
                description?: "The value of a field does not conform to the expected format.";
            })[];
        };
        401: {
            details?: {
                /** @enum {string} */
                issue?: "INVALID_ACCOUNT_STATUS";
                /** @enum {string} */
                description?: "Account validations failed for the user.";
            }[];
        };
        403: {
            details?: {
                /** @enum {string} */
                issue?: "PERMISSION_DENIED";
                /** @enum {string} */
                description?: "You do not have permission to access or perform operations on this resource.";
            }[];
        };
        404: {
            details?: {
                /** @enum {string} */
                issue?: "INVALID_RESOURCE_ID";
                /** @enum {string} */
                description?: "Specified resource ID does not exist. Please check the resource ID and try again.";
            }[];
        };
        409: {
            details?: {
                /** @enum {string} */
                issue?: "PREVIOUS_REQUEST_IN_PROGRESS";
                /** @enum {string} */
                description?: "A previous request on this resource is currently in progress. Please wait for sometime and try again. It is best to space out the initial and the subsequent request(s) to avoid receiving this error.";
            }[];
        };
        422: {
            details?: ({
                /** @enum {string} */
                issue?: "INVALID_CURRENCY_CODE";
                /** @enum {string} */
                description?: "Currency code is invalid or is not currently supported. Please refer https://developer.paypal.com/docs/api/reference/currency-codes/ for list of supported currency codes.";
            } | {
                /** @enum {string} */
                issue?: "CANNOT_BE_ZERO_OR_NEGATIVE";
                /** @enum {string} */
                description?: "Must be greater than zero. If the currency supports decimals, only two decimal place precision is supported.";
            } | {
                /** @enum {string} */
                issue?: "DECIMAL_PRECISION";
                /** @enum {string} */
                description?: "If the currency supports decimals, only two decimal place precision is supported.";
            } | {
                /** @enum {string} */
                issue?: "DECIMALS_NOT_SUPPORTED";
                /** @enum {string} */
                description?: "Currency does not support decimals. Please refer to https://developer.paypal.com/docs/api/reference/currency-codes/ for more information.";
            } | {
                /** @enum {string} */
                issue?: "TRANSACTION_REFUSED";
                /** @enum {string} */
                description?: "PayPal's internal controls prevent authorization from being captured.";
            } | {
                /** @enum {string} */
                issue?: "AUTHORIZATION_VOIDED";
                /** @enum {string} */
                description?: "A voided authorization cannot be captured or reauthorized. ";
            } | {
                /** @enum {string} */
                issue?: "MAX_CAPTURE_COUNT_EXCEEDED";
                /** @enum {string} */
                description?: "Maxmimum number of allowable captures has been reached. No additional captures are possible for this authorization. Contact Customer Service or your account manager to change the number of captures for a given authorization.";
            } | {
                /** @enum {string} */
                issue?: "DUPLICATE_INVOICE_ID";
                /** @enum {string} */
                description?: "Requested invoice_id has been previously captured. Possible duplicate transaction.";
            } | {
                /** @enum {string} */
                issue?: "AUTH_CAPTURE_CURRENCY_MISMATCH";
                /** @enum {string} */
                description?: "Currency of capture must be the same as currency of authorization.";
            } | {
                /** @enum {string} */
                issue?: "PAYER_CANNOT_PAY";
                /** @enum {string} */
                description?: "Payer cannot pay for this transaction. Please contact the payer to find other ways to pay for this transaction.";
            } | {
                /** @enum {string} */
                issue?: "AUTHORIZATION_DENIED";
                /** @enum {string} */
                description?: "An denied authorization cannot be captured.";
            } | {
                /** @enum {string} */
                issue?: "AUTHORIZATION_EXPIRED";
                /** @enum {string} */
                description?: "An expired authorization cannot be captured.";
            } | {
                /** @enum {string} */
                issue?: "AUTHORIZATION_ALREADY_CAPTURED";
                /** @enum {string} */
                description?: "Authorization has previously been captured.";
            } | {
                /** @enum {string} */
                issue?: "MAX_CAPTURE_AMOUNT_EXCEEDED";
                /** @enum {string} */
                description?: "Capture amount exceeds allowable limit. Please contact customer service or your account manager to request the change to your overage limit. The default overage limit is 115%, which allows the sum of all captures to be up to 115% of the order amount. The ability to over capture is subjected to regulatory approvals.";
            } | {
                /** @enum {string} */
                issue?: "TRANSACTION_REFUSED";
                /** @enum {string} */
                description?: "PayPal's internal controls prevent authorization from being captured.";
            } | {
                /** @enum {string} */
                issue?: "PAYEE_ACCOUNT_LOCKED_OR_CLOSED";
                /** @enum {string} */
                description?: "Transaction could not complete because payee account is locked or closed.";
            } | {
                /** @enum {string} */
                issue?: "PAYER_ACCOUNT_LOCKED_OR_CLOSED";
                /** @enum {string} */
                description?: "The payer account cannot be used for this transaction.";
            } | {
                /** @enum {string} */
                issue?: "PAYEE_ACCOUNT_RESTRICTED";
                /** @enum {string} */
                description?: "Payee account is restricted.";
            })[];
        };
        /**
         * Error Details
         * @description The error details. Required for client-side `4XX` errors.
         */
        error_details: {
            /** @description The field that caused the error. If this field is in the body, set this value to the field's JSON pointer value. Required for client-side errors. */
            field?: string;
            /** @description The value of the field that caused the error. */
            value?: string;
            location?: components["schemas"]["error_location"];
            /** @description The unique, fine-grained application-level error code. */
            issue: string;
            /** @description The human-readable description for an issue. The description can change over the lifetime of an API, so clients must not depend on this value. */
            description?: string;
        };
        /**
         * @description The location of the field that caused the error. Value is `body`, `path`, or `query`.
         * @default body
         * @enum {string}
         */
        error_location: "body" | "path" | "query";
        /** @description The default error response. */
        error_default: components["schemas"]["error_400"] | components["schemas"]["error_401"] | components["schemas"]["error_403"] | components["schemas"]["error_404"] | components["schemas"]["error_409"] | components["schemas"]["error_415"] | components["schemas"]["error_422"] | components["schemas"]["error_500"] | components["schemas"]["error_503"];
        /**
         * Link Description
         * @description The request-related [HATEOAS link](/api/rest/responses/#hateoas-links) information.
         */
        error_link_description: {
            /** @description The complete target URL. To make the related call, combine the method with this [URI Template-formatted](https://tools.ietf.org/html/rfc6570) link. For pre-processing, include the `$`, `(`, and `)` characters. The `href` is the key HATEOAS component that links a completed call with a subsequent call. */
            href: string;
            /** @description The [link relation type](https://tools.ietf.org/html/rfc5988#section-4), which serves as an ID for a link that unambiguously describes the semantics of the link. See [Link Relations](https://www.iana.org/assignments/link-relations/link-relations.xhtml). */
            rel: string;
            /**
             * @description The HTTP method required to make the related call.
             * @enum {string}
             */
            method?: "GET" | "POST" | "PUT" | "DELETE" | "PATCH";
        };
        /**
         * Bad Request Error
         * @description Request is not well-formed, syntactically incorrect, or violates schema.
         */
        error_400: {
            /** @enum {string} */
            name?: "INVALID_REQUEST";
            /** @enum {string} */
            message?: "Request is not well-formed, syntactically incorrect, or violates schema.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Unauthorized Error
         * @description Authentication failed due to missing Authorization header, or invalid authentication credentials.
         */
        error_401: {
            /** @enum {string} */
            name?: "AUTHENTICATION_FAILURE";
            /** @enum {string} */
            message?: "Authentication failed due to missing authorization header, or invalid authentication credentials.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Not Authorized Error
         * @description The client is not authorized to access this resource, although it may have valid credentials.
         */
        error_403: {
            /** @enum {string} */
            name?: "NOT_AUTHORIZED";
            /** @enum {string} */
            message?: "Authorization failed due to insufficient permissions.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Not found Error
         * @description The server has not found anything matching the request URI. This either means that the URI is incorrect or the resource is not available.
         */
        error_404: {
            /** @enum {string} */
            name?: "RESOURCE_NOT_FOUND";
            /** @enum {string} */
            message?: "The specified resource does not exist.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Resource Conflict Error
         * @description The server has detected a conflict while processing this request.
         */
        error_409: {
            /** @enum {string} */
            name?: "RESOURCE_CONFLICT";
            /** @enum {string} */
            message?: "The server has detected a conflict while processing this request.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Unsupported Media Type Error
         * @description The server does not support the request payload's media type.
         */
        error_415: {
            /** @enum {string} */
            name?: "UNSUPPORTED_MEDIA_TYPE";
            /** @enum {string} */
            message?: "The server does not support the request payload's media type.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Unprocessable Entity Error
         * @description The requested action cannot be performed and may require interaction with APIs or processes outside of the current request. This is distinct from a 500 response in that there are no systemic problems limiting the API from performing the request.
         */
        error_422: {
            /** @enum {string} */
            name?: "UNPROCESSABLE_ENTITY";
            /** @enum {string} */
            message?: "The requested action could not be performed, semantically incorrect, or failed business validation.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Internal Server Error
         * @description This is either a system or application error, and generally indicates that although the client appeared to provide a correct request, something unexpected has gone wrong on the server.
         * @example {
         *       "name": "INTERNAL_SERVER_ERROR",
         *       "message": "An internal server error occurred.",
         *       "debug_id": "90957fca61718",
         *       "links": [
         *         {
         *           "href": "https://developer.paypal.com/api/orders/v2/#error-INTERNAL_SERVER_ERROR",
         *           "rel": "information_link"
         *         }
         *       ]
         *     }
         */
        error_500: {
            /** @enum {string} */
            name?: "INTERNAL_SERVER_ERROR";
            /** @enum {string} */
            message?: "An internal server error occurred.";
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Service Unavailable Error
         * @description The server is temporarily unable to handle the request, for example, because of planned maintenance or downtime.
         * @example {
         *       "name": "SERVICE_UNAVAILABLE",
         *       "message": "Service Unavailable.",
         *       "debug_id": "90957fca61718",
         *       "information_link": "https://developer.paypal.com/docs/api/orders/v2/#error-SERVICE_UNAVAILABLE"
         *     }
         */
        error_503: {
            /** @enum {string} */
            name?: "SERVICE_UNAVAILABLE";
            /** @enum {string} */
            message?: "Service Unavailable.";
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Auhorization Status Details
         * @description The details of the authorized payment status.
         */
        authorization_status_details: {
            /**
             * @description The reason why the authorized status is `PENDING`.
             * @enum {string}
             */
            reason?: "PENDING_REVIEW";
        };
        /**
         * Authorization Status
         * @description The status fields for an authorized payment.
         */
        authorization_status: {
            /**
             * @description The status for the authorized payment.
             * @enum {string}
             */
            readonly status?: "CREATED" | "CAPTURED" | "DENIED" | "PARTIALLY_CAPTURED" | "VOIDED" | "PENDING";
            /** @description The details of the authorized order pending status. */
            readonly status_details?: components["schemas"]["authorization_status_details"];
        };
        /**
         * Format: ppaas_common_currency_code_v2
         * @description The [three-character ISO-4217 currency code](/api/rest/reference/currency-codes/) that identifies the currency.
         */
        currency_code: string;
        /**
         * Money
         * @description The currency and amount for a financial transaction, such as a balance or payment due.
         */
        money: {
            currency_code: components["schemas"]["currency_code"];
            /** @description The value, which might be:<ul><li>An integer for currencies like `JPY` that are not typically fractional.</li><li>A decimal fraction for currencies like `TND` that are subdivided into thousandths.</li></ul>For the required number of decimal places for a currency code, see [Currency Codes](/api/rest/reference/currency-codes/). */
            value: string;
        };
        /**
         * Card Brand
         * @description The card network or brand. Applies to credit, debit, gift, and payment cards.
         * @enum {string}
         */
        card_brand: "VISA" | "MASTERCARD" | "DISCOVER" | "AMEX" | "SOLO" | "JCB" | "STAR" | "DELTA" | "SWITCH" | "MAESTRO" | "CB_NATIONALE" | "CONFIGOGA" | "CONFIDIS" | "ELECTRON" | "CETELEM" | "CHINA_UNION_PAY";
        /**
         * Network Transaction Reference
         * @description Reference values used by the card network to identify a transaction.
         */
        network_transaction_reference: {
            /** @description Transaction reference id returned by the scheme. For Visa and Amex, this is the "Tran id" field in response. For MasterCard, this is the "BankNet reference id" field in response. For Discover, this is the "NRID" field in response. The pattern we expect for this field from Visa/Amex/CB/Discover is numeric, Mastercard/BNPP is alphanumeric and Paysecure is alphanumeric with special character -. */
            id: string;
            /** @description The date that the transaction was authorized by the scheme. This field may not be returned for all networks. MasterCard refers to this field as "BankNet reference date. */
            date?: string;
            /** @description Name of the card network through which the transaction was routed. */
            network?: components["schemas"]["card_brand"];
            /** @description Reference ID issued for the card transaction. This ID can be used to track the transaction across processors, card brands and issuing banks. */
            acquirer_reference_number?: string;
        };
        /**
         * Seller Protection
         * @description The level of protection offered as defined by [PayPal Seller Protection for Merchants](https://www.paypal.com/us/webapps/mpp/security/seller-protection).
         */
        seller_protection: {
            /**
             * @description Indicates whether the transaction is eligible for seller protection. For information, see [PayPal Seller Protection for Merchants](https://www.paypal.com/us/webapps/mpp/security/seller-protection).
             * @enum {string}
             */
            readonly status?: "ELIGIBLE" | "PARTIALLY_ELIGIBLE" | "NOT_ELIGIBLE";
            /** @description An array of conditions that are covered for the transaction. */
            readonly dispute_categories?: ("ITEM_NOT_RECEIVED" | "UNAUTHORIZED_TRANSACTION")[];
        };
        /**
         * Format: ppaas_date_time_v3
         * @description The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
         */
        date_time: string;
        /**
         * Link Description
         * @description The request-related [HATEOAS link](/api/rest/responses/#hateoas-links) information.
         */
        link_description: {
            /** @description The complete target URL. To make the related call, combine the method with this [URI Template-formatted](https://tools.ietf.org/html/rfc6570) link. For pre-processing, include the `$`, `(`, and `)` characters. The `href` is the key HATEOAS component that links a completed call with a subsequent call. */
            href: string;
            /** @description The [link relation type](https://tools.ietf.org/html/rfc5988#section-4), which serves as an ID for a link that unambiguously describes the semantics of the link. See [Link Relations](https://www.iana.org/assignments/link-relations/link-relations.xhtml). */
            rel: string;
            /**
             * @description The HTTP method required to make the related call.
             * @enum {string}
             */
            method?: "GET" | "POST" | "PUT" | "DELETE" | "HEAD" | "CONNECT" | "OPTIONS" | "PATCH";
        };
        /**
         * Transaction Date and Time Stamps
         * @description The date and time stamps that are common to authorized payment, captured payment, and refund transactions.
         */
        activity_timestamps: {
            /** @description The date and time when the transaction occurred, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). */
            readonly create_time?: components["schemas"]["date_time"];
            /** @description The date and time when the transaction was last updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). */
            readonly update_time?: components["schemas"]["date_time"];
        };
        /**
         * Authorization
         * @description The authorized payment transaction.
         */
        authorization: components["schemas"]["authorization_status"] & {
            /** @description The PayPal-generated ID for the authorized payment. */
            readonly id?: string;
            /** @description The amount for this authorized payment. */
            readonly amount?: components["schemas"]["money"];
            /** @description The API caller-provided external invoice number for this order. Appears in both the payer's transaction history and the emails that the payer receives. */
            readonly invoice_id?: string;
            /** @description The API caller-provided external ID. Used to reconcile API caller-initiated transactions with PayPal transactions. Appears in transaction and settlement reports. */
            custom_id?: string;
            network_transaction_reference?: components["schemas"]["network_transaction_reference"];
            readonly seller_protection?: components["schemas"]["seller_protection"];
            /** @description The date and time when the authorized payment expires, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). */
            readonly expiration_time?: components["schemas"]["date_time"];
            /** @description An array of related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links). */
            readonly links?: components["schemas"]["link_description"][];
        } & components["schemas"]["activity_timestamps"];
        /**
         * Related Identifiers
         * @description Identifiers related to a specific resource.
         */
        related_ids: {
            /** @description Order ID related to the resource. */
            order_id?: string;
            /** @description Authorization ID related to the resource. */
            authorization_id?: string;
            /** @description Capture ID related to the resource. */
            capture_id?: string;
        };
        /**
         * Supplementary Data
         * @description The supplementary data.
         */
        supplementary_data: {
            /** @description Identifiers related to a specific resource. */
            readonly related_ids?: components["schemas"]["related_ids"];
        };
        /**
         * Format: merchant_common_email_address_v2
         * @description The internationalized email address.<blockquote><strong>Note:</strong> Up to 64 characters are allowed before and 255 characters are allowed after the <code>@</code> sign. However, the generally accepted maximum length for an email address is 254 characters. The pattern verifies that an unquoted <code>@</code> sign exists.</blockquote>
         */
        email: string;
        /**
         * PayPal Account Identifier
         * Format: ppaas_payer_id_v3
         * @description The account identifier for a PayPal account.
         */
        account_id: string;
        /**
         * Merchant Base
         * @description The details for the merchant who receives the funds and fulfills the order. The merchant is also known as the payee.
         */
        payee_base: {
            /** @description The email address of merchant. */
            email_address?: components["schemas"]["email"];
            /** @description The encrypted PayPal account ID of the merchant. */
            merchant_id?: components["schemas"]["account_id"];
        };
        /**
         * Authorization
         * @description The authorized payment transaction.
         */
        "authorization-2": components["schemas"]["authorization"] & {
            /** @description An object that provides supplementary/additional data related to a payment transaction. */
            readonly supplementary_data?: components["schemas"]["supplementary_data"];
            /** @description The details associated with the merchant for this transaction. */
            readonly payee?: components["schemas"]["payee_base"];
        };
        /**
         * Capture Identifier
         * @description The capture identification-related fields. Includes the invoice ID, custom ID, note to payer, and soft descriptor.
         */
        supplementary_purchase_data: {
            /** @description The API caller-provided external invoice number for this order. Appears in both the payer's transaction history and the emails that the payer receives. */
            invoice_id?: string;
            /** @description An informational note about this settlement. Appears in both the payer's transaction history and the emails that the payer receives. */
            note_to_payer?: string;
        };
        /**
         * Platform Fee
         * @description The platform or partner fee, commission, or brokerage fee that is associated with the transaction. Not a separate or isolated transaction leg from the external perspective. The platform fee is limited in scope and is always associated with the original payment for the purchase unit.
         */
        platform_fee: {
            /** @description The fee for this transaction. */
            amount: components["schemas"]["money"];
            /** @description The recipient of the fee for this transaction. If you omit this value, the default is the API caller. */
            payee?: components["schemas"]["payee_base"];
        };
        /**
         * Disbursement Mode
         * @description The funds that are held on behalf of the merchant.
         * @default INSTANT
         * @enum {string}
         */
        disbursement_mode: "INSTANT" | "DELAYED";
        /**
         * Payment Instruction
         * @description Any additional payment instructions to be consider during payment processing. This processing instruction is applicable for Capturing an order or Authorizing an Order.
         */
        payment_instruction: {
            /** @description An array of various fees, commissions, tips, or donations. This field is only applicable to merchants that been enabled for PayPal Commerce Platform for Marketplaces and Platforms capability. */
            platform_fees?: components["schemas"]["platform_fee"][];
            /** @description The funds that are held payee by the marketplace/platform. This field is only applicable to merchants that been enabled for PayPal Commerce Platform for Marketplaces and Platforms capability. */
            disbursement_mode?: components["schemas"]["disbursement_mode"];
            /** @description This field is only enabled for selected merchants/partners to use and provides the ability to trigger a specific pricing rate/plan for a payment transaction. The list of eligible 'payee_pricing_tier_id' would be provided to you by your Account Manager. Specifying values other than the one provided to you by your account manager would result in an error. */
            payee_pricing_tier_id?: string;
            /** @description FX identifier generated returned by PayPal to be used for payment processing in order to honor FX rate (for eligible integrations) to be used when amount is settled/received into the payee account. */
            payee_receivable_fx_rate_id?: string;
        };
        /**
         * Capture Request
         * @description Captures either a portion or the full authorized amount of an authorized payment.
         */
        capture_request: components["schemas"]["supplementary_purchase_data"] & {
            /** @description The amount to capture. To capture a portion of the full authorized amount, specify an amount. If amount is not specified, the full authorized amount is captured. The amount must be a positive number and in the same currency as the authorization against which the payment is being captured. */
            amount?: components["schemas"]["money"];
            /** @description The API caller-provided external invoice number for this order. Appears in both the payer's transaction history and the emails that the payer receives. */
            invoice_id?: string;
            /**
             * @description Indicates whether you can make additional captures against the authorized payment. Set to `true` if you do not intend to capture additional payments against the authorization. Set to `false` if you intend to capture additional payments against the authorization.
             * @default false
             */
            final_capture: boolean;
            payment_instruction?: components["schemas"]["payment_instruction"];
            /** @description An informational note about this settlement. Appears in both the payer's transaction history and the emails that the payer receives. */
            note_to_payer?: string;
            /** @description The payment descriptor on the payer's account statement. */
            soft_descriptor?: string;
        };
        /**
         * Capture Status Details
         * @description The details of the captured payment status.
         */
        capture_status_details: {
            /**
             * @description The reason why the captured payment status is `PENDING` or `DENIED`.
             * @enum {string}
             */
            reason?: "BUYER_COMPLAINT" | "CHARGEBACK" | "ECHECK" | "INTERNATIONAL_WITHDRAWAL" | "OTHER" | "PENDING_REVIEW" | "RECEIVING_PREFERENCE_MANDATES_MANUAL_ACTION" | "REFUNDED" | "TRANSACTION_APPROVED_AWAITING_FUNDING" | "UNILATERAL" | "VERIFICATION_REQUIRED";
        };
        /**
         * Capture Status
         * @description The status of a captured payment.
         */
        capture_status: {
            /**
             * @description The status of the captured payment.
             * @enum {string}
             */
            readonly status?: "COMPLETED" | "DECLINED" | "PARTIALLY_REFUNDED" | "PENDING" | "REFUNDED" | "FAILED";
            /** @description The details of the captured payment status. */
            readonly status_details?: components["schemas"]["capture_status_details"];
        };
        /**
         * Exchange Rate
         * @description The exchange rate that determines the amount to convert from one currency to another currency.
         */
        exchange_rate: {
            /** @description The source currency from which to convert an amount. */
            source_currency?: components["schemas"]["currency_code"];
            /** @description The target currency to which to convert an amount. */
            target_currency?: components["schemas"]["currency_code"];
            /** @description The target currency amount. Equivalent to one unit of the source currency. Formatted as integer or decimal value with one to 15 digits to the right of the decimal point. */
            value?: string;
        };
        /**
         * Seller Receivable Breakdown
         * @description The detailed breakdown of the capture activity. This is not available for transactions that are in pending state.
         */
        seller_receivable_breakdown: {
            /** @description The amount for this captured payment in the currency of the transaction. */
            gross_amount: components["schemas"]["money"];
            /** @description The applicable fee for this captured payment in the currency of the transaction. */
            paypal_fee?: components["schemas"]["money"];
            /** @description The applicable fee for this captured payment in the receivable currency. Returned only in cases the fee is charged in the receivable currency. Example 'CNY'. */
            paypal_fee_in_receivable_currency?: components["schemas"]["money"];
            /** @description The net amount that the payee receives for this captured payment in their PayPal account. The net amount is computed as <code>gross_amount</code> minus the <code>paypal_fee</code> minus the <code>platform_fees</code>. */
            net_amount?: components["schemas"]["money"];
            /** @description The net amount that is credited to the payee's PayPal account. Returned only when the currency of the captured payment is different from the currency of the PayPal account where the payee wants to credit the funds. The amount is computed as <code>net_amount</code> times <code>exchange_rate</code>. */
            receivable_amount?: components["schemas"]["money"];
            /** @description The exchange rate that determines the amount that is credited to the payee's PayPal account. Returned when the currency of the captured payment is different from the currency of the PayPal account where the payee wants to credit the funds. */
            exchange_rate?: components["schemas"]["exchange_rate"];
            /** @description An array of platform or partner fees, commissions, or brokerage fees that associated with the captured payment. */
            platform_fees?: components["schemas"]["platform_fee"][];
        };
        /**
         * Processor Response
         * @description The processor response information for payment requests, such as direct credit card transactions.
         */
        processor_response: {
            /**
             * @description The address verification code for Visa, Discover, Mastercard, or American Express transactions.
             * @enum {string}
             */
            readonly avs_code?: "A" | "B" | "C" | "D" | "E" | "F" | "G" | "I" | "M" | "N" | "P" | "R" | "S" | "U" | "W" | "X" | "Y" | "Z" | "Null" | "0" | "1" | "2" | "3" | "4";
            /**
             * @description The card verification value code for for Visa, Discover, Mastercard, or American Express.
             * @enum {string}
             */
            readonly cvv_code?: "E" | "I" | "M" | "N" | "P" | "S" | "U" | "X" | "All others" | "0" | "1" | "2" | "3" | "4";
            /**
             * @description Processor response code for the non-PayPal payment processor errors.
             * @enum {string}
             */
            readonly response_code?: "0000" | "00N7" | "0100" | "0390" | "0500" | "0580" | "0800" | "0880" | "0890" | "0960" | "0R00" | "1000" | "10BR" | "1300" | "1310" | "1312" | "1317" | "1320" | "1330" | "1335" | "1340" | "1350" | "1352" | "1360" | "1370" | "1380" | "1382" | "1384" | "1390" | "1393" | "5100" | "5110" | "5120" | "5130" | "5135" | "5140" | "5150" | "5160" | "5170" | "5180" | "5190" | "5200" | "5210" | "5400" | "5500" | "5650" | "5700" | "5710" | "5800" | "5900" | "5910" | "5920" | "5930" | "5950" | "6300" | "7600" | "7700" | "7710" | "7800" | "7900" | "8000" | "8010" | "8020" | "8030" | "8100" | "8110" | "8220" | "9100" | "9500" | "9510" | "9520" | "9530" | "9540" | "9600" | "PCNR" | "PCVV" | "PP06" | "PPRN" | "PPAD" | "PPAB" | "PPAE" | "PPAG" | "PPAI" | "PPAR" | "PPAU" | "PPAV" | "PPAX" | "PPBG" | "PPC2" | "PPCE" | "PPCO" | "PPCR" | "PPCT" | "PPCU" | "PPD3" | "PPDC" | "PPDI" | "PPDV" | "PPDT" | "PPEF" | "PPEL" | "PPER" | "PPEX" | "PPFE" | "PPFI" | "PPFR" | "PPFV" | "PPGR" | "PPH1" | "PPIF" | "PPII" | "PPIM" | "PPIT" | "PPLR" | "PPLS" | "PPMB" | "PPMC" | "PPMD" | "PPNC" | "PPNL" | "PPNM" | "PPNT" | "PPPH" | "PPPI" | "PPPM" | "PPQC" | "PPRE" | "PPRF" | "PPRR" | "PPS0" | "PPS1" | "PPS2" | "PPS3" | "PPS4" | "PPS5" | "PPS6" | "PPSC" | "PPSD" | "PPSE" | "PPTE" | "PPTF" | "PPTI" | "PPTR" | "PPTT" | "PPTV" | "PPUA" | "PPUC" | "PPUE" | "PPUI" | "PPUP" | "PPUR" | "PPVC" | "PPVE" | "PPVT";
            /**
             * @description The declined payment transactions might have payment advice codes. The card networks, like Visa and Mastercard, return payment advice codes.
             * @enum {string}
             */
            readonly payment_advice_code?: "01" | "02" | "03" | "21";
        };
        /**
         * Capture
         * @description A captured payment.
         */
        capture: components["schemas"]["capture_status"] & {
            /** @description The PayPal-generated ID for the captured payment. */
            readonly id?: string;
            /** @description The amount for this captured payment. */
            readonly amount?: components["schemas"]["money"];
            /** @description The API caller-provided external invoice number for this order. Appears in both the payer's transaction history and the emails that the payer receives. */
            readonly invoice_id?: string;
            /** @description The API caller-provided external ID. Used to reconcile API caller-initiated transactions with PayPal transactions. Appears in transaction and settlement reports. */
            custom_id?: string;
            network_transaction_reference?: components["schemas"]["network_transaction_reference"];
            readonly seller_protection?: components["schemas"]["seller_protection"];
            /**
             * @description Indicates whether you can make additional captures against the authorized payment. Set to `true` if you do not intend to capture additional payments against the authorization. Set to `false` if you intend to capture additional payments against the authorization.
             * @default false
             */
            readonly final_capture: boolean;
            readonly seller_receivable_breakdown?: components["schemas"]["seller_receivable_breakdown"];
            disbursement_mode?: components["schemas"]["disbursement_mode"];
            /** @description An array of related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links). */
            readonly links?: components["schemas"]["link_description"][];
            /** @description An object that provides additional processor information for a direct credit card transaction. */
            processor_response?: components["schemas"]["processor_response"];
        } & components["schemas"]["activity_timestamps"];
        /**
         * Capture
         * @description A captured payment.
         */
        "capture-2": components["schemas"]["capture"] & {
            /** @description An object that provides supplementary/additional data related to a payment transaction. */
            readonly supplementary_data?: components["schemas"]["supplementary_data"];
            /** @description The details associated with the merchant for this transaction. */
            readonly payee?: components["schemas"]["payee_base"];
        };
        /**
         * Reauthorize Request
         * @description Reauthorizes an authorized PayPal account payment, by ID. To ensure that funds are still available, reauthorize a payment after its initial three-day honor period expires. You can reauthorize a payment only once from days four to 29.<br/><br/>If 30 days have transpired since the date of the original authorization, you must create an authorized payment instead of reauthorizing the original authorized payment.<br/><br/>A reauthorized payment itself has a new honor period of three days.<br/><br/>You can reauthorize an authorized payment once. The allowed amount depends on context and geography, for example in US it is up to 115% of the original authorized amount, not to exceed an increase of $75 USD.<br/><br/>Supports only the `amount` request parameter.<blockquote><strong>Note:</strong> This request is currently not supported for Partner use cases.</blockquote>
         */
        reauthorize_request: {
            /** @description The amount to reauthorize for an authorized payment. */
            amount?: components["schemas"]["money"];
        };
        "authorizations.reauthorize-400": {
            details?: ({
                /** @enum {string} */
                issue?: "MISSING_REQUIRED_PARAMETER";
                /** @enum {string} */
                description?: "A required field / parameter is missing.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_LENGTH";
                /** @enum {string} */
                description?: "The value of a field is either too short or too long.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "The value of a field is too long.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_PARAMETER_SYNTAX";
                /** @enum {string} */
                description?: "The value of a field does not conform to the expected format.";
            })[];
        };
        "authorizations.reauthorize-422": {
            details?: ({
                /** @enum {string} */
                issue?: "INVALID_CURRENCY_CODE";
                /** @enum {string} */
                description?: "Currency code is invalid or is not currently supported. Please refer https://developer.paypal.com/docs/api/reference/currency-codes/ for list of supported currency codes.";
            } | {
                /** @enum {string} */
                issue?: "CANNOT_BE_ZERO_OR_NEGATIVE";
                /** @enum {string} */
                description?: "Must be greater than zero. If the currency supports decimals, only two decimal place precision is supported.";
            } | {
                /** @enum {string} */
                issue?: "DECIMAL_PRECISION";
                /** @enum {string} */
                description?: "If the currency supports decimals, only two decimal place precision is supported.";
            } | {
                /** @enum {string} */
                issue?: "DECIMALS_NOT_SUPPORTED";
                /** @enum {string} */
                description?: "Currency does not support decimals. Please refer to https://developer.paypal.com/docs/api/reference/currency-codes/ for more information.";
            } | {
                /** @enum {string} */
                issue?: "TRANSACTION_REFUSED";
                /** @enum {string} */
                description?: "PayPal's internal controls prevent authorization from being captured.";
            } | {
                /** @enum {string} */
                issue?: "AUTHORIZATION_VOIDED";
                /** @enum {string} */
                description?: "A voided authorization cannot be captured or reauthorized. ";
            } | {
                /** @enum {string} */
                issue?: "PAYER_CANNOT_PAY";
                /** @enum {string} */
                description?: "Payer cannot pay for this transaction. Please contact the payer to find other ways to pay for this transaction.";
            } | {
                /** @enum {string} */
                issue?: "AUTHORIZATION_ALREADY_CAPTURED";
                /** @enum {string} */
                description?: "Authorization has previously been captured.";
            } | {
                /** @enum {string} */
                issue?: "PAYEE_ACCOUNT_LOCKED_OR_CLOSED";
                /** @enum {string} */
                description?: "Transaction could not complete because payee account is locked or closed.";
            } | {
                /** @enum {string} */
                issue?: "PAYER_ACCOUNT_LOCKED_OR_CLOSED";
                /** @enum {string} */
                description?: "The payer account cannot be used for this transaction.";
            } | {
                /** @enum {string} */
                issue?: "PAYEE_ACCOUNT_RESTRICTED";
                /** @enum {string} */
                description?: "Payee account is restricted.";
            } | {
                /** @enum {string} */
                issue?: "REAUTHORIZATION_NOT_SUPPORTED";
                /** @enum {string} */
                description?: "A reauthorize cannot be attempted on an authorization_id that is the result of a prior reauthorization or on an authorization made on an Order saved using the `v2/orders/id/save` API.";
            } | {
                /** @enum {string} */
                issue?: "AUTH_CURRENCY_MISMATCH";
                /** @enum {string} */
                description?: "The currency specified during reauthorization should be the same as the currency specified in the original authorization. Please check the currency of the authorization for which you are trying to reauthorize and try again.";
            })[];
        };
        "authorizations.void-422": {
            details?: ({
                /** @enum {string} */
                issue?: "PREVIOUSLY_CAPTURED";
                /** @enum {string} */
                description?: "Authorization has been previously captured and hence cannot be voided.";
            } | {
                /** @enum {string} */
                issue?: "PREVIOUSLY_VOIDED";
                /** @enum {string} */
                description?: "Authorization has been previously voided and hence cannot be voided again.";
            } | {
                /** @enum {string} */
                issue?: "CANNOT_BE_VOIDED";
                /** @enum {string} */
                description?: "A reauthorization cannot be voided. Please void the original parent authorization.";
            })[];
        };
        /**
         * Payment Instruction
         * @description Any additional payments instructions during refund payment processing. This object is only applicable to merchants that have been enabled for PayPal Commerce Platform for Marketplaces and Platforms capability. Please speak to your account manager if you want to use this capability.
         */
        "payment_instruction-2": {
            /** @description Specifies the amount that the API caller will contribute to the refund being processed. The amount needs to be lower than platform_fees amount originally captured or the amount that is remaining if multiple refunds have been processed. This field is only applicable to merchants that have been enabled for PayPal Commerce Platform for Marketplaces and Platforms capability. Please speak to your account manager if you want to use this capability. */
            platform_fees?: components["schemas"]["platform_fee"][];
        };
        /**
         * Refund Request
         * @description Refunds a captured payment, by ID. For a full refund, include an empty request body. For a partial refund, include an <code>amount</code> object in the request body.
         */
        refund_request: {
            /** @description The amount to refund. To refund a portion of the captured amount, specify an amount. If amount is not specified, an amount equal to <code>captured amount - previous refunds</code> is refunded. The amount must be a positive number and in the same currency as the one in which the payment was captured. */
            amount?: components["schemas"]["money"];
            /** @description The API caller-provided external ID. Used to reconcile API caller-initiated transactions with PayPal transactions. Appears in transaction and settlement reports. The pattern is defined by an external party and supports Unicode. */
            custom_id?: string;
            /** @description The API caller-provided external invoice ID for this order. The pattern is defined by an external party and supports Unicode. */
            invoice_id?: string;
            /** @description The reason for the refund. Appears in both the payer's transaction history and the emails that the payer receives. The pattern is defined by an external party and supports Unicode. */
            note_to_payer?: string;
            /** @description Any additional refund instructions to be set during refund payment processing. This object is only applicable to merchants that have been enabled for PayPal Commerce Platform for Marketplaces and Platforms capability. Please speak to your account manager if you want to use this capability. */
            payment_instruction?: components["schemas"]["payment_instruction-2"];
        };
        /**
         * Refund Status Details
         * @description The details of the refund status.
         */
        refund_status_details: {
            /**
             * @description The reason why the refund has the `PENDING` or `FAILED` status.
             * @enum {string}
             */
            reason?: "ECHECK";
        };
        /**
         * Refund Status
         * @description The refund status.
         */
        refund_status: {
            /**
             * @description The status of the refund.
             * @enum {string}
             */
            readonly status?: "CANCELLED" | "FAILED" | "PENDING" | "COMPLETED";
            /** @description The details of the refund status. */
            readonly status_details?: components["schemas"]["refund_status_details"];
        };
        /**
         * Net Amount Breakdown Item
         * @description The net amount. Returned when the currency of the refund is different from the currency of the PayPal account where the merchant holds their funds.
         */
        net_amount_breakdown_item: {
            /** @description The net amount debited from the merchant's PayPal account. */
            readonly payable_amount?: components["schemas"]["money"];
            /** @description The converted payable amount. */
            readonly converted_amount?: components["schemas"]["money"];
            /** @description The exchange rate that determines the amount that was debited from the merchant's PayPal account. */
            readonly exchange_rate?: components["schemas"]["exchange_rate"];
        };
        /**
         * Refund
         * @description The refund information.
         */
        refund: components["schemas"]["refund_status"] & {
            /** @description The PayPal-generated ID for the refund. */
            readonly id?: string;
            /** @description The amount that the payee refunded to the payer. */
            readonly amount?: components["schemas"]["money"];
            /** @description The API caller-provided external invoice number for this order. Appears in both the payer's transaction history and the emails that the payer receives. */
            readonly invoice_id?: string;
            /** @description The API caller-provided external ID. Used to reconcile API caller-initiated transactions with PayPal transactions. Appears in transaction and settlement reports. */
            custom_id?: string;
            /** @description Reference ID issued for the card transaction. This ID can be used to track the transaction across processors, card brands and issuing banks. */
            acquirer_reference_number?: string;
            /** @description The reason for the refund. Appears in both the payer's transaction history and the emails that the payer receives. */
            readonly note_to_payer?: string;
            /**
             * Merchant Payable Breakdown
             * @description The breakdown of the refund.
             */
            readonly seller_payable_breakdown?: {
                /** @description The amount that the payee refunded to the payer. */
                readonly gross_amount?: components["schemas"]["money"];
                /** @description The PayPal fee that was refunded to the payer in the currency of the transaction. This fee might not match the PayPal fee that the payee paid when the payment was captured. */
                readonly paypal_fee?: components["schemas"]["money"];
                /** @description The PayPal fee that was refunded to the payer in the receivable currency. Returned only in cases when the receivable currency is different from transaction currency. Example 'CNY'. */
                readonly paypal_fee_in_receivable_currency?: components["schemas"]["money"];
                /** @description The net amount that the payee's account is debited in the transaction currency. The net amount is calculated as <code>gross_amount</code> minus <code>paypal_fee</code> minus <code>platform_fees</code>. */
                readonly net_amount?: components["schemas"]["money"];
                /** @description The net amount that the payee's account is debited in the receivable currency. Returned only in cases when the receivable currency is different from transaction currency. Example 'CNY'. */
                readonly net_amount_in_receivable_currency?: components["schemas"]["money"];
                /** @description An array of platform or partner fees, commissions, or brokerage fees for the refund. */
                platform_fees?: components["schemas"]["platform_fee"][];
                /** @description An array of breakdown values for the net amount. Returned when the currency of the refund is different from the currency of the PayPal account where the payee holds their funds. */
                readonly net_amount_breakdown?: components["schemas"]["net_amount_breakdown_item"][];
                /** @description The total amount refunded from the original capture to date. For example, if a payer makes a $100 purchase and was refunded $20 a week ago and was refunded $30 in this refund, the `gross_amount` is $30 for this refund and the `total_refunded_amount` is $50. */
                total_refunded_amount?: components["schemas"]["money"];
            };
            /** @description The details associated with the merchant for this transaction. */
            readonly payer?: components["schemas"]["payee_base"];
            /** @description An array of related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links). */
            readonly links?: components["schemas"]["link_description"][];
        } & components["schemas"]["activity_timestamps"];
        "captures.refund-400": {
            details?: ({
                /** @enum {string} */
                issue?: "MISSING_REQUIRED_PARAMETER";
                description?: string;
            } | {
                /** @enum {string} */
                issue?: "INVALID_PARAMETER_SYNTAX";
                description?: string;
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_LENGTH";
                description?: string;
            })[];
        };
        "captures.refund-422": {
            details?: ({
                /** @enum {string} */
                issue?: "CANNOT_BE_ZERO_OR_NEGATIVE";
                description?: string;
            } | {
                /** @enum {string} */
                issue?: "DECIMAL_PRECISION";
                description?: string;
            } | {
                /** @enum {string} */
                issue?: "DECIMALS_NOT_SUPPORTED";
                description?: string;
            } | {
                /** @enum {string} */
                issue?: "INVALID_CURRENCY_CODE";
                description?: string;
            } | {
                /** @enum {string} */
                issue?: "CURRENCY_MISMATCH";
                description?: string;
            } | {
                /** @enum {string} */
                issue?: "CANNOT_BE_NEGATIVE";
                description?: string;
            } | {
                /** @enum {string} */
                issue?: "CAPTURE_FULLY_REFUNDED";
                /** @enum {string} */
                description?: "The capture has already been fully refunded";
            } | {
                /** @enum {string} */
                issue?: "REFUND_CAPTURE_CURRENCY_MISMATCH";
                /** @enum {string} */
                description?: "Refund must be in the same currency as the capture";
            } | {
                /** @enum {string} */
                issue?: "REFUND_NOT_ALLOWED";
                /** @enum {string} */
                description?: "Capture cannot be refunded.";
            } | {
                /** @enum {string} */
                issue?: "REFUND_TIME_LIMIT_EXCEEDED";
                /** @enum {string} */
                description?: "You are over the time limit to perform a refund on this capture";
            } | {
                /** @enum {string} */
                issue?: "REFUND_AMOUNT_EXCEEDED";
                /** @enum {string} */
                description?: "The refund amount must be less than or equal to the capture amount that has not yet been refunded.";
            } | {
                /** @enum {string} */
                issue?: "REFUND_AMOUNT_TOO_LOW";
                /** @enum {string} */
                description?: "The amount after applying currency conversion is zero and hence the capture cannot be refunded. The currency conversion is required because the currency of the capture is different than the currency in which the amount was settled into the payee account.";
            } | {
                /** @enum {string} */
                issue?: "REFUND_FAILED_INSUFFICIENT_FUNDS";
                /** @enum {string} */
                description?: "Capture could not be refunded due to insufficient funds. Please check to see if you have sufficient funds in your PayPal account or if the bank account linked to your PayPal account is verified and has sufficient funds.";
            } | {
                /** @enum {string} */
                issue?: "PARTIAL_REFUND_NOT_ALLOWED";
                /** @enum {string} */
                description?: "You cannot do a refund less than the original capture amount.";
            } | {
                /** @enum {string} */
                issue?: "MAX_NUMBER_OF_REFUNDS_EXCEEDED";
                /** @enum {string} */
                description?: "You have exceeded the maximum number of refund attempts for this capture.";
            } | {
                /** @enum {string} */
                issue?: "PENDING_CAPTURE";
                /** @enum {string} */
                description?: "Cannot initiate a refund as the capture is pending. Capture is typically pending when the payer has funded the transaction using e-check/bank funded.";
            } | {
                /** @enum {string} */
                issue?: "DUPLICATE_INVOICE_ID";
                /** @enum {string} */
                description?: "Invoice ID was previously used to refund a capture.";
            } | {
                /** @enum {string} */
                issue?: "PAYEE_ACCOUNT_LOCKED_OR_CLOSED";
                /** @enum {string} */
                description?: "Transaction could not complete because payee account is locked or closed.";
            } | {
                /** @enum {string} */
                issue?: "PAYER_ACCOUNT_LOCKED_OR_CLOSED";
                /** @enum {string} */
                description?: "The payer account cannot be used for this transaction.";
            } | {
                /** @enum {string} */
                issue?: "PAYEE_ACCOUNT_RESTRICTED";
                /** @enum {string} */
                description?: "Payee account is restricted.";
            } | {
                /** @enum {string} */
                issue?: "REFUND_NOT_PERMITTED_DUE_TO_CHARGEBACK";
                /** @enum {string} */
                description?: "Refunds are not allowed on this capture due to a chargeback on the card or bank. Please contact the payee to resolve the chargeback.";
            } | {
                /** @enum {string} */
                issue?: "TRANSACTION_DISPUTED";
                /** @enum {string} */
                description?: "Partial refunds cannot be offered at this time because there is an open case on this transaction. Visit the PayPal Resolution Center to review this case.";
            } | {
                /** @enum {string} */
                issue?: "PLATFORM_FEE_EXCEEDED";
                /** @enum {string} */
                description?: "Platform fee amount specified exceeds the amount that is available for refund. You can only refund up to the available platform fee amount. This error is also returned when no platform_fee was specified or was zero when the payment was captured.";
            } | {
                /** @enum {string} */
                issue?: "REFUND_IS_RESTRICTED";
                /** @enum {string} */
                description?: "This refund can only be processed by the API caller that had 'captured' the transaction. If you facilitate your transactions via a platform/partner, please initiate a refund through them.";
            } | {
                /** @enum {string} */
                issue?: "PLATFORM_FEE_NOT_ENABLED";
                /** @enum {string} */
                description?: "The API Caller account is not setup to be able to process refunds with 'platform_fees'. Please contact your Account Manager. This feature is useful when you want to contribute a portion of the 'platform_fees' you had capture as part of the refund being processed.";
            })[];
        };
    };
    responses: {
        /** @description The default response. */
        default: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["error_default"];
            };
        };
    };
    parameters: {
        /** @description The PayPal-generated ID for the authorized payment to void. */
        authorization_id: string;
        /** @description The server stores keys for 45 days. */
        paypal_request_id: string;
        /** @description The preferred server response upon successful completion of the request. Value is:<ul><li><code>return=minimal</code>. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the <code>id</code>, <code>status</code> and HATEOAS links.</li><li><code>return=representation</code>. The server returns a complete resource representation, including the current state of the resource.</li></ul> */
        prefer: string;
        /** @description An API-caller-provided JSON Web Token (JWT) assertion that identifies the merchant. For details, see [PayPal-Auth-Assertion](/docs/api/reference/api-requests/#paypal-auth-assertion).<blockquote><strong>Note:</strong>For three party transactions in which a partner is managing the API calls on behalf of a merchant, the partner must identify the merchant using either a PayPal-Auth-Assertion header or an access token with target_subject.</blockquote> */
        paypal_auth_assertion: string;
        /** @description The PayPal-generated ID for the captured payment to refund. */
        capture_id: string;
        /** @description The PayPal-generated ID for the refund for which to show details. */
        refund_id: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "authorizations.get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The PayPal-generated ID for the authorized payment to void. */
                authorization_id: components["parameters"]["authorization_id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP <code>200 OK</code> status code and a JSON response body that shows authorization details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["authorization-2"];
                };
            };
            /** @description Authentication failed due to missing authorization header, or invalid authentication credentials. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_401"];
                };
            };
            /** @description The request failed because the caller has insufficient permissions. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_403"] & components["schemas"]["403"];
                };
            };
            /** @description The request failed because the resource does not exist. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_404"] & components["schemas"]["404"];
                };
            };
            /** @description The request failed because an internal server error occurred. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            default: components["responses"]["default"];
        };
    };
    "authorizations.capture": {
        parameters: {
            query?: never;
            header?: {
                /** @description The server stores keys for 45 days. */
                "PayPal-Request-Id"?: components["parameters"]["paypal_request_id"];
                /** @description The preferred server response upon successful completion of the request. Value is:<ul><li><code>return=minimal</code>. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the <code>id</code>, <code>status</code> and HATEOAS links.</li><li><code>return=representation</code>. The server returns a complete resource representation, including the current state of the resource.</li></ul> */
                Prefer?: components["parameters"]["prefer"];
            };
            path: {
                /** @description The PayPal-generated ID for the authorized payment to void. */
                authorization_id: components["parameters"]["authorization_id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["capture_request"];
            };
        };
        responses: {
            /** @description A successful request returns the HTTP <code>201 Created</code> status code and a JSON response body that shows captured payment details. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["capture-2"];
                };
            };
            /** @description The request failed because it is not well-formed or is syntactically incorrect or violates schema. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_400"] & components["schemas"]["400"];
                };
            };
            /** @description Authentication failed due to missing authorization header, or invalid authentication credentials. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_401"];
                };
            };
            /** @description The request failed because the caller has insufficient permissions. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_403"] & components["schemas"]["403"];
                };
            };
            /** @description The request failed because the resource does not exist. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_404"] & components["schemas"]["404"];
                };
            };
            /** @description The request failed because it is semantically incorrect or failed business validation. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_422"] & components["schemas"]["422"];
                };
            };
            /** @description The request failed because an internal server error occurred. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            default: components["responses"]["default"];
        };
    };
    "authorizations.reauthorize": {
        parameters: {
            query?: never;
            header?: {
                /** @description The server stores keys for 45 days. */
                "PayPal-Request-Id"?: components["parameters"]["paypal_request_id"];
                /** @description The preferred server response upon successful completion of the request. Value is:<ul><li><code>return=minimal</code>. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the <code>id</code>, <code>status</code> and HATEOAS links.</li><li><code>return=representation</code>. The server returns a complete resource representation, including the current state of the resource.</li></ul> */
                Prefer?: components["parameters"]["prefer"];
            };
            path: {
                /** @description The PayPal-generated ID for the authorized payment to void. */
                authorization_id: components["parameters"]["authorization_id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["reauthorize_request"];
            };
        };
        responses: {
            /** @description A successful request returns the HTTP <code>201 Created</code> status code and a JSON response body that shows the reauthorized payment details. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["authorization-2"];
                };
            };
            /** @description The request failed because it is not well-formed or is syntactically incorrect or violates schema. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_400"] & components["schemas"]["authorizations.reauthorize-400"];
                };
            };
            /** @description Authentication failed due to missing authorization header, or invalid authentication credentials. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_401"];
                };
            };
            /** @description The request failed because the caller has insufficient permissions. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_403"] & components["schemas"]["403"];
                };
            };
            /** @description The request failed because the resource does not exist. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_404"] & components["schemas"]["404"];
                };
            };
            /** @description The request failed because it either is semantically incorrect or failed business validation. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_422"] & components["schemas"]["authorizations.reauthorize-422"];
                };
            };
            /** @description The request failed because an internal server error occurred. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            default: components["responses"]["default"];
        };
    };
    "authorizations.void": {
        parameters: {
            query?: never;
            header?: {
                /** @description An API-caller-provided JSON Web Token (JWT) assertion that identifies the merchant. For details, see [PayPal-Auth-Assertion](/docs/api/reference/api-requests/#paypal-auth-assertion).<blockquote><strong>Note:</strong>For three party transactions in which a partner is managing the API calls on behalf of a merchant, the partner must identify the merchant using either a PayPal-Auth-Assertion header or an access token with target_subject.</blockquote> */
                "PayPal-Auth-Assertion"?: components["parameters"]["paypal_auth_assertion"];
                /** @description The preferred server response upon successful completion of the request. Value is:<ul><li><code>return=minimal</code>. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the <code>id</code>, <code>status</code> and HATEOAS links.</li><li><code>return=representation</code>. The server returns a complete resource representation, including the current state of the resource.</li></ul> */
                Prefer?: components["parameters"]["prefer"];
            };
            path: {
                /** @description The PayPal-generated ID for the authorized payment to void. */
                authorization_id: components["parameters"]["authorization_id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP <code>200 OK</code> status code and a JSON response body that shows authorization details. This response is returned when the Prefer header is set to return=representation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["authorization-2"];
                };
            };
            /** @description A successful request returns the HTTP <code>204 No Content</code> status code with no JSON response body. This response is returned when the Prefer header is set to return=minimal. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The request failed because it is not well-formed or is syntactically incorrect or violates schema. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_400"];
                };
            };
            /** @description Authentication failed due to missing authorization header, or invalid authentication credentials. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_401"] & components["schemas"]["401"];
                };
            };
            /** @description The request failed because the caller has insufficient permissions. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_403"] & components["schemas"]["403"];
                };
            };
            /** @description The request failed because the resource does not exist. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_404"] & components["schemas"]["404"];
                };
            };
            /** @description The request failed because a previous call for the given resource is in progress. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_409"] & components["schemas"]["409"];
                };
            };
            /** @description The request failed because it either is semantically incorrect or failed business validation. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_422"] & components["schemas"]["authorizations.void-422"];
                };
            };
            /** @description The request failed because an internal server error occurred. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            default: components["responses"]["default"];
        };
    };
    "captures.get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The PayPal-generated ID for the captured payment to refund. */
                capture_id: components["parameters"]["capture_id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP <code>200 OK</code> status code and a JSON response body that shows captured payment details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["capture-2"];
                };
            };
            /** @description Authentication failed due to missing authorization header, or invalid authentication credentials. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_401"];
                };
            };
            /** @description The request failed because the caller has insufficient permissions. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_403"] & components["schemas"]["403"];
                };
            };
            /** @description The request failed because the resource does not exist. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_404"] & components["schemas"]["404"];
                };
            };
            /** @description The request failed because an internal server error occurred. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            default: components["responses"]["default"];
        };
    };
    "captures.refund": {
        parameters: {
            query?: never;
            header?: {
                /** @description The server stores keys for 45 days. */
                "PayPal-Request-Id"?: components["parameters"]["paypal_request_id"];
                /** @description The preferred server response upon successful completion of the request. Value is:<ul><li><code>return=minimal</code>. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the <code>id</code>, <code>status</code> and HATEOAS links.</li><li><code>return=representation</code>. The server returns a complete resource representation, including the current state of the resource.</li></ul> */
                Prefer?: components["parameters"]["prefer"];
                /** @description An API-caller-provided JSON Web Token (JWT) assertion that identifies the merchant. For details, see [PayPal-Auth-Assertion](/docs/api/reference/api-requests/#paypal-auth-assertion).<blockquote><strong>Note:</strong>For three party transactions in which a partner is managing the API calls on behalf of a merchant, the partner must identify the merchant using either a PayPal-Auth-Assertion header or an access token with target_subject.</blockquote> */
                "PayPal-Auth-Assertion"?: components["parameters"]["paypal_auth_assertion"];
            };
            path: {
                /** @description The PayPal-generated ID for the captured payment to refund. */
                capture_id: components["parameters"]["capture_id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["refund_request"];
            };
        };
        responses: {
            /** @description A successful request returns the HTTP <code>201 Created</code> status code and a JSON response body that shows refund details. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["refund"];
                };
            };
            /** @description The request failed because it is not well-formed or is syntactically incorrect or violates schema. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_400"] & components["schemas"]["captures.refund-400"];
                };
            };
            /** @description Authentication failed due to missing authorization header, or invalid authentication credentials. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_401"] & components["schemas"]["401"];
                };
            };
            /** @description The request failed because the caller has insufficient permissions. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_403"] & components["schemas"]["403"];
                };
            };
            /** @description The request failed because the resource does not exist. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_404"] & components["schemas"]["404"];
                };
            };
            /** @description The request failed because a previous call for the given resource is in progress. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_409"] & components["schemas"]["409"];
                };
            };
            /** @description The request failed because it either is semantically incorrect or failed business validation. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_422"] & components["schemas"]["captures.refund-422"];
                };
            };
            /** @description The request failed because an internal server error occurred. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            default: components["responses"]["default"];
        };
    };
    "refunds.get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The PayPal-generated ID for the refund for which to show details. */
                refund_id: components["parameters"]["refund_id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP <code>200 OK</code> status code and a JSON response body that shows refund details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["refund"];
                };
            };
            /** @description Authentication failed due to missing authorization header, or invalid authentication credentials. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_401"] & components["schemas"]["401"];
                };
            };
            /** @description The request failed because the caller has insufficient permissions. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_403"] & components["schemas"]["403"];
                };
            };
            /** @description The request failed because the resource does not exist. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_404"] & components["schemas"]["404"];
                };
            };
            /** @description The request failed because an internal server error occurred. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            default: components["responses"]["default"];
        };
    };
}
