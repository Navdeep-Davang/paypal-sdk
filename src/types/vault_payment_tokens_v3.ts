/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v3/vault/payment-tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all payment tokens
         * @description Returns all payment tokens for a customer.
         */
        get: operations["customer.payment-tokens.get"];
        put?: never;
        /**
         * Create payment token for a given payment source
         * @description Creates a Payment Token from the given payment source and adds it to the Vault of the associated customer.
         */
        post: operations["payment-tokens.create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/vault/payment-tokens/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a payment token
         * @description Returns a readable representation of vaulted payment source associated with the payment token id.
         */
        get: operations["payment-tokens.get"];
        put?: never;
        post?: never;
        /**
         * Delete payment token
         * @description Delete the payment token associated with the payment token id.
         */
        delete: operations["payment-tokens.delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/vault/setup-tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a setup token
         * @description Creates a Setup Token from the given payment source and adds it to the Vault of the associated customer.
         */
        post: operations["setup-tokens.create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/vault/setup-tokens/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a setup token
         * @description Returns a readable representation of temporarily vaulted payment source associated with the setup token id.
         */
        get: operations["setup-tokens.get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * Error Details
         * @description The error details. Required for client-side `4XX` errors.
         */
        error_details: {
            /** @description The field that caused the error. If this field is in the body, set this value to the field's JSON pointer value. Required for client-side errors. */
            field?: string;
            /** @description The value of the field that caused the error. */
            value?: string;
            location?: components["schemas"]["error_location"];
            /** @description The unique, fine-grained application-level error code. */
            issue: string;
            /** @description The human-readable description for an issue. The description can change over the lifetime of an API, so clients must not depend on this value. */
            description?: string;
        };
        /**
         * @description The location of the field that caused the error. Value is `body`, `path`, or `query`.
         * @default body
         * @enum {string}
         */
        error_location: "body" | "path" | "query";
        /**
         * Link Description
         * @description The request-related [HATEOAS link](/api/rest/responses/#hateoas-links) information.
         */
        error_link_description: {
            /** @description The complete target URL. To make the related call, combine the method with this [URI Template-formatted](https://tools.ietf.org/html/rfc6570) link. For pre-processing, include the `$`, `(`, and `)` characters. The `href` is the key HATEOAS component that links a completed call with a subsequent call. */
            href: string;
            /** @description The [link relation type](https://tools.ietf.org/html/rfc5988#section-4), which serves as an ID for a link that unambiguously describes the semantics of the link. See [Link Relations](https://www.iana.org/assignments/link-relations/link-relations.xhtml). */
            rel: string;
            /**
             * @description The HTTP method required to make the related call.
             * @enum {string}
             */
            method?: "GET" | "POST" | "PUT" | "DELETE" | "PATCH";
        };
        /**
         * Bad Request Error
         * @description Request is not well-formed, syntactically incorrect, or violates schema.
         */
        error_400: {
            /** @enum {string} */
            name?: "INVALID_REQUEST";
            /** @enum {string} */
            message?: "Request is not well-formed, syntactically incorrect, or violates schema.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Unauthorized Error
         * @description Authentication failed due to missing Authorization header, or invalid authentication credentials.
         */
        error_401: {
            /** @enum {string} */
            name?: "AUTHENTICATION_FAILURE";
            /** @enum {string} */
            message?: "Authentication failed due to missing authorization header, or invalid authentication credentials.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Not Authorized Error
         * @description The client is not authorized to access this resource, although it may have valid credentials.
         */
        error_403: {
            /** @enum {string} */
            name?: "NOT_AUTHORIZED";
            /** @enum {string} */
            message?: "Authorization failed due to insufficient permissions.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Not found Error
         * @description The server has not found anything matching the request URI. This either means that the URI is incorrect or the resource is not available.
         */
        error_404: {
            /** @enum {string} */
            name?: "RESOURCE_NOT_FOUND";
            /** @enum {string} */
            message?: "The specified resource does not exist.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Resource Conflict Error
         * @description The server has detected a conflict while processing this request.
         */
        error_409: {
            /** @enum {string} */
            name?: "RESOURCE_CONFLICT";
            /** @enum {string} */
            message?: "The server has detected a conflict while processing this request.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Unsupported Media Type Error
         * @description The server does not support the request payload's media type.
         */
        error_415: {
            /** @enum {string} */
            name?: "UNSUPPORTED_MEDIA_TYPE";
            /** @enum {string} */
            message?: "The server does not support the request payload's media type.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Unprocessable Entity Error
         * @description The requested action cannot be performed and may require interaction with APIs or processes outside of the current request. This is distinct from a 500 response in that there are no systemic problems limiting the API from performing the request.
         */
        error_422: {
            /** @enum {string} */
            name?: "UNPROCESSABLE_ENTITY";
            /** @enum {string} */
            message?: "The requested action could not be performed, semantically incorrect, or failed business validation.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Internal Server Error
         * @description This is either a system or application error, and generally indicates that although the client appeared to provide a correct request, something unexpected has gone wrong on the server.
         * @example {
         *       "name": "INTERNAL_SERVER_ERROR",
         *       "message": "An internal server error occurred.",
         *       "debug_id": "90957fca61718",
         *       "links": [
         *         {
         *           "href": "https://developer.paypal.com/api/orders/v2/#error-INTERNAL_SERVER_ERROR",
         *           "rel": "information_link"
         *         }
         *       ]
         *     }
         */
        error_500: {
            /** @enum {string} */
            name?: "INTERNAL_SERVER_ERROR";
            /** @enum {string} */
            message?: "An internal server error occurred.";
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Service Unavailable Error
         * @description The server is temporarily unable to handle the request, for example, because of planned maintenance or downtime.
         * @example {
         *       "name": "SERVICE_UNAVAILABLE",
         *       "message": "Service Unavailable.",
         *       "debug_id": "90957fca61718",
         *       "information_link": "https://developer.paypal.com/docs/api/orders/v2/#error-SERVICE_UNAVAILABLE"
         *     }
         */
        error_503: {
            /** @enum {string} */
            name?: "SERVICE_UNAVAILABLE";
            /** @enum {string} */
            message?: "Service Unavailable.";
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /** @description The unique ID for a customer generated by PayPal. */
        merchant_partner_customer_id: string;
        /**
         * Customer Request
         * @description Customer in merchant's or partner's system of records.
         */
        customer: {
            /** @description The unique ID for a customer in merchant's or partner's system of records. */
            id?: components["schemas"]["merchant_partner_customer_id"];
        };
        /** @description The PayPal-generated ID for the vault token. */
        vault_id: string;
        /**
         * Card Brand
         * @description The card network or brand. Applies to credit, debit, gift, and payment cards.
         * @enum {string}
         */
        card_brand: "VISA" | "MASTERCARD" | "DISCOVER" | "AMEX" | "SOLO" | "JCB" | "STAR" | "DELTA" | "SWITCH" | "MAESTRO" | "CB_NATIONALE" | "CONFIGOGA" | "CONFIDIS" | "ELECTRON" | "CETELEM" | "CHINA_UNION_PAY";
        /** @description The year and month, in ISO-8601 `YYYY-MM` date format. See [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). */
        date_year_month: string;
        address_entity: unknown;
        /**
         * Card Verification Status
         * @description Verification status of Card.
         */
        card_verification_status: string;
        /**
         * Format: ppaas_date_time_v3
         * @description The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
         */
        date_time: string;
        /**
         * Format: ppaas_common_currency_code_v2
         * @description The [three-character ISO-4217 currency code](/api/rest/reference/currency-codes/) that identifies the currency.
         */
        currency_code: string;
        /**
         * Money
         * @description The currency and amount for a financial transaction, such as a balance or payment due.
         */
        money: {
            currency_code: components["schemas"]["currency_code"];
            /** @description The value, which might be:<ul><li>An integer for currencies like `JPY` that are not typically fractional.</li><li>A decimal fraction for currencies like `TND` that are subdivided into thousandths.</li></ul>For the required number of decimal places for a currency code, see [Currency Codes](/api/rest/reference/currency-codes/). */
            value: string;
        };
        /**
         * Processor Response
         * @description The processor information. Might be required for payment requests, such as direct credit card transactions.
         */
        processor_response: {
            /**
             * @description The address verification code for Visa, Discover, Mastercard, or American Express transactions.
             * @enum {string}
             */
            readonly avs_code?: "A" | "B" | "C" | "D" | "E" | "F" | "G" | "I" | "M" | "N" | "P" | "R" | "S" | "U" | "W" | "X" | "Y" | "Z" | "Null" | "0" | "1" | "2" | "3" | "4";
            /**
             * @description The card verification value code for for Visa, Discover, Mastercard, or American Express.
             * @enum {string}
             */
            readonly cvv_code?: "E" | "I" | "M" | "N" | "P" | "S" | "U" | "X" | "All others" | "0" | "1" | "2" | "3" | "4";
            /**
             * @description Processor response code for the non-PayPal payment processor errors.
             * @enum {string}
             */
            readonly response_code?: "0000" | "00N7" | "0100" | "0390" | "0500" | "0580" | "0800" | "0880" | "0R00" | "1000" | "10BR" | "1300" | "1310" | "1312" | "1317" | "1320" | "1330" | "1335" | "1340" | "1350" | "1360" | "1370" | "1380" | "1382" | "1384" | "1390" | "1393" | "5100" | "5110" | "5120" | "5130" | "5135" | "5140" | "5150" | "5160" | "5170" | "5180" | "5190" | "5200" | "5210" | "5400" | "5500" | "5650" | "5700" | "5710" | "5800" | "5900" | "5910" | "5920" | "5930" | "6300" | "7600" | "7700" | "7710" | "7800" | "7900" | "8000" | "8010" | "8020" | "8030" | "8100" | "8110" | "8220" | "9100" | "9500" | "9510" | "9520" | "9530" | "9540" | "9600" | "PCNR" | "PCVV" | "PPAD" | "PPAE" | "PPAG" | "PPAI" | "PPAR" | "PPAU" | "PPAV" | "PPAX" | "PPBG" | "PPC2" | "PPCE" | "PPCO" | "PPCR" | "PPCT" | "PPCU" | "PPD3" | "PPDC" | "PPDI" | "PPDV" | "PPEF" | "PPEL" | "PPER" | "PPEX" | "PPFE" | "PPFI" | "PPFR" | "PPFV" | "PPGR" | "PPH1" | "PPIF" | "PPII" | "PPIM" | "PPIT" | "PPLR" | "PPLS" | "PPMB" | "PPMC" | "PPMD" | "PPNC" | "PPNL" | "PPNT" | "PPPH" | "PPPI" | "PPPM" | "PPQC" | "PPRE" | "PPRF" | "PPRR" | "PPS0" | "PPS1" | "PPS2" | "PPS3" | "PPS4" | "PPS5" | "PPS6" | "PPSC" | "PPSD" | "PPSE" | "PPTE" | "PPTF" | "PPTI" | "PPTR" | "PPTT" | "PPTV" | "PPUA" | "PPUC" | "PPUE" | "PPUI" | "PPUP" | "PPUR" | "PPVC" | "PPVE" | "PPVT";
            /**
             * @description The declined payment transactions might have payment advice codes. The card networks, like Visa and Mastercard, return payment advice codes.
             * @enum {string}
             */
            readonly payment_advice_code?: "01" | "02" | "03" | "21";
        };
        "3ds_result": unknown;
        /**
         * Card Verification Details
         * @description Card Verification details including the authorization details and 3D SECURE details.
         */
        card_verification_details: {
            /** @description Transaction Identifier as given by the network to indicate a previously executed CIT authorization. Only present when authorization is successful for a verification. */
            network_transaction_id?: string;
            /** @description The date and time when the instrument was verified. */
            readonly time?: components["schemas"]["date_time"];
            /** @description The amount used for card verification. */
            amount?: components["schemas"]["money"];
            /** @description The processor information. */
            processor_response?: components["schemas"]["processor_response"];
            three_d_secure?: components["schemas"]["3ds_result"];
        };
        /**
         * Card Response
         * @description Full representation of a Card Payment Token.
         */
        card_response: {
            /** @description The card holder's name as it appears on the card. */
            name?: string;
            /** @description The last digits of the payment card. */
            readonly last_digits?: string;
            /** @description The card brand or network. Typically used in the response. */
            readonly brand?: components["schemas"]["card_brand"];
            /** @description The card expiration year and month, in [Internet date format](https://tools.ietf.org/html/rfc3339#section-5.6). */
            expiry?: components["schemas"]["date_year_month"];
            /** @description The billing address for this card. Supports only the `address_line_1`, `address_line_2`, `admin_area_1`, `admin_area_2`, `postal_code`, and `country_code` properties. */
            billing_address?: components["schemas"]["address_entity"];
            /** @description Card Verification status. */
            verification_status?: components["schemas"]["card_verification_status"];
            verification?: components["schemas"]["card_verification_details"];
        };
        /**
         * Name
         * @description The name of the party.
         */
        name: {
            /** @description The prefix, or title, to the party's name. */
            prefix?: string;
            /** @description When the party is a person, the party's given, or first, name. */
            given_name?: string;
            /** @description When the party is a person, the party's surname or family name. Also known as the last name. Required when the party is a person. Use also to store multiple surnames including the matronymic, or mother's, surname. */
            surname?: string;
            /** @description When the party is a person, the party's middle name. Use also to store multiple middle names including the patronymic, or father's, middle name. */
            middle_name?: string;
            /** @description The suffix for the party's name. */
            suffix?: string;
            /** @description DEPRECATED. The party's alternate name. Can be a business name, nickname, or any other name that cannot be split into first, last name. Required when the party is a business. */
            alternate_full_name?: string;
            /** @description When the party is a person, the party's full name. */
            full_name?: string;
        };
        /**
         * Format: ppaas_common_country_code_v2
         * @description The [two-character ISO 3166-1 code](/api/rest/reference/country-codes/) that identifies the country or region.<blockquote><strong>Note:</strong> The country code for Great Britain is <code>GB</code> and not <code>UK</code> as used in the top-level domain names for that country. Use the `C2` country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.</blockquote>
         */
        country_code: string;
        /**
         * Portable Postal Address (Medium-Grained)
         * @description The portable international postal address. Maps to [AddressValidationMetadata](https://github.com/googlei18n/libaddressinput/wiki/AddressValidationMetadata) and HTML 5.1 [Autofilling form controls: the autocomplete attribute](https://www.w3.org/TR/html51/sec-forms.html#autofilling-form-controls-the-autocomplete-attribute).
         */
        address_portable: {
            /** @description The first line of the address. For example, number or street. For example, `173 Drury Lane`. Required for data entry and compliance and risk checks. Must contain the full address. */
            address_line_1?: string;
            /** @description The second line of the address. For example, suite or apartment number. */
            address_line_2?: string;
            /** @description The third line of the address, if needed. For example, a street complement for Brazil, direction text, such as `next to Walmart`, or a landmark in an Indian address. */
            address_line_3?: string;
            /** @description The neighborhood, ward, or district. Smaller than `admin_area_level_3` or `sub_locality`. Value is:<ul><li>The postal sorting code for Guernsey and many French territories, such as French Guiana.</li><li>The fine-grained administrative levels in China.</li></ul> */
            admin_area_4?: string;
            /** @description A sub-locality, suburb, neighborhood, or district. Smaller than `admin_area_level_2`. Value is:<ul><li>Brazil. Suburb, bairro, or neighborhood.</li><li>India. Sub-locality or district. Street name information is not always available but a sub-locality or district can be a very small area.</li></ul> */
            admin_area_3?: string;
            /** @description A city, town, or village. Smaller than `admin_area_level_1`. */
            admin_area_2?: string;
            /** @description The highest level sub-division in a country, which is usually a province, state, or ISO-3166-2 subdivision. Format for postal delivery. For example, `CA` and not `California`. Value, by country, is:<ul><li>UK. A county.</li><li>US. A state.</li><li>Canada. A province.</li><li>Japan. A prefecture.</li><li>Switzerland. A kanton.</li></ul> */
            admin_area_1?: string;
            /** @description The postal code, which is the zip code or equivalent. Typically required for countries with a postal code or an equivalent. See [postal code](https://en.wikipedia.org/wiki/Postal_code). */
            postal_code?: string;
            country_code: components["schemas"]["country_code"];
            /**
             * Address Details
             * @description The non-portable additional address details that are sometimes needed for compliance, risk, or other scenarios where fine-grain address information might be needed. Not portable with common third party and open source. Redundant with core fields.<br/>For example, `address_portable.address_line_1` is usually a combination of `address_details.street_number`, `street_name`, and `street_type`.
             */
            address_details?: {
                /** @description The street number. */
                street_number?: string;
                /** @description The street name. Just `Drury` in `Drury Lane`. */
                street_name?: string;
                /** @description The street type. For example, avenue, boulevard, road, or expressway. */
                street_type?: string;
                /** @description The delivery service. Post office box, bag number, or post office name. */
                delivery_service?: string;
                /** @description A named locations that represents the premise. Usually a building name or number or collection of buildings with a common name or number. For example, <code>Craven House</code>. */
                building_name?: string;
                /** @description The first-order entity below a named building or location that represents the sub-premises. Usually a single building within a collection of buildings with a common name. Can be a flat, story, floor, room, or apartment. */
                sub_building?: string;
            };
        };
        /**
         * Shipping Details
         * @description The shipping details.
         */
        shipping_detail: {
            /** @description The name of the person to whom to ship the items. Supports only the `full_name` property. */
            name?: components["schemas"]["name"];
            /**
             * @description The method by which the payer wants to get their items from the payee e.g shipping, in-person pickup. Either type or options but not both may be present.
             * @enum {string}
             */
            type?: "SHIPPING" | "PICKUP_IN_PERSON";
            /** @description The address of the person to whom to ship the items. Supports only the `address_line_1`, `address_line_2`, `admin_area_1`, `admin_area_2`, `postal_code`, and `country_code` properties. */
            address?: components["schemas"]["address_portable"];
        };
        /**
         * Vaulted Digital Wallet Common Attributes
         * @description Resource consolidating common request and response attributes for vaulting a Digital Wallet.
         */
        wallet_base: {
            /** @description The description displayed to the consumer on the approval flow for a digital wallet, as well as on the merchant view of the payment token management experience. exp: PayPal.com. */
            description?: string;
            /** @description The shipping address for the Payer. */
            shipping?: components["schemas"]["shipping_detail"];
            /**
             * @description Create multiple payment tokens for the same payer, merchant/platform combination. Use this when the customer has not logged in at merchant/platform. The payment token thus generated, can then also be used to create the customer account at merchant/platform. Use this also when multiple payment tokens are required for the same payer, different customer at merchant/platform. This helps to identify customers distinctly even though they may share the same PayPal account. This only applies to PayPal payment source.
             * @default false
             */
            permit_multiple_payment_tokens: boolean;
            /** @description The usage type associated with a digital wallet payment token. */
            usage_type?: string;
            /** @description The customer type associated with a digital wallet payment token. This is to indicate whether the customer acting on the merchant / platform is either a business or a consumer. */
            customer_type?: string;
        };
        /**
         * Format: merchant_common_email_address_v2
         * @description The internationalized email address.<blockquote><strong>Note:</strong> Up to 64 characters are allowed before and 255 characters are allowed after the <code>@</code> sign. However, the generally accepted maximum length for an email address is 254 characters. The pattern verifies that an unquoted <code>@</code> sign exists.</blockquote>
         */
        email: string;
        /**
         * PayPal Account Identifier
         * Format: ppaas_payer_id_v3
         * @description The account identifier for a PayPal account.
         */
        account_id: string;
        /**
         * Payer Base
         * @description The customer who approves and pays for the order. The customer is also known as the payer.
         */
        payer_base: {
            /** @description The email address of the payer. */
            email_address?: components["schemas"]["email"];
            /** @description The PayPal-assigned ID for the payer. */
            readonly payer_id?: components["schemas"]["account_id"];
        };
        /**
         * Phone Type
         * @description The phone type.
         * @enum {string}
         */
        phone_type: "FAX" | "HOME" | "MOBILE" | "OTHER" | "PAGER";
        /**
         * Phone
         * @description The phone number, in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en).
         */
        phone: {
            /** @description The country calling code (CC), in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en). The combined length of the CC and the national number must not be greater than 15 digits. The national number consists of a national destination code (NDC) and subscriber number (SN). */
            country_code: string;
            /** @description The national number, in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en). The combined length of the country calling code (CC) and the national number must not be greater than 15 digits. The national number consists of a national destination code (NDC) and subscriber number (SN). */
            national_number: string;
            /** @description The extension number. */
            extension_number?: string;
        };
        /**
         * Phone With Type
         * @description The phone information.
         */
        phone_with_type: {
            phone_type?: components["schemas"]["phone_type"];
            /** @description The phone number, in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en). Supports only the `national_number` property. */
            phone_number: components["schemas"]["phone"];
        };
        /**
         * Format: ppaas_date_notime_v2
         * @description The stand-alone date, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). To represent special legal values, such as a date of birth, you should use dates with no associated time or time-zone data. Whenever possible, use the standard `date_time` type. This regular expression does not validate all dates. For example, February 31 is valid and nothing is known about leap years.
         */
        date_no_time: string;
        /**
         * Tax Information
         * @description The tax ID of the customer. The customer is also known as the payer. Both `tax_id` and `tax_id_type` are required.
         */
        tax_info: {
            /** @description The customer's tax ID value. */
            tax_id: string;
            /**
             * @description The customer's tax ID type.
             * @enum {string}
             */
            tax_id_type: "BR_CPF" | "BR_CNPJ";
        };
        /**
         * Customer
         * Format: payer_v1
         * @description The customer who approves and pays for the order. The customer is also known as the payer.
         */
        payer: components["schemas"]["payer_base"] & {
            /** @description The name of the payer. Supports only the `given_name` and `surname` properties. */
            name?: components["schemas"]["name"];
            /** @description The phone number of the customer. Available only when you enable the **Contact Telephone Number** option in the <a href="https://www.paypal.com/cgi-bin/customerprofileweb?cmd=_profile-website-payments">**Profile & Settings**</a> for the merchant's PayPal account. The `phone.phone_number` supports only `national_number`. */
            phone?: components["schemas"]["phone_with_type"];
            /** @description The birth date of the payer in `YYYY-MM-DD` format. */
            birth_date?: components["schemas"]["date_no_time"];
            /** @description The tax information of the payer. Required only for Brazilian payer's. Both `tax_id` and `tax_id_type` are required. */
            tax_info?: components["schemas"]["tax_info"];
            /** @description The address of the payer. Supports only the `address_line_1`, `address_line_2`, `admin_area_1`, `admin_area_2`, `postal_code`, and `country_code` properties. Also referred to as the billing address of the customer. */
            address?: components["schemas"]["address_portable"];
        };
        /**
         * PayPal Wallet Response
         * @description Full representation of a PayPal Payment Token.
         */
        paypal_wallet_response: components["schemas"]["wallet_base"] & components["schemas"]["payer"] & {
            /** @description The account identifier for a PayPal account. */
            readonly account_id?: components["schemas"]["account_id"];
            /** @description The phone number, in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en). */
            readonly phone_number?: components["schemas"]["phone"];
        };
        /**
         * Venmo Response
         * @description Full representation of a Venmo Payment Token.
         */
        venmo_response: components["schemas"]["wallet_base"] & components["schemas"]["payer"] & {
            /** @description The Venmo username, as chosen by the user. */
            user_name?: string;
        };
        /** @description The identifier of the instrument. */
        instrument_id: string;
        /**
         * Card Type
         * @description Type of card. i.e Credit, Debit and so on.
         * @enum {string}
         */
        card_type: "CREDIT" | "DEBIT" | "PREPAID" | "STORE" | "UNKNOWN";
        /**
         * Card
         * @description The payment card to use to fund a payment. Can be a credit or debit card.
         */
        card: {
            /** @description The PayPal-generated ID for the card. */
            readonly id?: components["schemas"]["instrument_id"];
            /** @description The card holder's name as it appears on the card. */
            name?: string;
            /** @description The primary account number (PAN) for the payment card. */
            number?: string;
            /** @description The card expiration year and month, in [Internet date format](https://tools.ietf.org/html/rfc3339#section-5.6). */
            expiry?: components["schemas"]["date_year_month"];
            /** @description The three- or four-digit security code of the card. Also known as the CVV, CVC, CVN, CVE, or CID. This parameter cannot be present in the request when `payment_initiator=MERCHANT`. */
            security_code?: string;
            /** @description The last digits of the payment card. */
            readonly last_digits?: string;
            /**
             * @deprecated
             * @description The card brand or network. Typically used in the response.
             */
            readonly card_type?: components["schemas"]["card_brand"];
            /** @description The payment card type. */
            type?: components["schemas"]["card_type"];
            /** @description The card brand or network. Typically used in the response. */
            brand?: components["schemas"]["card_brand"];
            /** @description The billing address for this card. Supports only the `address_line_1`, `address_line_2`, `admin_area_1`, `admin_area_2`, `postal_code`, and `country_code` properties. */
            billing_address?: components["schemas"]["address_portable"];
        };
        /**
         * Apple Pay Card
         * @description The payment card to be used to fund a payment. Can be a credit or debit card.
         */
        apple_pay_card: components["schemas"]["card"];
        /**
         * Apple Pay Response
         * @description A resource representing a response for Apple Pay.
         */
        apple_pay_payment_token_response: {
            /** @description Card data for the card linked to the apple pay token. */
            card?: components["schemas"]["apple_pay_card"];
        };
        ach_debit_response: unknown;
        /**
         * @description The ach debit verification status.
         * @default NOT_VERIFIED
         */
        ach_debit_verification_status: string;
        /**
         * ACH Debit Response
         * @description A Resource representing a response of vaulted a ACH Debit Account.
         */
        "ach_debit_response-2": components["schemas"]["ach_debit_response"] & {
            /** @description ACH Debit Verification Status */
            verification_status?: components["schemas"]["ach_debit_verification_status"];
        };
        /**
         * Bank Response
         * @description Full representation of a Bank Payment Token.
         */
        bank_response: {
            /** @description ACH Debit Response. */
            ach_debit?: components["schemas"]["ach_debit_response-2"];
        };
        /**
         * Link Description
         * @description The request-related [HATEOAS link](/api/rest/responses/#hateoas-links) information.
         */
        link_description: {
            /** @description The complete target URL. To make the related call, combine the method with this [URI Template-formatted](https://tools.ietf.org/html/rfc6570) link. For pre-processing, include the `$`, `(`, and `)` characters. The `href` is the key HATEOAS component that links a completed call with a subsequent call. */
            href: string;
            /** @description The [link relation type](https://tools.ietf.org/html/rfc5988#section-4), which serves as an ID for a link that unambiguously describes the semantics of the link. See [Link Relations](https://www.iana.org/assignments/link-relations/link-relations.xhtml). */
            rel: string;
            /**
             * @description The HTTP method required to make the related call.
             * @enum {string}
             */
            method?: "GET" | "POST" | "PUT" | "DELETE" | "HEAD" | "CONNECT" | "OPTIONS" | "PATCH";
        };
        /**
         * Payment Token Response
         * @description Full representation of a saved payment token.
         */
        payment_token_response: {
            /** @description The PayPal-generated ID for the vault token. */
            id?: components["schemas"]["vault_id"];
            /** @description Customer in merchant's or partner's system of records. */
            customer?: components["schemas"]["customer"];
            /** @description The vaulted payment method details. */
            payment_source?: {
                card?: components["schemas"]["card_response"];
                paypal?: components["schemas"]["paypal_wallet_response"];
                venmo?: components["schemas"]["venmo_response"];
                apple_pay?: components["schemas"]["apple_pay_payment_token_response"];
                bank?: components["schemas"]["bank_response"];
            };
            /** @description An array of related [HATEOAS links](/api/rest/responses/#hateoas). */
            readonly links?: components["schemas"]["link_description"][];
        };
        /**
         * Vault of a customer
         * @description Collection of payment tokens saved for a given customer.
         */
        customer_vault_payment_tokens_response: {
            /** @description Total number of items. */
            total_items?: number;
            /** @description Total number of pages. */
            total_pages?: number;
            customer?: components["schemas"]["customer"];
            payment_tokens?: components["schemas"]["payment_token_response"][];
            /** @description An array of related [HATEOAS links](/api/rest/responses/#hateoas). */
            readonly links?: components["schemas"]["link_description"][];
        };
        /**
         * Error Details
         * @description The error details. Required for client-side `4XX` errors.
         */
        "error_details-2": {
            /** @description The field that caused the error. If this field is in the body, set this value to the field's JSON pointer value. Required for client-side errors. */
            field?: string;
            /** @description The value of the field that caused the error. */
            value?: string;
            /**
             * @description The location of the field that caused the error. Value is `body`, `path`, or `query`.
             * @default body
             */
            location: string;
            /** @description The unique, fine-grained application-level error code. */
            issue: string;
            /** @description The human-readable description for an issue. The description can change over the lifetime of an API, so clients must not depend on this value. */
            description?: string;
        };
        /**
         * Error
         * @description The error details.
         */
        error: {
            /** @description The human-readable, unique name of the error. */
            name: string;
            /** @description The message that describes the error. */
            message: string;
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id: string;
            /** @description The information link, or URI, that shows detailed information about this error for the developer. */
            readonly information_link?: string;
            /** @description An array of additional details about the error. */
            details?: components["schemas"]["error_details-2"][];
            /** @description An array of request-related [HATEOAS links](/api/rest/responses/#hateoas-links). */
            readonly links?: components["schemas"]["link_description"][];
        };
        /**
         * Card Verification Method
         * @description The verification method of the card.
         */
        card_verification_method: string;
        /**
         * Format: ppaas_common_language_v3
         * @description The [language tag](https://tools.ietf.org/html/bcp47#section-2) for the language in which to localize the error-related strings, such as messages, issues, and suggested actions. The tag is made up of the [ISO 639-2 language code](https://www.loc.gov/standards/iso639-2/php/code_list.php), the optional [ISO-15924 script tag](https://www.unicode.org/iso15924/codelists.html), and the [ISO-3166 alpha-2 country code](/api/rest/reference/country-codes/) or [M49 region code](https://unstats.un.org/unsd/methodology/m49/).
         */
        language: string;
        /**
         * Vault Instruction
         * @description Vault Instruction on action to be performed after a successful payer approval.
         * @default ON_CREATE_PAYMENT_TOKENS
         */
        vault_instruction: string;
        /**
         * Experience Context
         * @description Customizes the Vault creation flow experience for your customers.
         */
        experience_context: {
            /** @description The label that overrides the business name in the PayPal account on the PayPal site. The pattern is defined by an external party and supports Unicode. */
            brand_name?: string;
            /** @description The BCP 47-formatted locale of pages that the PayPal vaulting experience shows. PayPal supports a five-character code. For example, `DA-DK`, `HE-IL`, `ID-ID`, `JA-JP`, `NO-NO`, `PT-BR`, `RU-RU`, `SV-SE`, `TH-TH`, `ZH-CN`, `ZH-HK`, or `ZH-TW`. */
            locale?: components["schemas"]["language"];
            /**
             * Format: uri
             * @description The URL where the customer is redirected after customer approves leaves the flow. It is a required field for contingency flows like PayPal wallet, 3DS.
             */
            return_url?: string;
            /**
             * Format: uri
             * @description The URL where the customer is redirected after customer cancels or leaves the flow. It is a required field for contingency flows like PayPal wallet, 3DS.
             */
            cancel_url?: string;
            /**
             * @description The shipping preference. This only applies to PayPal payment source.
             * @default GET_FROM_FILE
             */
            shipping_preference: string;
            /** @description Vault Instruction on action to be performed after a successful payer approval. */
            vault_instruction?: components["schemas"]["vault_instruction"];
        };
        /**
         * Card Request
         * @description A Resource representing a request to vault a Card.
         */
        card_request: components["schemas"]["card"] & {
            /** @description The API caller can opt in to verify the payment token through PayPal offered verification services (e.g. Smart Dollar Auth, 3DS). */
            verification_method?: components["schemas"]["card_verification_method"];
            experience_context?: components["schemas"]["experience_context"];
        };
        token_attributes: unknown;
        /**
         * Token Request
         * @description The Tokenized Payment Source representing a Request to Vault a Token.
         */
        token_id_request: {
            /** @description The PayPal-generated ID for the token. */
            id: string;
            /**
             * @description The tokenization method that generated the ID.
             * @enum {string}
             */
            type: "BILLING_AGREEMENT";
            /** @description The auxiliary details of the token. */
            attributes?: components["schemas"]["token_attributes"];
        };
        metadata: unknown;
        /**
         * Payment Token Request
         * @description Payment Token Request where the `source` defines the type of instrument to be stored.
         */
        payment_token_request: {
            /** @description Customer in merchant's or partner's system of records. */
            customer?: components["schemas"]["customer"];
            /**
             * Payment source request
             * @description The payment method to vault with the instrument details.
             */
            payment_source: {
                card?: components["schemas"]["card_request"];
                token?: components["schemas"]["token_id_request"];
            };
            metadata?: components["schemas"]["metadata"];
        };
        /**
         * PayPal Wallet Request
         * @description A resource representing a request to vault PayPal Wallet.
         */
        paypal_wallet_request: components["schemas"]["wallet_base"] & {
            experience_context?: components["schemas"]["experience_context"];
        };
        /**
         * Venmo Request
         * @description A resource representing a request to vault Venmo.
         */
        venmo_request: components["schemas"]["wallet_base"] & {
            experience_context?: components["schemas"]["experience_context"];
        };
        /**
         * Setup Token
         * @description Setup Token Request where the `source` defines the type of instrument to be stored.
         */
        setup_token_request: {
            /** @description Customer in merchant's or partner's system of records. */
            customer?: components["schemas"]["customer"];
            /** @description The payment method to vault with the instrument details. */
            payment_source: {
                card?: components["schemas"]["card_request"];
                paypal?: components["schemas"]["paypal_wallet_request"];
                venmo?: components["schemas"]["venmo_request"];
                token?: components["schemas"]["token_id_request"];
            };
            metadata?: components["schemas"]["metadata"];
        };
        /** @description Ordinal number for sorting. */
        ordinal: number;
        /**
         * Payment Token Status
         * @description The status of the payment token.
         * @default CREATED
         */
        payment_token_status: string;
        /**
         * Minimal Setup Token
         * @description Minimal representation of a cached setup token.
         */
        setup_token_response: {
            /** @description The PayPal-generated ID for the vault token. */
            id?: components["schemas"]["vault_id"];
            /** @description The ordinal number of customers' payment source for sorting. */
            ordinal?: components["schemas"]["ordinal"];
            /** @description Customer in merchant's or partner's system of records. */
            customer?: components["schemas"]["customer"];
            /** @description The status of the payment token. */
            status?: components["schemas"]["payment_token_status"];
            /** @description The setup payment method details. */
            payment_source?: {
                card?: components["schemas"]["card_response"];
                paypal?: components["schemas"]["paypal_wallet_response"];
                venmo?: components["schemas"]["venmo_response"];
            };
            /** @description An array of related [HATEOAS links](/api/rest/responses/#hateoas). */
            readonly links?: components["schemas"]["link_description"][];
        };
    };
    responses: never;
    parameters: {
        /** @description The server stores keys for 3 hours. */
        paypal_request_id: string;
        /** @description A unique identifier representing a specific customer in merchant's/partner's system or records. */
        customer_id: string;
        /** @description A non-negative, non-zero integer indicating the maximum number of results to return at one time. */
        page_size: number;
        /** @description A non-negative, non-zero integer representing the page of the results. */
        page: number;
        /** @description A boolean indicating total number of items (total_items) and pages (total_pages) are expected to be returned in the response. */
        total_required: boolean;
        /** @description ID of the setup token. */
        id: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "customer.payment-tokens.get": {
        parameters: {
            query: {
                /** @description A unique identifier representing a specific customer in merchant's/partner's system or records. */
                customer_id: components["parameters"]["customer_id"];
                /** @description A non-negative, non-zero integer indicating the maximum number of results to return at one time. */
                page_size?: components["parameters"]["page_size"];
                /** @description A non-negative, non-zero integer representing the page of the results. */
                page?: components["parameters"]["page"];
                /** @description A boolean indicating total number of items (total_items) and pages (total_pages) are expected to be returned in the response. */
                total_required?: components["parameters"]["total_required"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful execution. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["customer_vault_payment_tokens_response"];
                };
            };
            /** @description Request is not well-formed, syntactically incorrect, or violates schema. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Authorization failed due to insufficient permissions. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description An internal server error has occurred. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "payment-tokens.create": {
        parameters: {
            query?: never;
            header: {
                /** @description The server stores keys for 3 hours. */
                "PayPal-Request-Id": components["parameters"]["paypal_request_id"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description Payment Token creation with a financial instrument and an optional customer_id. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["payment_token_request"];
            };
        };
        responses: {
            /** @description Idempotent response for a successful creation of payment token. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["payment_token_response"];
                };
            };
            /** @description A successful creation of payment token. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["payment_token_response"];
                };
            };
            /** @description Request is not well-formed, syntactically incorrect, or violates schema. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Authorization failed due to insufficient permissions. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Request contains reference to resources that do not exist. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description The requested action could not be performed, semantically incorrect, or failed business validation. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description An internal server error has occurred. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "payment-tokens.get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the setup token. */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful execution. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["payment_token_response"];
                };
            };
            /** @description Authorization failed due to insufficient permissions. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description The specified resource does not exist. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description The requested action could not be performed, semantically incorrect, or failed business validation. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description An internal server error has occurred. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "payment-tokens.delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the setup token. */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The server has successfully executed the method, but there is no entity body to return. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request is not well-formed, syntactically incorrect, or violates schema. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Authorization failed due to insufficient permissions. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description An internal server error has occurred. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "setup-tokens.create": {
        parameters: {
            query?: never;
            header: {
                /** @description The server stores keys for 3 hours. */
                "PayPal-Request-Id": components["parameters"]["paypal_request_id"];
            };
            path?: never;
            cookie?: never;
        };
        /** @description Setup Token creation with a instrument type optional financial instrument details and customer_id. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["setup_token_request"];
            };
        };
        responses: {
            /** @description Idempotent response for a successful creation of setup token. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["setup_token_response"];
                };
            };
            /** @description A successful creation of setup token. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["setup_token_response"];
                };
            };
            /** @description Request is not well-formed, syntactically incorrect, or violates schema. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Authorization failed due to insufficient permissions. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description The requested action could not be performed, semantically incorrect, or failed business validation. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description An internal server error has occurred. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "setup-tokens.get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the setup token. */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Found requested setup-token, returned a payment method associated with the token. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["setup_token_response"];
                };
            };
            /** @description Authorization failed due to insufficient permissions. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description The specified resource does not exist. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description The requested action could not be performed, semantically incorrect, or failed business validation. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description An internal server error has occurred. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
}
