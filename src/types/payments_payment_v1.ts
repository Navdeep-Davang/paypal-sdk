/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/payments/payment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List payments
         * @description <blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href="/docs/checkout/integrate/">PayPal Checkout Basic Integration</a>.</blockquote>Lists payments that are completed. Payments that you just created with the <a href="/docs/api/payments/v1/#payment_create">create payment</a> call do not appear in the list.<br/><br/>The list shows the payments that are made to the merchant who makes the call. To filter the payments that appear in the response, you can specify one or more optional query and pagination parameters. See <a href="/docs/api/reference/api-requests/#query-parameters">Filtering and pagination</a>.
         */
        get: operations["payment.list"];
        put?: never;
        /**
         * Create payment
         * @description <blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href="/docs/checkout/integrate/">PayPal Checkout Basic Integration</a>.</blockquote>Creates a sale, an authorized payment to be captured later, or an order. To create a sale, authorization, or order, include the payment details in the JSON request body. Set the <code>intent</code> to <code>sale</code>, <code>authorize</code>, or <code>order</code>. <blockquote><strong>Note: </strong>TPP Clients (Third Party Providers in the context of PSD2 regulation) are restricted from using <code>authorize</code> and <code>order</code> intents.</blockquote> Include payer, transaction details, and, for PayPal payments only, redirect URLs. The combination of the <code>payment_method</code> and <code>funding_instrument</code> determines the type of payment that is created. For more information, see <a href="/docs/integration/direct/payments/">Payments REST API</a>.
         */
        post: operations["payment.create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payments/payment/{payment_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show payment details
         * @description <blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href="/docs/checkout/integrate/">PayPal Checkout Basic Integration</a>.</blockquote>Shows details for a payment, by ID, that has yet to complete. For example, shows details for a payment that was created, approved, or failed.
         */
        get: operations["payment.get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Partially update payment
         * @description <blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href="/docs/checkout/integrate/">PayPal Checkout Basic Integration</a>.</blockquote>Partially updates a payment, by ID. You can update the amount, shipping address, invoice ID, and custom data. You cannot update a payment after the payment executes. <blockquote><strong>Note: </strong>TPP Clients (Third Party Providers in the context of PSD2 regulation) are restricted from patching amount once authorized.</blockquote>
         */
        patch: operations["payment.update"];
        trace?: never;
    };
    "/v1/payments/payment/{payment_id}/execute": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Execute approved PayPal payment
         * @description <blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href="/docs/checkout/integrate/">PayPal Checkout Basic Integration</a>.</blockquote>Executes a PayPal payment that the customer has approved. You can optionally update one or more transactions when you execute the payment.<blockquote><strong>Important:</strong> This call works only after a customer has approved the payment. For more information, learn about <a href="/docs/integration/direct/payments/paypal-payments/">PayPal payments</a>.</blockquote>
         */
        post: operations["payment.execute"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payments/sale/{sale_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show sale details
         * @description <blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href="/docs/checkout/integrate/">PayPal Checkout Basic Integration</a>.</blockquote>Shows details for a sale, by ID. Returns only sales that were created through the REST API.
         */
        get: operations["sale.get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payments/sale/{sale_id}/refund": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refund sale
         * @description <blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href="/docs/checkout/integrate/">PayPal Checkout Basic Integration</a>.</blockquote>Refunds a sale, by ID. For a full refund, do not include the <code>amount</code> object in the JSON request body. For a partial refund, include an <code>amount</code> object in the JSON request body.
         */
        post: operations["sale.refund"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payments/authorization/{authorization_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show authorization details
         * @description <blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href="/docs/checkout/integrate/">PayPal Checkout Basic Integration</a>.</blockquote>Shows details for an authorization, by ID.
         */
        get: operations["authorization.get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payments/authorization/{authorization_id}/capture": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Capture authorization
         * @description <blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href="/docs/checkout/integrate/">PayPal Checkout Basic Integration</a>.</blockquote>Captures and processes an authorization, by ID. The original payment call must specify an intent of <code>authorize</code>.
         */
        post: operations["authorization.capture"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payments/authorization/{authorization_id}/void": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Void authorization
         * @description <blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href="/docs/checkout/integrate/">PayPal Checkout Basic Integration</a>.</blockquote>Voids, or cancels, an authorization, by ID. You cannot void a fully captured authorization.
         */
        post: operations["authorization.void"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payments/authorization/{authorization_id}/reauthorize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Re-authorize payment
         * @description <blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href="/docs/checkout/integrate/">PayPal Checkout Basic Integration</a>.</blockquote>Re-authorizes a PayPal account payment, by authorization ID. To ensure that funds are still available, re-authorize a payment after the initial three-day honor period. Supports only the <code>amount</code> request parameter. You can re-authorize a payment only once from four to 29 days after three-day honor period for the original authorization expires. If 30 days have passed from the original authorization, you must create a new authorization instead. A re-authorized payment itself has a new three-day honor period. You can re-authorize a transaction once for up to 115% of the originally authorized amount, not to exceed an increase of $75 USD.
         */
        post: operations["authorization.reauthorize"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payments/orders/{order_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show order details
         * @description <blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href="/docs/checkout/integrate/">PayPal Checkout Basic Integration</a>.</blockquote>Shows details for an order, by ID.
         */
        get: operations["orders.get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payments/orders/{order_id}/capture": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Capture order
         * @description <blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href="/docs/checkout/integrate/">PayPal Checkout Basic Integration</a>.</blockquote>Captures a payment for an order, by ID. To use this call, the original payment call must specify an <code>order</code> intent. In the JSON request body, include the payment amount and indicate whether this capture is the final capture for the authorization.
         */
        post: operations["orders.capture"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payments/orders/{order_id}/do-void": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Void order
         * @description <blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href="/docs/checkout/integrate/">PayPal Checkout Basic Integration</a>.</blockquote>Voids, or cancels, an order, by ID. You can only void orders that are either in the <code>PENDING</code> or <code>AUTHORIZED</code> states or those in the <code>CAPTURED</code> state that are not fully captured.
         */
        post: operations["orders.void"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payments/orders/{order_id}/authorize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Authorize order
         * @description <blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href="/docs/checkout/integrate/">PayPal Checkout Basic Integration</a>.</blockquote>Authorizes an order, by ID. In the JSON request body, include an <code>amount</code> object.
         */
        post: operations["orders.authorize"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payments/capture/{capture_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show captured payment details
         * @description <blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href="/docs/checkout/integrate/">PayPal Checkout Basic Integration</a>.</blockquote>Shows details for a captured payment, by ID.
         */
        get: operations["capture.get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payments/capture/{capture_id}/refund": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refund captured payment
         * @description <blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href="/docs/checkout/integrate/">PayPal Checkout Basic Integration</a>.</blockquote>Refunds a captured payment, by ID. In the JSON request body, include an <code>amount</code> object.
         */
        post: operations["capture.refund"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payments/refund/{refund_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show refund details
         * @description <blockquote><strong>Deprecation notice:</strong> The <code>/v1/payments</code> endpoint is deprecated. Use the <code>/v2/payments</code> endpoint instead. For details, see <a href="/docs/checkout/integrate/">PayPal Checkout Basic Integration</a>.</blockquote>Shows details for a refund, by ID.
         */
        get: operations["refund.get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * Error Details
         * @description The error details. Required for client-side `4XX` errors.
         */
        error_details: {
            /** @description The field that caused the error. If this field is in the body, set this value to the field's JSON pointer value. Required for client-side errors. */
            field?: string;
            /** @description The value of the field that caused the error. */
            value?: string;
            location?: components["schemas"]["error_location"];
            /** @description The unique, fine-grained application-level error code. */
            issue: string;
            /** @description The human-readable description for an issue. The description can change over the lifetime of an API, so clients must not depend on this value. */
            description?: string;
        };
        /**
         * @description The location of the field that caused the error. Value is `body`, `path`, or `query`.
         * @default body
         * @enum {string}
         */
        error_location: "body" | "path" | "query";
        /**
         * Link Description
         * @description The request-related [HATEOAS link](/api/rest/responses/#hateoas-links) information.
         */
        error_link_description: {
            /** @description The complete target URL. To make the related call, combine the method with this [URI Template-formatted](https://tools.ietf.org/html/rfc6570) link. For pre-processing, include the `$`, `(`, and `)` characters. The `href` is the key HATEOAS component that links a completed call with a subsequent call. */
            href: string;
            /** @description The [link relation type](https://tools.ietf.org/html/rfc5988#section-4), which serves as an ID for a link that unambiguously describes the semantics of the link. See [Link Relations](https://www.iana.org/assignments/link-relations/link-relations.xhtml). */
            rel: string;
            /**
             * @description The HTTP method required to make the related call.
             * @enum {string}
             */
            method?: "GET" | "POST" | "PUT" | "DELETE" | "PATCH";
        };
        /**
         * Bad Request Error
         * @description Request is not well-formed, syntactically incorrect, or violates schema.
         */
        error_400: {
            /** @enum {string} */
            name?: "INVALID_REQUEST";
            /** @enum {string} */
            message?: "Request is not well-formed, syntactically incorrect, or violates schema.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Unauthorized Error
         * @description Authentication failed due to missing Authorization header, or invalid authentication credentials.
         */
        error_401: {
            /** @enum {string} */
            name?: "AUTHENTICATION_FAILURE";
            /** @enum {string} */
            message?: "Authentication failed due to missing authorization header, or invalid authentication credentials.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Not Authorized Error
         * @description The client is not authorized to access this resource, although it may have valid credentials.
         */
        error_403: {
            /** @enum {string} */
            name?: "NOT_AUTHORIZED";
            /** @enum {string} */
            message?: "Authorization failed due to insufficient permissions.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Not found Error
         * @description The server has not found anything matching the request URI. This either means that the URI is incorrect or the resource is not available.
         */
        error_404: {
            /** @enum {string} */
            name?: "RESOURCE_NOT_FOUND";
            /** @enum {string} */
            message?: "The specified resource does not exist.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Resource Conflict Error
         * @description The server has detected a conflict while processing this request.
         */
        error_409: {
            /** @enum {string} */
            name?: "RESOURCE_CONFLICT";
            /** @enum {string} */
            message?: "The server has detected a conflict while processing this request.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Unsupported Media Type Error
         * @description The server does not support the request payload's media type.
         */
        error_415: {
            /** @enum {string} */
            name?: "UNSUPPORTED_MEDIA_TYPE";
            /** @enum {string} */
            message?: "The server does not support the request payload's media type.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Unprocessable Entity Error
         * @description The requested action cannot be performed and may require interaction with APIs or processes outside of the current request. This is distinct from a 500 response in that there are no systemic problems limiting the API from performing the request.
         */
        error_422: {
            /** @enum {string} */
            name?: "UNPROCESSABLE_ENTITY";
            /** @enum {string} */
            message?: "The requested action could not be performed, semantically incorrect, or failed business validation.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Internal Server Error
         * @description This is either a system or application error, and generally indicates that although the client appeared to provide a correct request, something unexpected has gone wrong on the server.
         * @example {
         *       "name": "INTERNAL_SERVER_ERROR",
         *       "message": "An internal server error occurred.",
         *       "debug_id": "90957fca61718",
         *       "links": [
         *         {
         *           "href": "https://developer.paypal.com/api/orders/v2/#error-INTERNAL_SERVER_ERROR",
         *           "rel": "information_link"
         *         }
         *       ]
         *     }
         */
        error_500: {
            /** @enum {string} */
            name?: "INTERNAL_SERVER_ERROR";
            /** @enum {string} */
            message?: "An internal server error occurred.";
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Service Unavailable Error
         * @description The server is temporarily unable to handle the request, for example, because of planned maintenance or downtime.
         * @example {
         *       "name": "SERVICE_UNAVAILABLE",
         *       "message": "Service Unavailable.",
         *       "debug_id": "90957fca61718",
         *       "information_link": "https://developer.paypal.com/docs/api/orders/v2/#error-SERVICE_UNAVAILABLE"
         *     }
         */
        error_503: {
            /** @enum {string} */
            name?: "SERVICE_UNAVAILABLE";
            /** @enum {string} */
            message?: "Service Unavailable.";
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Error Details
         * @description The error details. Required for client-side `4XX` errors.
         */
        "error_details-2": {
            /** @description The field that caused the error. If this field is in the body, set this value to the field's JSON pointer value. Required for client-side errors. */
            field?: string;
            /** @description The value of the field that caused the error. */
            value?: string;
            /**
             * @description The location of the field that caused the error. Value is `body`, `path`, or `query`.
             * @default body
             */
            location: string;
            /** @description The unique, fine-grained application-level error code. */
            issue: string;
            /** @description The human-readable description for an issue. The description can change over the lifetime of an API, so clients must not depend on this value. */
            description?: string;
        };
        /**
         * Link Description
         * @description The request-related [HATEOAS link](/docs/api/reference/api-responses/#hateoas-links) information.
         */
        link_description: {
            /** @description The complete target URL. To make the related call, combine the method with this [URI Template-formatted](https://tools.ietf.org/html/rfc6570) link. For pre-processing, include the `$`, `(`, and `)` characters. The `href` is the key HATEOAS component that links a completed call with a subsequent call. */
            href: string;
            /** @description The [link relation type](https://tools.ietf.org/html/rfc5988#section-4), which serves as an ID for a link that unambiguously describes the semantics of the link. See [Link Relations](https://www.iana.org/assignments/link-relations/link-relations.xhtml). */
            rel: string;
            /**
             * @description The HTTP method required to make the related call.
             * @enum {string}
             */
            method?: "GET" | "POST" | "PUT" | "DELETE" | "HEAD" | "CONNECT" | "OPTIONS" | "PATCH";
        };
        /**
         * Error
         * @description The error details.
         */
        error: {
            /** @description The human-readable, unique name of the error. */
            name: string;
            /** @description The message that describes the error. */
            message: string;
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id: string;
            /** @description The information link, or URI, that shows detailed information about this error for the developer. */
            readonly information_link?: string;
            /** @description An array of additional details about the error. */
            details?: components["schemas"]["error_details-2"][];
            /** @description An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links). */
            readonly links?: components["schemas"]["link_description"][];
        };
        /**
         * Credit Card Token
         * @description The tokenized credit card details. You can use this instrument to fund a payment.
         */
        credit_card_token: {
            /** @description The ID of credit card that is stored in the PayPal vault. */
            credit_card_id: string;
            /** @description Deprecated. A unique ID that you can assign and track when you store a credit card in the vault or use a vaulted credit card. This ID can help to avoid unintentional use or misuse of credit cards and can be any value, such as a UUID, user name, or email address. **Required** when you use a vaulted credit card and if a `payer_id` was originally provided when you vaulted the credit card. Use external_customer_id instead. */
            payer_id?: string;
            /** @description The externally-provided ID of the customer. */
            external_customer_id?: string;
            /** @description The last four digits of the stored credit card number. */
            readonly last4?: string;
            /** @description The credit card type. Value is `visa`, `mastercard`, `discover`, or `amex`. Do not use these lowercase values for display. */
            readonly type?: string;
            /** @description The expiration month with no leading zero. Value is from `1` to `12`. */
            readonly expire_month?: number;
            /** @description The four-digit expiration year. */
            readonly expire_year?: string;
        };
        /**
         * Funding Instrument
         * @description The funding instrument details. An instance of this schema is valid if and only if it validates against exactly one of these supported properties.
         */
        funding_instrument: {
            /** @description The tokenized credit card details. You can use this instrument to fund a payment. */
            credit_card_token?: components["schemas"]["credit_card_token"];
        };
        /**
         * Format: ppaas_common_country_code_v2
         * @description The [two-character ISO 3166-1 code](/docs/api/reference/country-codes/) that identifies the country or region.<blockquote><strong>Note:</strong> The country code for Great Britain is <code>GB</code> and not <code>UK</code> as used in the top-level domain names for that country. Use the `C2` country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.</blockquote>
         */
        country_code: string;
        /**
         * Address
         * @description The billing address or shipping address for a payment.
         */
        address: {
            /** @description The first line of the address. For example, number, street, and so on. */
            line1: string;
            /** @description The second line of the address. For example, suite or apartment number. */
            line2?: string;
            /** @description The city name. */
            city?: string;
            country_code: components["schemas"]["country_code"];
            /** @description The postal code, which is the zip code or equivalent. Typically required for countries with a postal code or an equivalent. See [postal code](https://en.wikipedia.org/wiki/Postal_code). */
            postal_code?: string;
            /** @description The [code](/docs/integration/direct/rest/state-codes/) for a US state or the equivalent for other countries. Required for transactions if the address is in one of these countries: [Argentina](/docs/integration/direct/rest/state-codes/#argentina), [Brazil](/docs/integration/direct/rest/state-codes/#brazil), [Canada](/docs/integration/direct/rest/state-codes/#canada), [China](/docs/integration/direct/rest/state-codes/#china), [India](/docs/integration/direct/rest/state-codes/#india), [Italy](/docs/integration/direct/rest/state-codes/#italy), [Japan](/docs/integration/direct/rest/state-codes/#japan), [Mexico](/docs/integration/direct/rest/state-codes/#mexico), [Thailand](/docs/integration/direct/rest/state-codes/#thailand), or [United States](/docs/integration/direct/rest/state-codes/#usa). */
            state?: string;
            /**
             * Format: phone
             * @description The phone number, in [E.123 format](https://www.itu.int/rec/T-REC-E.123-200102-I/en). Maximum length is 50 characters.
             */
            phone?: string;
            /**
             * @description The address normalization status. Returned only for payers from Brazil.
             * @enum {string}
             */
            readonly normalization_status?: "UNKNOWN" | "UNNORMALIZED_USER_PREFERRED" | "NORMALIZED" | "UNNORMALIZED";
            /** @description The type of address. For example, `HOME_OR_WORK`, `GIFT`, and so on. */
            type?: string;
        };
        /**
         * Shipping Address
         * @description The shipping address details.
         */
        shipping_address: components["schemas"]["address"] & {
            /** @description The name of the recipient at this address. */
            recipient_name?: string;
        };
        /**
         * Payer Information
         * @description The payer information.
         */
        payer_info: {
            /**
             * Format: email
             * @description The payer's email address. Maximum length is 127 characters.
             */
            email?: string;
            /** @description The payer's salutation. */
            readonly salutation?: string;
            /** @description The payer's first name. */
            readonly first_name?: string;
            /** @description The payer's middle name. */
            readonly middle_name?: string;
            /** @description The payer's last name. */
            readonly last_name?: string;
            /** @description The payer's suffix. */
            readonly suffix?: string;
            /** @description The PayPal-assigned encrypted payer ID. */
            readonly payer_id?: string;
            /**
             * Format: date-time
             * @description The birth date of the payer, in [Internet date format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, `1990-04-12`.
             */
            birth_date?: string;
            /** @description The payer's tax ID. Supported for the PayPal payment method only. */
            tax_id?: string;
            /**
             * @description The payer's tax ID type. Supported for the PayPal payment method only.
             * @enum {string}
             */
            tax_id_type?: "BR_CPF" | "BR_CNPJ";
            /** @description The payer's billing address. */
            billing_address?: components["schemas"]["address"];
            /** @description Deprecated. The shipping address. Use the shipping address for the purchase unit or at the root level of the checkout session. */
            readonly shipping_address?: components["schemas"]["shipping_address"];
        };
        /**
         * Payer
         * @description The payer. The payer funds the payment.
         */
        payer: {
            /**
             * @description The payment method.
             * @enum {string}
             */
            payment_method?: "credit_card" | "paypal" | "pay_upon_invoice" | "carrier" | "alternate_payment" | "bank";
            /**
             * @description The status of payer's PayPal account.
             * @enum {string}
             */
            readonly status?: "VERIFIED" | "UNVERIFIED";
            /** @description An array of a single funding instrument for the current payment. Valid only and required for the credit card payment method. The array must include either a `credit_card` or `credit_card_token` object. If the array contains more than one instrument, the payment is declined. */
            funding_instruments?: components["schemas"]["funding_instrument"][];
            payer_info?: components["schemas"]["payer_info"];
        };
        /**
         * Token
         * @description The tokenized payment source to fund a payment.
         */
        token: {
            /** @description The PayPal-generated ID for the token. */
            id: string;
            /**
             * @description The tokenization method that generated the ID.
             * @enum {string}
             */
            type: "BILLING_AGREEMENT";
        };
        /**
         * Payment Source
         * @description The payment source definition.
         */
        payment_source: {
            token?: components["schemas"]["token"];
        };
        /**
         * Payment pattern
         * @description Provides context (e.g. frequency of payment (Single, Recurring) along with whether (Customer is Present, Not Present) for the payment being processed. For Card and PayPal Vaulted/Billing Agreement transactions, this helps specify the appropriate indicators to the networks (e.g. Mastercard, Visa) which ensures compliance as well as ensure a better auth-rate. For bank processing, indicates to clearing house whether the transaction is recurring or not depending on the option chosen.
         * @enum {string}
         */
        payment_pattern: "CUSTOMER_PRESENT_ONETIME_PURCHASE" | "CUSTOMER_NOT_PRESENT_RECURRING" | "CUSTOMER_PRESENT_RECURRING_FIRST" | "CUSTOMER_PRESENT_ONETIME_PURCHASE_VAULTED" | "CUSTOMER_NOT_PRESENT_ONETIME_PURCHASE_VAULTED" | "MAIL_ORDER_TELEPHONE_ORDER";
        /**
         * Application Context
         * @description The application context. Set these properties to customize the payment flow experience for your customers.
         */
        application_context: {
            /** @description A label that overrides the business name in the merchant's PayPal account on the PayPal checkout pages. */
            brand_name?: string;
            /** @description The locale of pages that the PayPal payment experience displays. Please refer [here](/docs/api/reference/locale-codes/#localize-the-checkout-experience) for list of supported local codes.  Defaulted to en_US if not provided or invalid. */
            locale?: string;
            /** @description The type of landing page to show on the PayPal site for customer checkout. To use the non-PayPal account landing page, set to `Billing`. To use the PayPal account log in landing page, set to `Login`. */
            landing_page?: string;
            /**
             * @description The shipping preference.
             * @default GET_FROM_FILE
             * @enum {string}
             */
            shipping_preference: "NO_SHIPPING" | "GET_FROM_FILE" | "SET_PROVIDED_ADDRESS";
            /** @description The user action. Presents the customer with either the <strong>Continue</strong> or <strong>Pay Now</strong> checkout flow:<table><thead><tr valign="top" align="left"><th>Flow</th><th>Action</th><th>Description</th></tr></thead><tbody><tr valign="top" align="left"><td><strong>Pay Now</strong></td><td><code>user_action=commit</code></td><td>After the customer is redirected to the PayPal payment page, shows the <strong>Pay Now</strong> button.<br/><br/>Use this option when you know the final amount when checkout is initiated and you want to process the payment immediately when the customer clicks <strong>Pay Now</strong>.</td></tr><tr valign="top" align="left"><td><strong>Continue</strong></td><td> <code>user_action=continue</code></td><td>After the customer is redirected to the PayPal payment page, shows the <strong>Continue</strong> button.<br/><br/>Use this option when you do not know the final amount when you initiate the checkout flow and you want to redirect the customer to the merchant page without processing the payment.</td></tr></tbody></table> */
            user_action?: string;
            /** @description The preferred payment source for the payer. Currently supported only for PayPal Billing Agreements. If provided, checkout experience will have this payment source pre-selected for the payer. */
            preferred_payment_source?: components["schemas"]["payment_source"];
            payment_pattern?: components["schemas"]["payment_pattern"];
        };
        /**
         * Amount
         * @description The payment amount, with details.
         */
        amount: {
            /** @description The [three-character ISO-4217 currency code](/docs/integration/direct/rest/currency-codes/). PayPal does not support all currencies. */
            currency: string;
            /** @description The total amount charged to the payee by the payer. For refunds, represents the amount that the payee refunds to the original payer. Maximum length is 10 characters, which includes:<ul><li>Seven digits before the decimal point.</li><li>The decimal point.</li><li>Two digits after the decimal point.</li><li>For currencies like `JPY` do not support decimals.</li></ul> */
            total: string;
            /**
             * Payment Amount Details
             * @description The additional details about the payment amount.<blockquote><strong>Note:</strong> For an order authorization or capture, you cannot include the amount <code>details</code> object.</blockquote>
             */
            details?: {
                /** @description The subtotal amount for the items. If the request includes line items, this property is **required**. Maximum length is 10 characters, which includes:<ul><li>Seven digits before the decimal point.</li><li>The decimal point.</li><li>Two digits after the decimal point.</li></ul><blockquote><strong>Note:</strong> For an order authorization or capture, you cannot include the <code>subtotal</code> parameter.</blockquote> */
                subtotal?: string;
                /** @description The shipping fee. Maximum length is 10 characters, which includes:<ul><li>Seven digits before the decimal point.</li><li>The decimal point.</li><li>Two digits after the decimal point.</li></ul><blockquote><strong>Note:</strong> For an order authorization or capture, you cannot include the <code>shipping</code> parameter.</blockquote> */
                shipping?: string;
                /** @description The tax. Maximum length is 10 characters, which includes:<ul><li>Seven digits before the decimal point.</li><li>The decimal point.</li><li>Two digits after the decimal point.</li></ul><blockquote><strong>Note:</strong> For an order authorization or capture, you cannot include the <code>tax</code> parameter.</blockquote> */
                tax?: string;
                /** @description The handling fee. Maximum length is 10 characters, which includes:<ul><li>Seven digits before the decimal point.</li><li>The decimal point.</li><li>Two digits after the decimal point.</li></ul>Supported for the PayPal payment method only.<blockquote><strong>Note:</strong> For an order authorization or capture, you cannot include the <code>handling_fee</code> parameter.</blockquote> */
                handling_fee?: string;
                /** @description The shipping fee discount. Maximum length is 10 characters, which includes:<ul><li>Seven digits before the decimal point.</li><li>The decimal point.</li><li>Two digits after the decimal point.</li></ul>Supported for the PayPal payment method only.<blockquote><strong>Note:</strong> For an order authorization or capture, you cannot include the <code>shipping_discount</code> parameter.</blockquote> */
                shipping_discount?: string;
                /** @description The insurance fee. Maximum length is 10 characters, which includes:<ul><li>Seven digits before the decimal point.</li><li>The decimal point.</li><li>Two digits after the decimal point.</li></ul>Supported only for the PayPal payment method.<blockquote><strong>Note:</strong> For an order authorization or capture, you cannot include the <code>insurance</code> parameter.</blockquote> */
                insurance?: string;
                /**
                 * @deprecated
                 * @description The gift wrap fee. Maximum length is 10 characters, which includes:<ul><li>Seven digits before the decimal point.</li><li>The decimal point.</li><li>Two digits after the decimal point.</li></ul><blockquote><strong>Note:</strong> For an order authorization or capture, you cannot include the <code>gift_wrap</code> parameter.</blockquote>
                 */
                gift_wrap?: string;
            };
        };
        /**
         * Payee
         * @description The payee who receives the funds and fulfills the order.
         */
        payee: {
            /**
             * Format: email
             * @description The email address associated with the payee's PayPal account. For an intent of authorize or order, the email address must be associated with a confirmed PayPal business account. For an intent of sale, the email can either:<ul><li>Be associated with a confirmed PayPal personal or business account.</li><li>Not be associated with a PayPal account.</li></ul>
             */
            email?: string;
            /** @description The PayPal account ID for the payee. */
            merchant_id?: string;
        };
        /**
         * Format: ppaas_common_currency_code_v2
         * @description The [three-character ISO-4217 currency code](/docs/api/reference/currency-codes/) that identifies the currency.
         */
        currency_code: string;
        /**
         * Item
         * @description The item details.
         */
        item: {
            /** @description The stock keeping unit (SKU) for the item. */
            sku?: string;
            /** @description The item name. If this value is greater than the maximum allowed length, the API truncates the string. */
            name?: string;
            /** @description The item description. Supported for only the PayPal payment method. */
            description?: string;
            /** @description The item quantity. Must be a whole number. */
            quantity: string;
            /** @description The item cost. Supports two decimal places. */
            price: string;
            currency: components["schemas"]["currency_code"];
            /** @description The item tax. Supported only for the PayPal payment method. */
            tax?: string;
        };
        /**
         * Related Resources
         * @description The payment-related financial transactions, which include sales, authorizations, captures, and refunds. To show resource details, use the resource ID. For example, to [show details for a related authorization](/docs/api/payments/v1/#authorization_get), use the ID returned in the `authorization` object. You can also use the [HATEOAS links](/docs/api/hateoas-links/) for a resource to complete operations for that resource. For example, a `sale` object provides a `refund` link that enables you to refund the sale.
         */
        payment_hold_reason: {
            /**
             * @description The reason that PayPal holds the recipient fund. Set only if the payment hold status is `HELD`.
             * @enum {string}
             */
            payment_hold_reason?: "PAYMENT_HOLD" | "SHIPPING_RISK_HOLD";
        };
        /**
         * Currency
         * @description The currency and amount for a transaction.
         */
        currency: {
            /** @description The [three-character ISO-4217 currency code](/docs/integration/direct/rest/currency-codes/). PayPal does not support all currencies. */
            currency: string;
            /** @description The amount. Includes the specified number of digits after decimal separator for the [ISO-4217 currency code](https://en.wikipedia.org/wiki/ISO_4217#Active_codes). */
            value: string;
        };
        /**
         * FMF Details
         * @description The Fraud Management Filter (FMF) details that are applied to the payment that result in an accept, deny, or pending action. Returned in a payment response only if the merchant has enabled FMF in the profile settings and one of the fraud filters was triggered based on those settings. For more information, see [Fraud Management Filters Summary](/docs/classic/fmf/integration-guide/FMFSummary/).
         */
        fmf_details: {
            /**
             * @description The filter type.
             * @enum {string}
             */
            readonly filter_type: "ACCEPT" | "PENDING" | "DENY" | "REPORT";
            /**
             * @description The filter ID.
             * @enum {string}
             */
            readonly filter_id: "AVS_NO_MATCH" | "AVS_PARTIAL_MATCH" | "AVS_UNAVAILABLE_OR_UNSUPPORTED" | "CARD_SECURITY_CODE_MISMATCH" | "MAXIMUM_TRANSACTION_AMOUNT" | "UNCONFIRMED_ADDRESS" | "COUNTRY_MONITOR" | "LARGE_ORDER_NUMBER" | "BILLING_OR_SHIPPING_ADDRESS_MISMATCH" | "RISKY_ZIP_CODE" | "SUSPECTED_FREIGHT_FORWARDER_CHECK" | "TOTAL_PURCHASE_PRICE_MINIMUM" | "IP_ADDRESS_VELOCITY" | "RISKY_EMAIL_ADDRESS_DOMAIN_CHECK" | "RISKY_BANK_IDENTIFICATION_NUMBER_CHECK" | "RISKY_IP_ADDRESS_RANGE" | "PAYPAL_FRAUD_MODEL";
            /** @description The filter name. */
            readonly name?: string;
            /** @description The filter description. */
            readonly description?: string;
        };
        /**
         * Processor Response
         * @description The processor-provided response codes that describe the submitted payment. Supported only when the `payment_method` is `credit_card`.
         */
        processor_response: {
            /** @description The PayPal normalized response code, which is generated from the processor's specific response code. */
            readonly response_code: string;
            /** @description The [Address Verification System (AVS)](/docs/nvp-soap-api/AVSResponseCodes/) response code. */
            readonly avs_code?: string;
            /** @description The [CVV](/docs/nvp-soap-api/AVSResponseCodes/) system response code. */
            readonly cvv_code?: string;
            /**
             * @description The merchant advice on how to handle declines for recurring payments.
             * @enum {string}
             */
            readonly advice_code?: "01_NEW_ACCOUNT_INFORMATION" | "02_TRY_AGAIN_LATER" | "02_STOP_SPECIFIC_PAYMENT" | "03_DO_NOT_TRY_AGAIN" | "03_REVOKE_AUTHORIZATION_FOR_FUTURE_PAYMENT" | "21_DO_NOT_TRY_AGAIN_CARD_HOLDER_CANCELLED_RECURRRING_CHARGE" | "21_CANCEL_ALL_RECURRING_PAYMENTS";
            /** @description The processor-provided authorization response. */
            readonly eci_submitted?: string;
            /** @description The processor-provided Visa Payer Authentication Service (VPAS) status. */
            readonly vpas?: string;
        };
        /**
         * Sale
         * @description The sale transaction details.
         */
        sale: {
            /** @description The ID of the sale transaction. */
            readonly id: string;
            /** @description The amount to collect. */
            amount: components["schemas"]["amount"];
            /**
             * @description The transaction payment mode. Supported only for PayPal payments.
             * @enum {string}
             */
            readonly payment_mode?: "INSTANT_TRANSFER" | "MANUAL_BANK_TRANSFER" | "DELAYED_TRANSFER" | "ECHECK";
            /**
             * @description The state of the sale transaction.
             * @enum {string}
             */
            readonly state: "completed" | "partially_refunded" | "pending" | "refunded" | "denied";
            /**
             * @description A reason code that describes why the transaction state is pending or reversed. Supported only for PayPal payments.
             * @enum {string}
             */
            readonly reason_code?: "CHARGEBACK" | "GUARANTEE" | "BUYER_COMPLAINT" | "REFUND" | "UNCONFIRMED_SHIPPING_ADDRESS" | "ECHECK" | "INTERNATIONAL_WITHDRAWAL" | "RECEIVING_PREFERENCE_MANDATES_MANUAL_ACTION" | "PAYMENT_REVIEW" | "REGULATORY_REVIEW" | "UNILATERAL" | "VERIFICATION_REQUIRED" | "TRANSACTION_APPROVED_AWAITING_FUNDING";
            /**
             * @description The merchant protection level in effect for the transaction. Supported only for PayPal payments.
             * @enum {string}
             */
            readonly protection_eligibility?: "ELIGIBLE" | "PARTIALLY_ELIGIBLE" | "INELIGIBLE";
            /**
             * @description The merchant protection type in effect for the transaction. Returned only when `protection_eligibility` is `ELIGIBLE` or `PARTIALLY_ELIGIBLE`. Supported only for PayPal payments.
             * @enum {string}
             */
            readonly protection_eligibility_type?: "ITEM_NOT_RECEIVED_ELIGIBLE" | "UNAUTHORIZED_PAYMENT_ELIGIBLE" | "ITEM_NOT_RECEIVED_ELIGIBLE,UNAUTHORIZED_PAYMENT_ELIGIBLE";
            /**
             * Format: date-time
             * @description The date and time when the PayPal eCheck transaction is expected to clear, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
             */
            readonly clearing_time?: string;
            /**
             * @description The recipient fund status. Returned only when the fund status is `held`.
             * @enum {string}
             */
            readonly payment_hold_status?: "HELD";
            /** @description An array of reasons that PayPal holds the recipient fund. Set only if the payment hold status is `HELD`. */
            readonly payment_hold_reasons?: components["schemas"]["payment_hold_reason"][];
            /** @description The currency and amount of the transaction fee for this payment. Would not be returned for `pending` transactions where the funds have not been realized in the payee account. */
            readonly transaction_fee?: components["schemas"]["currency"];
            /** @description The currency and amount of the net that the merchant receives for this transaction in their receivable currency. Returned only in cross-currency use cases where a merchant bills a buyer in a non-primary currency for that buyer. */
            receivable_amount?: components["schemas"]["currency"];
            /** @description The currency and amount of the PayPal fee for this payment in the receivable currency. Returned only in cases the fee is charged in the receivable currency. Example `CNY`. Would not be returned for `pending` transactions where the funds have not been realized in the payee account. */
            readonly transaction_fee_in_receivable_currency?: components["schemas"]["currency"];
            /** @description The exchange rate for this transaction. Returned only in cross-currency use cases where a merchant bills a buyer in a non-primary currency for that buyer. */
            readonly exchange_rate?: string;
            fmf_details?: components["schemas"]["fmf_details"];
            /** @description The receipt ID, which is a payment ID number that is returned for guest users to identify the payment. */
            readonly receipt_id?: string;
            /** @description The ID of the payment on which this transaction is based. */
            readonly parent_payment: string;
            processor_response?: components["schemas"]["processor_response"];
            /** @description The ID of the billing agreement. Used as reference to execute this transaction. */
            readonly billing_agreement_id?: string;
            /**
             * Format: date-time
             * @description The date and time of the sale, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
             */
            readonly create_time: string;
            /**
             * Format: date-time
             * @description The date and time when the resource was last updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
             */
            readonly update_time?: string;
            /** @description An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links). */
            readonly links?: components["schemas"]["link_description"][];
        };
        /**
         * Authorization
         * @description The authorization details.
         */
        authorization: {
            /** @description The ID of the authorization. */
            readonly id?: string;
            /** @description The amount being authorized. */
            amount: components["schemas"]["amount"];
            /**
             * @description The payment mode of the authorization.
             * @enum {string}
             */
            readonly payment_mode?: "INSTANT_TRANSFER";
            /**
             * @description The authorized payment state.
             * @enum {string}
             */
            readonly state?: "pending" | "authorized" | "partially_captured" | "captured" | "expired" | "denied" | "voided";
            /**
             * @description The reason code for the pending transaction state.
             * @enum {string}
             */
            readonly reason_code?: "AUTHORIZATION";
            /**
             * @description Deprecated. The reason code for the pending transaction state. Obsolete. Use `reason_code` instead.
             * @enum {string}
             */
            readonly pending_reason?: "AUTHORIZATION";
            /**
             * @description The level of seller protection present for the transaction. Supported for the PayPal payment method only.
             * @enum {string}
             */
            readonly protection_eligibility?: "ELIGIBLE" | "PARTIALLY_ELIGIBLE" | "INELIGIBLE";
            /**
             * @description The type of seller protection for the transaction. Returned only when the `protection_eligibility` property is `ELIGIBLE` or `PARTIALLY_ELIGIBLE`. Supported for the PayPal payment method only.
             * @enum {string}
             */
            readonly protection_eligibility_type?: "ITEM_NOT_RECEIVED_ELIGIBLE" | "UNAUTHORIZED_PAYMENT_ELIGIBLE" | "ITEM_NOT_RECEIVED_ELIGIBLE,UNAUTHORIZED_PAYMENT_ELIGIBLE";
            fmf_details?: components["schemas"]["fmf_details"];
            /** @description The ID of the payment on which this transaction is based. */
            readonly parent_payment?: string;
            processor_response?: components["schemas"]["processor_response"];
            /**
             * Format: date-time
             * @description The date and time when the authorization expires, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
             */
            readonly valid_until?: string;
            /**
             * Format: date-time
             * @description The date and time when the authorization was created, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
             */
            readonly create_time?: string;
            /**
             * Format: date-time
             * @description The date and time when the authorization was last updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
             */
            readonly update_time?: string;
            /** @description The receipt ID, which identifies the payment. Value is 16-digit numeric payment ID number that is returned for guest users. */
            readonly receipt_id?: string;
            /** @description An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links). */
            readonly links?: components["schemas"]["link_description"][];
        };
        /**
         * Order
         * @description The order transaction details.
         */
        order: {
            /** @description The ID of the order transaction. */
            readonly id?: string;
            /** @description The amount to collect.<blockquote><strong>Note:</strong> For an order authorization, you cannot include amount <code>details</code>.</blockquote> */
            amount: components["schemas"]["amount"];
            /**
             * @description The transaction payment mode.
             * @enum {string}
             */
            readonly payment_mode?: "INSTANT_TRANSFER" | "MANUAL_BANK_TRANSFER" | "DELAYED_TRANSFER" | "ECHECK";
            /**
             * @description The state of the order transaction.
             * @enum {string}
             */
            readonly state?: "PENDING" | "AUTHORIZED" | "CAPTURED" | "COMPLETED" | "VOIDED";
            /**
             * @description The reason code that describes why the transaction state is pending or reversed. Supported only for PayPal payments.
             * @enum {string}
             */
            readonly reason_code?: "PAYER_SHIPPING_UNCONFIRMED" | "MULTI_CURRENCY" | "RISK_REVIEW" | "REGULATORY_REVIEW" | "VERIFICATION_REQUIRED" | "ORDER" | "OTHER";
            /**
             * @description Deprecated. The reason code for the pending transaction state. Obsolete. Use `reason_code` instead.
             * @enum {string}
             */
            readonly pending_reason?: "payer_shipping_unconfirmed" | "multi_currency" | "risk_review" | "regulatory_review" | "verification_required" | "order" | "other";
            /**
             * @description The level of seller protection in effect for the transaction.
             * @enum {string}
             */
            readonly protection_eligibility?: "ELIGIBLE" | "PARTIALLY_ELIGIBLE" | "INELIGIBLE";
            /**
             * @description The kind of seller protection in effect for the transaction. Returned only when the `protection_eligibility` property is `ELIGIBLE` or `PARTIALLY_ELIGIBLE`. Supported only for PayPal payments.
             * @enum {string}
             */
            readonly protection_eligibility_type?: "ITEM_NOT_RECEIVED_ELIGIBLE" | "UNAUTHORIZED_PAYMENT_ELIGIBLE" | "ITEM_NOT_RECEIVED_ELIGIBLE,UNAUTHORIZED_PAYMENT_ELIGIBLE";
            /** @description The ID of the payment on which this transaction is based. */
            readonly parent_payment?: string;
            fmf_details?: components["schemas"]["fmf_details"];
            /**
             * Format: date-time
             * @description The date and time when the resource was created, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
             */
            readonly create_time?: string;
            /**
             * Format: date-time
             * @description The date and time when the resource was last updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
             */
            readonly update_time?: string;
            /** @description An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links). */
            readonly links?: components["schemas"]["link_description"][];
        };
        /**
         * Capture
         * @description The capture transaction details.
         */
        capture: {
            /** @description The ID of the capture transaction. */
            readonly id?: string;
            /** @description The amount to capture. If the amount matches the originally authorized amount, the state of the authorization changes to `captured`. Otherwise, the state changes to `partially_captured`. */
            amount?: components["schemas"]["amount"];
            /**
             * @description Indicates whether to release all remaining held funds.
             * @default false
             */
            is_final_capture: boolean;
            /**
             * @description The state of the capture.
             * @enum {string}
             */
            readonly state?: "pending" | "completed" | "refunded" | "partially_refunded" | "denied";
            /**
             * @description The reason code that describes why the transaction state is pending or reversed.
             * @enum {string}
             */
            readonly reason_code?: "CHARGEBACK" | "GUARANTEE" | "BUYER_COMPLAINT" | "REFUND" | "UNCONFIRMED_SHIPPING_ADDRESS" | "ECHECK" | "INTERNATIONAL_WITHDRAWAL" | "RECEIVING_PREFERENCE_MANDATES_MANUAL_ACTION" | "PAYMENT_REVIEW" | "REGULATORY_REVIEW" | "UNILATERAL" | "VERIFICATION_REQUIRED" | "TRANSACTION_APPROVED_AWAITING_FUNDING" | "NONE";
            /** @description The ID of the payment on which this transaction is based. */
            readonly parent_payment?: string;
            /** @description The invoice number to track this payment. */
            invoice_number?: string;
            /** @description The currency and amount of the transaction fee for this payment. Would not be returned for `pending` transactions where the funds have not been realized in the payee account. */
            readonly transaction_fee?: components["schemas"]["currency"];
            /** @description The currency and amount of the PayPal fee for this payment in the receivable currency. Returned only in cases the fee is charged in the receivable currency. Example `CNY`. Would not be returned for `pending` transactions where the funds have not been realized in the payee account. */
            readonly transaction_fee_in_receivable_currency?: components["schemas"]["currency"];
            /** @description The net amount and currency that the merchant receives for this transaction in the receivable currency. */
            readonly receivable_amount?: components["schemas"]["currency"];
            /** @description The exchange rate applied for this transaction. Returned when there is a currency conversion from the transaction currency to the receivable currency. */
            readonly exchange_rate?: string;
            /** @description A free-form field that clients can use to send a note to the payer. */
            note_to_payer?: string;
            /**
             * Format: date-time
             * @description The date and time of the capture, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
             */
            readonly create_time?: string;
            /**
             * Format: date-time
             * @description The date and time when the resource was last updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
             */
            readonly update_time?: string;
            /** @description An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links). */
            readonly links?: components["schemas"]["link_description"][];
        };
        /**
         * Refund
         * @description The refund details.
         */
        refund: {
            /** @description The ID of the refund transaction. Maximum length is 17 characters. */
            readonly id?: string;
            /** @description The refund amount. Includes both the amount refunded to the payer and amount of the fee refunded to the payee. */
            amount?: components["schemas"]["amount"];
            /**
             * @description The state of the refund.
             * @enum {string}
             */
            readonly state?: "pending" | "completed" | "cancelled" | "failed";
            /** @description The reason that the transaction is being refunded. */
            reason?: string;
            /** @description The invoice or tracking ID number. */
            invoice_number?: string;
            /** @description The ID of the sale transaction being refunded. */
            readonly sale_id?: string;
            /** @description The ID of the sale transaction being refunded. */
            readonly capture_id?: string;
            /** @description The ID of the payment on which this transaction is based. */
            readonly parent_payment?: string;
            /** @description The refund description. Value must be single-byte alphanumeric characters. */
            description?: string;
            /**
             * Format: date-time
             * @description The date and time when the refund was created, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
             */
            readonly create_time?: string;
            /**
             * Format: date-time
             * @description The date and time when the resource was last updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
             */
            readonly update_time?: string;
            /** @description An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links). */
            readonly links?: components["schemas"]["link_description"][];
        };
        /**
         * Related Resources
         * @description The payment-related financial transactions, which include sales, authorizations, captures, and refunds. To show resource details, use the resource ID. For example, to [show details for a related authorization](/docs/api/payments/v1/#authorization_get), use the ID returned in the `authorization` object. You can also use the [HATEOAS links](/docs/api/hateoas-links/) for a resource to complete operations for that resource. For example, a `sale` object provides a `refund` link that enables you to refund the sale.
         */
        related_resources: {
            sale?: components["schemas"]["sale"];
            authorization?: components["schemas"]["authorization"];
            order?: components["schemas"]["order"];
            capture?: components["schemas"]["capture"];
            refund?: components["schemas"]["refund"];
        };
        /**
         * Transaction
         * @description An array of payment-related transactions. A transaction defines what the payment is for and who fulfills the payment.
         */
        transaction: {
            /** @description The amount to collect. */
            amount?: components["schemas"]["amount"];
            payee?: components["schemas"]["payee"];
            /** @description The purchase description. */
            description?: string;
            /** @description The note to the recipient of the funds in this transaction. */
            note_to_payee?: string;
            /** @description The free-form field for the client's use. */
            custom?: string;
            /** @description The invoice number to track this payment. */
            invoice_number?: string;
            /** @description The soft descriptor to use to charge this funding source. If greater than the maximum allowed length, the API truncates the string. */
            soft_descriptor?: string;
            /**
             * Payment Options
             * @description The payment options for this transaction.
             */
            payment_options?: {
                /**
                 * @description The payment method for this transaction. This field does not apply to the credit card payment method.
                 * @default UNRESTRICTED
                 * @enum {string}
                 */
                allowed_payment_method: "UNRESTRICTED" | "INSTANT_FUNDING_SOURCE" | "IMMEDIATE_PAY";
            };
            /**
             * Item List
             * @description An array of items that are being purchased.
             */
            item_list?: {
                /** @description An array of items that are being purchased. */
                items?: components["schemas"]["item"][];
                shipping_address?: components["schemas"]["shipping_address"];
                /** @description The shipping method used for this payment, such as USPS Parcel. */
                shipping_method?: string;
                /** @description The shipping phone number, in its canonical international format as defined by the [E.164](https://en.wikipedia.org/wiki/E.164) numbering plan. Enables merchants to share payer’s contact number with PayPal for the current payment. The final contact number for the payer who is associated with the transaction might be the same as or different from the `shipping_phone_number` based on the payer’s action on PayPal. */
                shipping_phone_number?: string;
            };
            /**
             * Format: uri
             * @description The URL to send payment notifications.
             */
            notify_url?: string;
            /** @description An array of payment-related transactions. A transaction defines what the payment is for and who fulfills the payment. */
            readonly related_resources?: components["schemas"]["related_resources"][];
        };
        /**
         * Payment
         * @description The payment details.
         */
        payment: {
            /** @description The ID of the payment. */
            readonly id?: string;
            /**
             * @description The payment intent. Value is:<ul><li><code>sale</code>. Makes an immediate payment.</li><li><code>authorize</code>. [Authorizes a payment for capture later](/docs/integration/direct/payments/authorize-and-capture-payments/).</li><li><code>order</code>. [Creates an order](/docs/integration/direct/payments/orders/).</li></ul>
             * @enum {string}
             */
            intent: "sale" | "authorize" | "order";
            /** @description The source of the funds for this payment. Payment method is PayPal Wallet payment or bank direct debit. */
            payer: components["schemas"]["payer"];
            /** @description Use the application context resource to customize payment flow experience for your buyers. */
            application_context?: components["schemas"]["application_context"];
            /** @description An array of payment-related transactions. A transaction defines what the payment is for and who fulfills the payment. For update and execute payment calls, the **`transactions`** object accepts the **`amount`** object only. */
            transactions?: components["schemas"]["transaction"][];
            /**
             * @description The state of the payment, authorization, or order transaction. Value is:<ul><li><code>created</code>. The transaction was successfully created.</li><li><code>approved</code>. The customer approved the transaction. The state changes from <code>created</code> to <code>approved</code> on generation of the <code>sale_id</code> for sale transactions, <code>authorization_id</code> for authorization transactions, or <code>order_id</code> for order transactions.</li><li><code>failed</code>. The transaction request failed.</li></ul>
             * @enum {string}
             */
            readonly state?: "created" | "approved" | "failed" | "partially_completed" | "in_progress";
            /** @description Deprecated. The PayPal-generated ID for the merchant's payment experience profile. For information, see [create web experience profile](/docs/api/payment-experience/v1/#web-profiles_create). Use application_context instead. */
            experience_profile_id?: string;
            /** @description A free-form field that clients can use to send a note to the payer. */
            note_to_payer?: string;
            /**
             * Redirect URLs
             * @description A set of redirect URLs that you provide for PayPal-based payments.
             */
            redirect_urls?: {
                /**
                 * Format: uri
                 * @description The URL where the payer is redirected after he or she approves the payment. **Required for PayPal account payments**.
                 */
                return_url?: string;
                /**
                 * Format: uri
                 * @description The URL where the payer is redirected after he or she cancels the payment. **Required for PayPal account payments**.
                 */
                cancel_url?: string;
            };
            /**
             * @description The reason code for a payment failure.
             * @enum {string}
             */
            readonly failure_reason?: "UNABLE_TO_COMPLETE_TRANSACTION" | "INVALID_PAYMENT_METHOD" | "PAYER_CANNOT_PAY" | "CANNOT_PAY_THIS_PAYEE" | "REDIRECT_REQUIRED" | "PAYEE_FILTER_RESTRICTIONS";
            /**
             * Format: date-time
             * @description The date and time when the payment was created, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
             */
            readonly create_time?: string;
            /**
             * Format: date-time
             * @description The date and time when the payment was updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
             */
            readonly update_time?: string;
            /** @description An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links). */
            readonly links?: components["schemas"]["link_description"][];
        };
        /**
         * Payment History
         * @description An array of merchant payments that are complete. Payments that you just created with the [create payment](/docs/api/payments/v1/#payment_create) call do not appear in the list.
         */
        payment_history: {
            /** @description An array of payments that are complete. Payments that you just created with the [create payment](/docs/api/payments/v1/#payment_create) call do not appear in the list. */
            payments?: components["schemas"]["payment"][];
            /** @description The number of items returned in each range of results. Note that the last results range might have fewer items than the requested number of items. */
            count?: number;
            /** @description The ID of the element to use to get the next range of results. */
            readonly next_id?: string;
        };
        /**
         * Patch
         * @description The JSON patch object to apply partial updates to resources.
         */
        patch: {
            /**
             * @description The operation.
             * @enum {string}
             */
            op: "add" | "remove" | "replace" | "move" | "copy" | "test";
            /** @description The <a href="https://tools.ietf.org/html/rfc6901">JSON Pointer</a> to the target document location at which to complete the operation. */
            path?: string;
            /**
             * Patch Value
             * @description The value to apply. The <code>remove</code> operation does not require a value.
             */
            value?: unknown;
            /** @description The <a href="https://tools.ietf.org/html/rfc6901">JSON Pointer</a> to the target document location from which to move the value. Required for the <code>move</code> operation. */
            from?: string;
        };
        /**
         * Patch Request
         * @description An array of JSON patch objects to apply partial updates to resources.
         */
        patch_request: components["schemas"]["patch"][];
        /**
         * Cart Base
         * @description The cart.
         */
        cart_base: {
            /** @description The merchant-provided ID for the purchase unit. */
            reference_id?: string;
            /** @description The amount to collect. */
            amount: components["schemas"]["amount"];
            payee?: components["schemas"]["payee"];
            /** @description The purchase description. */
            description?: string;
            /** @description The note to the recipient of the funds in this transaction. */
            note_to_payee?: string;
            /** @description The free-form field for the client's use. */
            custom?: string;
            /** @description The invoice number to track this payment. */
            invoice_number?: string;
            /** @description The payment descriptor on account transactions on the customer's credit card statement, that PayPal sends to processors. The maximum length of the soft descriptor information that you can pass in the API field is 22 characters, in the following format:<pre>22 - len(PAYPAL * (8)) - len(<var>Descriptor in Payment Receiving Preferences of Merchant account</var> + 1)</pre>The PAYPAL prefix uses 8 characters.<br/><br/>The soft descriptor supports the following ASCII characters:<ul><li>Alphanumeric characters</li><li>Dashes</li><li>Asterisks</li><li>Periods (.)</li><li>Spaces</li></ul>For Wallet payments marketplace integrations:<ul><li>The merchant descriptor in the Payment Receiving Preferences must be the marketplace name.</li><li>You can't use the remaining space to show the customer service number.</li><li>The remaining spaces can be a combination of seller name and country.</li></ul><br/>For unbranded payments (Direct Card) marketplace integrations, use a combination of the seller name and phone number. */
            soft_descriptor?: string;
            /**
             * Payment Options
             * @description The payment options for this transaction.
             */
            payment_options?: {
                /**
                 * @description The payment method for this transaction. This field does not apply to the credit card payment method.
                 * @default UNRESTRICTED
                 * @enum {string}
                 */
                allowed_payment_method: "UNRESTRICTED" | "INSTANT_FUNDING_SOURCE" | "IMMEDIATE_PAY";
            };
            /**
             * Item List
             * @description An array of items that are being purchased.
             */
            item_list?: {
                /** @description An array of items that are being purchased. */
                items?: components["schemas"]["item"][];
                shipping_address?: components["schemas"]["shipping_address"];
                /** @description The shipping phone number, in its canonical international format as defined by the [E.164](https://en.wikipedia.org/wiki/E.164) numbering plan. Enables merchants to share payer’s contact number with PayPal for the current payment. The final contact number for the payer who is associated with the transaction might be the same as or different from the `shipping_phone_number` based on the payer’s action on PayPal. */
                shipping_phone_number?: string;
            };
            /**
             * Format: uri
             * @description The send payment notifications URL.
             */
            notify_url?: string;
            /**
             * Format: uri
             * @description The payment-related URL on the merchant site.
             */
            order_url?: string;
        };
        /**
         * Payment Execution
         * @description Executes a PayPal account-based payment with the `payer_id` obtained from the web approval URL.
         */
        payment_execution: {
            /** @description The ID of the payer that PayPal passes in the `return_url`. */
            payer_id?: string;
            /** @description An array of transaction details. Includes the amount and item details. For update and execute payment calls, the `transactions` object accepts only the `amount` object. */
            transactions?: components["schemas"]["cart_base"][];
        };
        /**
         * Refund Request
         * @description The refund request.
         */
        refund_request: {
            /** @description The refund amount. Includes both the amount to refund to the payer and the fee amount to refund to the payee. */
            amount?: components["schemas"]["amount"];
            /** @description The refund description. Value is a string of single-byte alphanumeric characters. */
            description?: string;
            /** @description The refund reason description. */
            reason?: string;
            /** @description The invoice number that tracks this payment. Value is a string of single-byte alphanumeric characters. */
            invoice_number?: string;
        };
        /**
         * Refund
         * @description The refund transaction details.
         */
        "refund-2": {
            /** @description The ID of the refund transaction. */
            readonly id?: string;
            /** @description The refund amount. Includes both the amount refunded to the payer and the fee refunded to the payee. */
            amount?: components["schemas"]["amount"];
            /**
             * @description The state of the refund.
             * @enum {string}
             */
            readonly state?: "pending" | "completed" | "cancelled" | "failed";
            /** @description The reason that the transaction is being refunded. */
            reason?: string;
            /** @description Your own invoice or tracking ID number. Value is a string of single-byte alphanumeric characters. */
            invoice_number?: string;
            /** @description The ID of the sale transaction being refunded. */
            readonly sale_id?: string;
            /** @description The ID of the sale transaction being refunded. */
            readonly capture_id?: string;
            /** @description The ID of the payment on which this transaction is based. */
            readonly parent_payment?: string;
            /** @description The refund description. */
            description?: string;
            /**
             * Format: date-time
             * @description The date and time when the refund was created, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
             */
            readonly create_time?: string;
            /**
             * Format: date-time
             * @description The date and time when the resource was last updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
             */
            readonly update_time?: string;
            /** @description An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links). */
            readonly links?: components["schemas"]["link_description"][];
        };
        /**
         * Detailed Refund
         * @description The refund transaction details.
         */
        detailed_refund: components["schemas"]["refund-2"] & {
            /** @description The note to the payer in this transaction. */
            custom?: string;
            /** @description The invoice number to track this payment. */
            invoice_number?: string;
            /** @description The currency and amount of the transaction fee that is refunded to original the recipient of payment. */
            refund_from_transaction_fee?: components["schemas"]["currency"];
            /** @description The currency and amount of the refund that is subtracted from the original payment recipient's PayPal balance. */
            refund_from_received_amount?: components["schemas"]["currency"];
            /** @description The currency and amount of the total refund from the original purchase. For example, if a payer makes $100 purchase and the payer was refunded $20 a week ago and $30 in this transaction, the gross refund amount is $30 for this transaction and the total refunded amount is $50. */
            total_refunded_amount?: components["schemas"]["currency"];
        };
    };
    responses: never;
    parameters: {
        paypal_partner_attribution_id: string;
        /** @description The number of items to list in the response. */
        count: number;
        /** @description The ID of the starting resource in the response. When results are paged, you can use the `next_id` value as the `start_id` to continue with the next set of results. */
        start_id: string;
        /** @description The start index of the payments to list. Typically, you use the `start_index` to jump to a specific position in the resource history based on its cart. For example, to start at the second item in a list of results, specify `?start_index=2`. */
        start_index: number;
        /** @description The start date and time for the range to show in the response, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, `start_time=2016-03-06T11:00:00Z`. */
        start_time: string;
        /** @description The end date and time for the range to show in the response, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, `end_time=2016-03-06T11:00:00Z`. */
        end_time: string;
        /** @description Filters the payments in the response by a PayPal-assigned merchant ID that identifies the payee. */
        payee_id: string;
        /** @description Sorts the payments in the response by a create time. */
        sort_by: "create_time";
        /** @description Sorts the payments in the response in descending order. */
        sort_order: "desc";
        /** @description The ID of the payment to execute. */
        payment_id: string;
        /** @description The server stores keys for 30 days. */
        paypal_request_id: string;
        /** @description The ID of the sale transaction to refund. */
        sale_id: string;
        /** @description The ID of the authorization to re-authorize. */
        authorization_id: string;
        /** @description The ID of the order to authorize. */
        order_id: string;
        /** @description The ID of the captured payment to refund. */
        capture_id: string;
        /** @description The ID of the refund for which to show details. */
        refund_id: string;
    };
    requestBodies: {
        capture: {
            content: {
                "application/json": components["schemas"]["capture"];
            };
        };
        refund_request: {
            content: {
                "application/json": components["schemas"]["refund_request"];
            };
        };
    };
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "payment.list": {
        parameters: {
            query?: {
                /** @description The number of items to list in the response. */
                count?: components["parameters"]["count"];
                /** @description The ID of the starting resource in the response. When results are paged, you can use the `next_id` value as the `start_id` to continue with the next set of results. */
                start_id?: components["parameters"]["start_id"];
                /** @description The start index of the payments to list. Typically, you use the `start_index` to jump to a specific position in the resource history based on its cart. For example, to start at the second item in a list of results, specify `?start_index=2`. */
                start_index?: components["parameters"]["start_index"];
                /** @description The start date and time for the range to show in the response, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, `start_time=2016-03-06T11:00:00Z`. */
                start_time?: components["parameters"]["start_time"];
                /** @description The end date and time for the range to show in the response, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, `end_time=2016-03-06T11:00:00Z`. */
                end_time?: components["parameters"]["end_time"];
                /** @description Filters the payments in the response by a PayPal-assigned merchant ID that identifies the payee. */
                payee_id?: components["parameters"]["payee_id"];
                /** @description Sorts the payments in the response by a create time. */
                sort_by?: components["parameters"]["sort_by"];
                /** @description Sorts the payments in the response in descending order. */
                sort_order?: components["parameters"]["sort_order"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that lists payments with payment details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["payment_history"];
                };
            };
            /** @description The error details. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "payment.create": {
        parameters: {
            query?: never;
            header?: {
                "PayPal-Partner-Attribution-Id"?: components["parameters"]["paypal_partner_attribution_id"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["payment"];
            };
        };
        responses: {
            /** @description A successful request returns the HTTP `201 Created` status code and a JSON response body that shows payment details. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["payment"];
                };
            };
            /** @description The error details. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "payment.get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the payment to execute. */
                payment_id: components["parameters"]["payment_id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that shows payment details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["payment"];
                };
            };
            /** @description The error details. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "payment.update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the payment to execute. */
                payment_id: components["parameters"]["payment_id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["patch_request"];
            };
        };
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that shows payment details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["payment"];
                };
            };
            /** @description The error details. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "payment.execute": {
        parameters: {
            query?: never;
            header?: {
                /** @description The server stores keys for 30 days. */
                "PayPal-Request-Id"?: components["parameters"]["paypal_request_id"];
                "PayPal-Partner-Attribution-Id"?: components["parameters"]["paypal_partner_attribution_id"];
            };
            path: {
                /** @description The ID of the payment to execute. */
                payment_id: components["parameters"]["payment_id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["payment_execution"];
            };
        };
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that shows details for the executed payment. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["payment"];
                };
            };
            /** @description The error details. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "sale.get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the sale transaction to refund. */
                sale_id: components["parameters"]["sale_id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that shows sale details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["sale"];
                };
            };
            /** @description The error details. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "sale.refund": {
        parameters: {
            query?: never;
            header?: {
                /** @description The server stores keys for 30 days. */
                "PayPal-Request-Id"?: components["parameters"]["paypal_request_id"];
            };
            path: {
                /** @description The ID of the sale transaction to refund. */
                sale_id: components["parameters"]["sale_id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["refund_request"];
            };
        };
        responses: {
            /** @description A successful idempotent request returns the HTTP `200 Created` status code and a JSON response body that shows details for the refunded sale. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["detailed_refund"];
                };
            };
            /** @description A successful request returns the HTTP `201 Created` status code and a JSON response body that shows details for the refunded sale. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["detailed_refund"];
                };
            };
            /** @description The request failed because a previous call for the given resource is in progress. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description The error details. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "authorization.get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the authorization to re-authorize. */
                authorization_id: components["parameters"]["authorization_id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that shows authorization details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["authorization"];
                };
            };
            /** @description The error details. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "authorization.capture": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the authorization to re-authorize. */
                authorization_id: components["parameters"]["authorization_id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["capture"];
            };
        };
        responses: {
            /** @description A successful request returns the HTTP `201 Created` status code and a JSON response body that shows details for the captured authorization. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["capture"];
                };
            };
            /** @description The error details. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "authorization.void": {
        parameters: {
            query?: never;
            header?: {
                /** @description The server stores keys for 30 days. */
                "PayPal-Request-Id"?: components["parameters"]["paypal_request_id"];
            };
            path: {
                /** @description The ID of the authorization to re-authorize. */
                authorization_id: components["parameters"]["authorization_id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that shows details for the voided authorization. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["authorization"];
                };
            };
            /** @description The request failed because a previous call for the given resource is in progress. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description The error details. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "authorization.reauthorize": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the authorization to re-authorize. */
                authorization_id: components["parameters"]["authorization_id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["authorization"];
            };
        };
        responses: {
            /** @description A successful request returns the HTTP `201 Created` status code and a JSON response body that shows details for the re-authorized authorization. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["authorization"];
                };
            };
            /** @description The error details. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "orders.get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the order to authorize. */
                order_id: components["parameters"]["order_id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that shows details for the voided authorization. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["order"];
                };
            };
            /** @description The error details. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "orders.capture": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the order to authorize. */
                order_id: components["parameters"]["order_id"];
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["capture"];
        responses: {
            /** @description A successful request returns the HTTP `201 Created` status code and a JSON response body that shows details for the captured order. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["capture"];
                };
            };
            /** @description The error details. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "orders.void": {
        parameters: {
            query?: never;
            header?: {
                /** @description The server stores keys for 30 days. */
                "PayPal-Request-Id"?: components["parameters"]["paypal_request_id"];
            };
            path: {
                /** @description The ID of the order to authorize. */
                order_id: components["parameters"]["order_id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that shows details for the voided order. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["order"];
                };
            };
            /** @description The error details. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "orders.authorize": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the order to authorize. */
                order_id: components["parameters"]["order_id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["order"];
            };
        };
        responses: {
            /** @description A successful request returns the HTTP `201 Created` status code and a JSON response body that shows details for the authorized order. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["authorization"];
                };
            };
            /** @description The error details. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "capture.get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the captured payment to refund. */
                capture_id: components["parameters"]["capture_id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that shows details for the captured payment. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["capture"];
                };
            };
            /** @description The error details. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "capture.refund": {
        parameters: {
            query?: never;
            header?: {
                /** @description The server stores keys for 30 days. */
                "PayPal-Request-Id"?: components["parameters"]["paypal_request_id"];
            };
            path: {
                /** @description The ID of the captured payment to refund. */
                capture_id: components["parameters"]["capture_id"];
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["refund_request"];
        responses: {
            /** @description A successful idempotent request returns the HTTP `200 OK` status code and a JSON response body that shows details for the captured payment. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["detailed_refund"];
                };
            };
            /** @description A successful request returns the HTTP `201 OK` status code and a JSON response body that shows details for the captured payment. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["detailed_refund"];
                };
            };
            /** @description The request failed because a previous call for the given resource is in progress. */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description The error details. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "refund.get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the refund for which to show details. */
                refund_id: components["parameters"]["refund_id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that shows refund details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["refund"];
                };
            };
            /** @description The error details. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
}
