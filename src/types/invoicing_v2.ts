/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v2/invoicing/invoices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List invoices
         * @description Lists invoices. To filter the invoices that appear in the response, you can specify one or more optional query parameters.
         */
        get: operations["invoices.list"];
        put?: never;
        /**
         * Create draft invoice
         * @description Creates a draft invoice. To move the invoice from a draft to payable state, you must <a href="#invoices_send">send the invoice</a>.<br/><br/>In the JSON request body, include invoice details including merchant information. The <code>invoice</code> object must include an <code>items</code> array.<blockquote><strong>Note:</strong> The merchant that you specify in an invoice must have a PayPal account in good standing.</blockquote>.
         */
        post: operations["invoices.create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/invoicing/invoices/{invoice_id}/send": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send invoice
         * @description Sends or schedules an invoice, by ID, to be sent to a customer. The action depends on the invoice issue date:<ul><li>If the invoice issue date is current or in the past, sends the invoice immediately.</li><li>If the invoice issue date is in the future, schedules the invoice to be sent on that date.</li></ul>To suppress the merchant's email notification, set the `send_to_invoicer` body parameter to `false`. To send the invoice through a share link and not through PayPal, set the <code>send_to_recipient</code> parameter to <code>false</code> in the <code>notification</code> object. The <code>send_to_recipient</code> parameter does not apply to a future issue date because the invoice is scheduled to be sent through PayPal on that date.<blockquote><strong>Notes:</strong><ul><li>After you send an invoice, resending it has no effect.</li><li>To send a notification for updates, <a href="#invoices_update">update the invoice</a> and set the <code>send_to_recipient</code> body parameter to <code>true</code>.</li></ul></blockquote>
         */
        post: operations["invoices.send"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/invoicing/invoices/{invoice_id}/remind": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send invoice reminder
         * @description Sends a reminder to the payer about an invoice, by ID. In the JSON request body, include a `notification` object that defines the subject of the reminder and other details.
         */
        post: operations["invoices.remind"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/invoicing/invoices/{invoice_id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel sent invoice
         * @description Cancels a sent invoice, by ID, and, optionally, sends a notification about the cancellation to the payer, merchant, and CC: emails.
         */
        post: operations["invoices.cancel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/invoicing/invoices/{invoice_id}/payments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Record payment for invoice
         * @description Records a payment for the invoice. If no payment is due, the invoice is marked as `PAID`. Otherwise, the invoice is marked as `PARTIALLY PAID`.
         */
        post: operations["invoices.payments"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/invoicing/invoices/{invoice_id}/payments/{transaction_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete external payment
         * @description Deletes an external payment, by invoice ID and transaction ID.
         */
        delete: operations["invoices.payments-delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/invoicing/invoices/{invoice_id}/refunds": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Record refund for invoice
         * @description Records a refund for the invoice. If all payments are refunded, the invoice is marked as `REFUNDED`. Otherwise, the invoice is marked as `PARTIALLY REFUNDED`.
         */
        post: operations["invoices.refunds"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/invoicing/invoices/{invoice_id}/refunds/{transaction_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete external refund
         * @description Deletes an external refund, by invoice ID and transaction ID.
         */
        delete: operations["invoices.refunds-delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/invoicing/invoices/{invoice_id}/generate-qr-code": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate QR code
         * @description Generates a QR code for an invoice, by ID. The QR code is a PNG image in <a href="https://www.base64encode.org/">Base64-encoded</a> format that corresponds to the invoice ID. You can generate a QR code for an invoice and add it to a paper or PDF invoice. When customers use their mobile devices to scan the QR code, they are redirected to the PayPal mobile payment flow where they can view the invoice and pay online with PayPal or a credit card. Before you get a QR code, you must <a href="#invoices_create">create an invoice</a> and <a href="#invoices_send">send an invoice</a> to move the invoice from a draft to payable state. Do not include an email address if you do not want the invoice emailed.
         */
        post: operations["invoices.generate-qr-code"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/invoicing/generate-next-invoice-number": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate invoice number
         * @description Generates the next invoice number that is available to the merchant. The next invoice number uses the prefix and suffix from the last invoice number and increments the number by one. For example, the next invoice number after `INVOICE-1234` is `INVOICE-1235`.
         */
        post: operations["invoicing.generate-next-invoice-number"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/invoicing/invoices/{invoice_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show invoice details
         * @description Shows details for an invoice, by ID.
         */
        get: operations["invoices.get"];
        /**
         * Fully update invoice
         * @description Fully updates an invoice, by ID. In the JSON request body, include a complete `invoice` object. This call does not support partial updates.
         */
        put: operations["invoices.update"];
        post?: never;
        /**
         * Delete invoice
         * @description Deletes a draft or scheduled invoice, by ID. Deletes invoices in the draft or scheduled state only. For invoices that have already been sent, you can <a href="/docs/api/invoicing/v2/#invoices_cancel">cancel the invoice</a>. After you delete a draft or scheduled invoice, you can no longer use it or show its details. However, you can reuse its invoice number.
         */
        delete: operations["invoices.delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/invoicing/search-invoices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Search for invoices
         * @description Searches for and lists invoices that match search criteria. If you pass multiple criteria, the response lists invoices that match all criteria.
         */
        post: operations["invoices.search-invoices"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/invoicing/templates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List templates
         * @description Lists merchant-created templates with associated details. The associated details include the emails, addresses, and phone numbers from the user's PayPal profile.<br/>The user can select which values to show in the business information section of their template.
         */
        get: operations["templates.list"];
        put?: never;
        /**
         * Create template
         * @description Creates an invoice template. You can use details from this template to create an invoice. You can create up to 50 templates.<blockquote><strong>Note:</strong> Every merchant starts with three PayPal system templates that are optimized for the unit type billed. The template includes `Quantity`, `Hours`, and `Amount`.</blockquote>
         */
        post: operations["templates.create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/invoicing/templates/{template_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show template details
         * @description Shows details for a template, by ID.
         */
        get: operations["templates.get"];
        /**
         * Fully update template
         * @description Fully updates a template, by ID. In the JSON request body, include a complete `template` object. This call does not support partial updates.
         */
        put: operations["templates.update"];
        post?: never;
        /**
         * Delete template
         * @description Deletes a template, by ID.
         */
        delete: operations["templates.delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        400: {
            details?: ({
                /** @enum {string} */
                issue?: "INVALID_INTEGER_MAX_VALUE";
                /** @enum {string} */
                description?: "Value exceeds max value.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_INTEGER_MIN_VALUE";
                /** @enum {string} */
                description?: "Value less than minimum value.";
            })[];
        };
        403: {
            details?: {
                /** @enum {string} */
                issue?: "PERMISSION_DENIED";
                /** @enum {string} */
                description?: "The requested invoice is not associated with the requested user.";
            }[];
        };
        422: {
            details?: {
                /** @enum {string} */
                issue?: "USER_NOT_FOUND";
                /** @enum {string} */
                description?: "User is not associated with paypal based on invoicer email.";
            }[];
        };
        /**
         * Error Details
         * @description The error details. Required for client-side `4XX` errors.
         */
        error_details: {
            /** @description The field that caused the error. If this field is in the body, set this value to the field's JSON pointer value. Required for client-side errors. */
            field?: string;
            /** @description The value of the field that caused the error. */
            value?: string;
            /**
             * @description The location of the field that caused the error. Value is `body`, `path`, or `query`.
             * @default body
             */
            location: string;
            /** @description The unique, fine-grained application-level error code. */
            issue: string;
            /** @description The human-readable description for an issue. The description can change over the lifetime of an API, so clients must not depend on this value. */
            description?: string;
        };
        /** @description The default error response. */
        error_default: components["schemas"]["error_400"] | components["schemas"]["error_401"] | components["schemas"]["error_403"] | components["schemas"]["error_404"] | components["schemas"]["error_409"] | components["schemas"]["error_415"] | components["schemas"]["error_422"] | components["schemas"]["error_500"] | components["schemas"]["error_503"];
        /**
         * Link Description
         * @description The request-related [HATEOAS link](/api/rest/responses/#hateoas-links) information.
         */
        error_link_description: {
            /** @description The complete target URL. To make the related call, combine the method with this [URI Template-formatted](https://tools.ietf.org/html/rfc6570) link. For pre-processing, include the `$`, `(`, and `)` characters. The `href` is the key HATEOAS component that links a completed call with a subsequent call. */
            href: string;
            /** @description The [link relation type](https://tools.ietf.org/html/rfc5988#section-4), which serves as an ID for a link that unambiguously describes the semantics of the link. See [Link Relations](https://www.iana.org/assignments/link-relations/link-relations.xhtml). */
            rel: string;
            /**
             * @description The HTTP method required to make the related call.
             * @enum {string}
             */
            method?: "CONNECT" | "DELETE" | "GET" | "HEAD" | "OPTIONS" | "PATCH" | "POST" | "PUT";
        };
        /**
         * Bad Request Error
         * @description Request is not well-formed, syntactically incorrect, or violates schema.
         */
        error_400: {
            /** @enum {string} */
            name?: "INVALID_REQUEST";
            /** @enum {string} */
            message?: "Request is not well-formed, syntactically incorrect, or violates schema.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Unauthorized Error
         * @description Authentication failed due to missing Authorization header, or invalid authentication credentials.
         */
        error_401: {
            /** @enum {string} */
            name?: "AUTHENTICATION_FAILURE";
            /** @enum {string} */
            message?: "Authentication failed due to missing authorization header, or invalid authentication credentials.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Not Authorized Error
         * @description The client is not authorized to access this resource, although it may have valid credentials.
         */
        error_403: {
            /** @enum {string} */
            name?: "NOT_AUTHORIZED";
            /** @enum {string} */
            message?: "Authorization failed due to insufficient permissions.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Not found Error
         * @description The server has not found anything matching the request URI. This either means that the URI is incorrect or the resource is not available.
         */
        error_404: {
            /** @enum {string} */
            name?: "RESOURCE_NOT_FOUND";
            /** @enum {string} */
            message?: "The specified resource does not exist.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Resource Conflict Error
         * @description The server has detected a conflict while processing this request.
         */
        error_409: {
            /** @enum {string} */
            name?: "RESOURCE_CONFLICT";
            /** @enum {string} */
            message?: "The server has detected a conflict while processing this request.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Unsupported Media Type Error
         * @description The server does not support the request payload's media type.
         */
        error_415: {
            /** @enum {string} */
            name?: "UNSUPPORTED_MEDIA_TYPE";
            /** @enum {string} */
            message?: "The server does not support the request payload's media type.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Unprocessable Entity Error
         * @description The requested action cannot be performed and may require interaction with APIs or processes outside of the current request. This is distinct from a 500 response in that there are no systemic problems limiting the API from performing the request.
         */
        error_422: {
            /** @enum {string} */
            name?: "UNPROCESSABLE_ENTITY";
            /** @enum {string} */
            message?: "The requested action could not be performed, semantically incorrect, or failed business validation.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Internal Server Error
         * @description This is either a system or application error, and generally indicates that although the client appeared to provide a correct request, something unexpected has gone wrong on the server.
         * @example {
         *       "name": "INTERNAL_SERVER_ERROR",
         *       "message": "An internal server error occurred.",
         *       "debug_id": "90957fca61718",
         *       "links": [
         *         {
         *           "href": "https://developer.paypal.com/api/orders/v2/#error-INTERNAL_SERVER_ERROR",
         *           "rel": "information_link"
         *         }
         *       ]
         *     }
         */
        error_500: {
            /** @enum {string} */
            name?: "INTERNAL_SERVER_ERROR";
            /** @enum {string} */
            message?: "An internal server error occurred.";
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Service Unavailable Error
         * @description The server is temporarily unable to handle the request, for example, because of planned maintenance or downtime.
         * @example {
         *       "name": "SERVICE_UNAVAILABLE",
         *       "message": "Service Unavailable.",
         *       "debug_id": "90957fca61718",
         *       "information_link": "https://developer.paypal.com/docs/api/orders/v2/#error-SERVICE_UNAVAILABLE"
         *     }
         */
        error_503: {
            /** @enum {string} */
            name?: "SERVICE_UNAVAILABLE";
            /** @enum {string} */
            message?: "Service Unavailable.";
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Invoice Status
         * @description The status of the invoice.
         * @enum {string}
         */
        invoice_status: "DRAFT" | "SENT" | "SCHEDULED" | "PAID" | "MARKED_AS_PAID" | "CANCELLED" | "REFUNDED" | "PARTIALLY_PAID" | "PARTIALLY_REFUNDED" | "MARKED_AS_REFUNDED" | "UNPAID" | "PAYMENT_PENDING";
        /**
         * Format: ppaas_common_currency_code_v2
         * @description The [three-character ISO-4217 currency code](/docs/integration/direct/rest/currency-codes/) that identifies the currency.
         */
        currency_code: string;
        /**
         * Format: ppaas_date_time_v3
         * @description The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
         */
        date_time: string;
        /**
         * File Reference
         * @description The file reference. Can be a file in PayPal MediaServ, PayPal DMS, or other custom store.
         */
        file_reference: {
            /** @description The ID of the referenced file. */
            id?: string;
            /**
             * Format: uri
             * @description The reference URL for the file.
             */
            reference_url?: string;
            /** @description The [Internet Assigned Numbers Authority (IANA) media type of the file](https://www.iana.org/assignments/media-types/media-types.xhtml). */
            content_type?: string;
            /** @description The date and time when the file was created, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). */
            create_time?: components["schemas"]["date_time"];
            /** @description The size of the file, in bytes. */
            size?: string;
        };
        /**
         * Invoice_Detail
         * @description The details of the invoice like notes, terms and conditions, memo, attachments.
         */
        detail: {
            /** @description The reference data. Includes a post office (PO) number. */
            reference?: string;
            /** @description The [three-character ISO-4217 currency code](/docs/integration/direct/rest/currency-codes/) that identifies the currency. */
            currency_code: components["schemas"]["currency_code"];
            /** @description A note to the invoice recipient. Also appears on the invoice notification email. */
            note?: string;
            /** @description The general terms of the invoice. Can include return or cancellation policy and other terms and conditions. */
            terms_and_conditions?: string;
            /** @description A private bookkeeping memo for the user. */
            memo?: string;
            /** @description An array of PayPal IDs for the files that are attached to an invoice. */
            attachments?: components["schemas"]["file_reference"][];
        };
        /**
         * Format: ppaas_date_notime_v2
         * @description The stand-alone date, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). To represent special legal values, such as a date of birth, you should use dates with no associated time or time-zone data. Whenever possible, use the standard `date_time` type. This regular expression does not validate all dates. For example, February 31 is valid and nothing is known about leap years.
         */
        date_no_time: string;
        /**
         * Payment Term Type
         * @description The payment term. Payment can be due upon receipt, a specified date, or in a set number of days.
         * @enum {string}
         */
        payment_term_type: "DUE_ON_RECEIPT" | "DUE_ON_DATE_SPECIFIED" | "NET_10" | "NET_15" | "NET_30" | "NET_45" | "NET_60" | "NET_90" | "NO_DUE_DATE";
        /**
         * Payment Term
         * @description The payment term of the invoice. Payment can be due upon receipt, a specified date, or in a set number of days.
         */
        payment_term: {
            /** @description The payment term. Payment can be due upon receipt, a specified date, or in a set number of days. */
            term_type?: components["schemas"]["payment_term_type"];
        };
        /**
         * Invoice Payment Term
         * @description The payment term of the invoice. Payment can be due upon receipt, a specified date, or in a set number of days.
         */
        invoice_payment_term: components["schemas"]["payment_term"] & {
            /** @description The date when the invoice payment is due, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *yyyy*-*MM*-*dd*T*z*. */
            due_date?: components["schemas"]["date_no_time"];
        };
        /**
         * Template Metadata
         * @description The audit metadata. Captures all template actions on create and update.
         */
        template_metadata: {
            /** @description The date and time when the resource was created, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). */
            readonly create_time?: components["schemas"]["date_time"];
            /** @description The email address of the account that created the resource. */
            readonly created_by?: string;
            /** @description The date and time when the resource was last edited, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). */
            readonly last_update_time?: components["schemas"]["date_time"];
            /** @description The email address of the account that last edited the resource. */
            readonly last_updated_by?: string;
        };
        /**
         * Invoice Creation Flow
         * @description The frequency at which the invoice is sent:<ul><li>Multiple recipient. Sent to multiple recipients.</li><li>Batch. Sent in a batch.</li><li>Regular single. Sent one time to a single recipient.</li></ul>
         * @enum {string}
         */
        invoice_creation_flow: "MULTIPLE_RECIPIENTS_GROUP" | "BATCH" | "REGULAR_SINGLE";
        /**
         * Metadata
         * @description The audit metadata. Captures all invoicing actions on create, send, update, and cancel.
         */
        metadata: components["schemas"]["template_metadata"] & {
            /** @description The date and time when the resource was canceled, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). */
            readonly cancel_time?: components["schemas"]["date_time"];
            /** @description The actor who canceled the resource. */
            readonly cancelled_by?: string;
            /** @description The date and time when the resource was first sent, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). */
            readonly first_sent_time?: components["schemas"]["date_time"];
            /** @description The date and time when the resource was last sent, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). */
            readonly last_sent_time?: components["schemas"]["date_time"];
            /** @description The email address of the account that last sent the resource. */
            readonly last_sent_by?: string;
            /** @description The flow variation that created this invoice. */
            readonly created_by_flow?: components["schemas"]["invoice_creation_flow"];
            /**
             * Format: uri
             * @description The URL for the invoice payer view hosted on paypal.com.
             */
            readonly recipient_view_url?: string;
            /**
             * Format: uri
             * @description The URL for the invoice merchant view hosted on paypal.com.
             */
            readonly invoicer_view_url?: string;
        };
        /**
         * Invoice Detail
         * @description The details of the invoice. Includes invoice number, date, payment terms, and audit metadata.
         */
        invoice_detail: components["schemas"]["detail"] & {
            /** @description The invoice number. Default is the number that is auto-incremented number from the last number. */
            invoice_number?: string;
            /** @description The invoice date as specificed by the sender, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Only UTC is supported in response. For example, *yyyy*-*MM*-*dd*T*z*. */
            invoice_date?: components["schemas"]["date_no_time"];
            /** @description The payment due date for the invoice. Value is either but not both <code>term_type</code> or <code>due_date</code>. */
            payment_term?: components["schemas"]["invoice_payment_term"];
            /** @description The audit metadata. Captures all invoicing actions on create, send, update, and cancel. */
            readonly metadata?: components["schemas"]["metadata"];
        };
        /**
         * Business Name
         * @description The business name of the party.
         */
        business_name: {
            /** @description Required. The business name of the party. */
            business_name?: string;
        };
        /**
         * Name
         * @description The name of the party.
         */
        name: {
            /** @description The prefix, or title, to the party's name. */
            prefix?: string;
            /** @description When the party is a person, the party's given, or first, name. */
            given_name?: string;
            /** @description When the party is a person, the party's surname or family name. Also known as the last name. Required when the party is a person. Use also to store multiple surnames including the matronymic, or mother's, surname. */
            surname?: string;
            /** @description When the party is a person, the party's middle name. Use also to store multiple middle names including the patronymic, or father's, middle name. */
            middle_name?: string;
            /** @description The suffix for the party's name. */
            suffix?: string;
            /** @description DEPRECATED. The party's alternate name. Can be a business name, nickname, or any other name that cannot be split into first, last name. Required when the party is a business. */
            alternate_full_name?: string;
            /** @description When the party is a person, the party's full name. */
            full_name?: string;
        };
        /**
         * Format: ppaas_common_country_code_v2
         * @description The [two-character ISO 3166-1 code](/docs/integration/direct/rest/country-codes/) that identifies the country or region.<blockquote><strong>Note:</strong> The country code for Great Britain is <code>GB</code> and not <code>UK</code> as used in the top-level domain names for that country. Use the `C2` country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.</blockquote>
         */
        country_code: string;
        /**
         * Portable Postal Address (Medium-Grained)
         * @description The portable international postal address. Maps to [AddressValidationMetadata](https://github.com/googlei18n/libaddressinput/wiki/AddressValidationMetadata) and HTML 5.1 [Autofilling form controls: the autocomplete attribute](https://www.w3.org/TR/html51/sec-forms.html#autofilling-form-controls-the-autocomplete-attribute).
         */
        address_portable: {
            /** @description The first line of the address. For example, number or street. For example, `173 Drury Lane`. Required for data entry and compliance and risk checks. Must contain the full address. */
            address_line_1?: string;
            /** @description The second line of the address. For example, suite or apartment number. */
            address_line_2?: string;
            /** @description The third line of the address, if needed. For example, a street complement for Brazil, direction text, such as `next to Walmart`, or a landmark in an Indian address. */
            address_line_3?: string;
            /** @description The neighborhood, ward, or district. Smaller than `admin_area_level_3` or `sub_locality`. Value is:<ul><li>The postal sorting code for Guernsey and many French territories, such as French Guiana.</li><li>The fine-grained administrative levels in China.</li></ul> */
            admin_area_4?: string;
            /** @description A sub-locality, suburb, neighborhood, or district. Smaller than `admin_area_level_2`. Value is:<ul><li>Brazil. Suburb, bairro, or neighborhood.</li><li>India. Sub-locality or district. Street name information is not always available but a sub-locality or district can be a very small area.</li></ul> */
            admin_area_3?: string;
            /** @description A city, town, or village. Smaller than `admin_area_level_1`. */
            admin_area_2?: string;
            /** @description The highest level sub-division in a country, which is usually a province, state, or ISO-3166-2 subdivision. Format for postal delivery. For example, `CA` and not `California`. Value, by country, is:<ul><li>UK. A county.</li><li>US. A state.</li><li>Canada. A province.</li><li>Japan. A prefecture.</li><li>Switzerland. A kanton.</li></ul> */
            admin_area_1?: string;
            /** @description The postal code, which is the zip code or equivalent. Typically required for countries with a postal code or an equivalent. See [postal code](https://en.wikipedia.org/wiki/Postal_code). */
            postal_code?: string;
            country_code: components["schemas"]["country_code"];
            /**
             * Address Details
             * @description The non-portable additional address details that are sometimes needed for compliance, risk, or other scenarios where fine-grain address information might be needed. Not portable with common third party and open source. Redundant with core fields.<br/>For example, `address_portable.address_line_1` is usually a combination of `address_details.street_number`, `street_name`, and `street_type`.
             */
            address_details?: {
                /** @description The street number. */
                street_number?: string;
                /** @description The street name. Just `Drury` in `Drury Lane`. */
                street_name?: string;
                /** @description The street type. For example, avenue, boulevard, road, or expressway. */
                street_type?: string;
                /** @description The delivery service. Post office box, bag number, or post office name. */
                delivery_service?: string;
                /** @description A named locations that represents the premise. Usually a building name or number or collection of buildings with a common name or number. For example, <code>Craven House</code>. */
                building_name?: string;
                /** @description The first-order entity below a named building or location that represents the sub-premise. Usually a single building within a collection of buildings with a common name. Can be a flat, story, floor, room, or apartment. */
                sub_building?: string;
            };
        };
        /**
         * Contact Information
         * @description The contact information of the user. Includes name and address.
         */
        contact_name_address: components["schemas"]["business_name"] & {
            /** @description The first and Last name of the recipient. */
            name?: components["schemas"]["name"];
            /** @description The address of the recipient. */
            address?: components["schemas"]["address_portable"];
        };
        /**
         * Format: ppaas_common_email_address_v2
         * @description The internationalized email address.<blockquote><strong>Note:</strong> Up to 64 characters are allowed before and 255 characters are allowed after the <code>@</code> sign. However, the generally accepted maximum length for an email address is 254 characters. The pattern verifies that an unquoted <code>@</code> sign exists.</blockquote>
         */
        email_address: string;
        /**
         * Phone
         * @description The phone number, in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en).
         */
        phone: {
            /** @description The country calling code (CC), in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en). The combined length of the CC and the national number must not be greater than 15 digits. The national number consists of a national destination code (NDC) and subscriber number (SN). */
            country_code: string;
            /** @description The national number, in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en). The combined length of the country calling code (CC) and the national number must not be greater than 15 digits. The national number consists of a national destination code (NDC) and subscriber number (SN). */
            national_number: string;
            /** @description The extension number. */
            extension_number?: string;
        };
        /**
         * Phone Type
         * @description The phone type.
         * @enum {string}
         */
        phone_type: "FAX" | "HOME" | "MOBILE" | "OTHER" | "PAGER";
        /**
         * Phone Detail
         * @description The phone details. Includes the phone number and type.
         */
        phone_detail: components["schemas"]["phone"] & {
            phone_type: components["schemas"]["phone_type"];
        };
        /**
         * Invoicer Information
         * @description The invoicer business information that appears on the invoice.
         */
        invoicer_info: components["schemas"]["contact_name_address"] & {
            /** @description The invoicer email address, which must be listed in the user's PayPal profile. If you omit this value, notifications are sent from and to the primary email address but do not appear on the invoice. */
            email_address?: components["schemas"]["email_address"];
            /** @description An array of invoicer's phone numbers. The invoicer can choose to hide the phone number on the invoice. */
            phones?: components["schemas"]["phone_detail"][];
            /**
             * Format: uri
             * @description The invoicer's website.
             */
            website?: string;
            /** @description The invoicer's tax ID. */
            tax_id?: string;
            /** @description Any additional information. Includes business hours. */
            additional_notes?: string;
            /**
             * Format: uri
             * @description The full URL to an external logo image. The logo image must not be larger than 250 pixels wide by 90 pixels high.
             */
            logo_url?: string;
        };
        /**
         * Format: ppaas_common_language_v3
         * @description The [language tag](https://tools.ietf.org/html/bcp47#section-2) for the language in which to localize the error-related strings, such as messages, issues, and suggested actions. The tag is made up of the [ISO 639-2 language code](https://www.loc.gov/standards/iso639-2/php/code_list.php), the optional [ISO-15924 script tag](https://www.unicode.org/iso15924/codelists.html), and the [ISO-3166 alpha-2 country code](/docs/integration/direct/rest/country-codes/).
         */
        language: string;
        /**
         * Billing Information
         * @description The billing information of the invoice recipient. Includes name, address, email, phone, and language.
         */
        billing_info: components["schemas"]["contact_name_address"] & {
            /** @description The invoice recipient email address. If you omit this value, the invoice is payable and a notification email is not sent. */
            email_address?: components["schemas"]["email_address"];
            /** @description The invoice recipient's phone numbers. Extension number is not supported. */
            phones?: components["schemas"]["phone_detail"][];
            /** @description Any additional information about the recipient. */
            additional_info?: string;
            /** @description The language in which to show the invoice recipient's email message. Used only when the recipient does not have a PayPal account. If you omit the language and the recipient does not have a PayPal account, the email message is sent in the language of the merchant's PayPal account. */
            language?: components["schemas"]["language"];
        };
        /**
         * Recipient Information
         * @description The billing and shipping information. Includes name, email, address, phone, and language.
         */
        recipient_info: {
            /** @description The billing information for the invoice recipient. Includes name, address, email, phone, and language. */
            billing_info?: components["schemas"]["billing_info"];
            /** @description The recipient's shipping information. Includes the user's contact information, which includes name and address. */
            shipping_info?: components["schemas"]["contact_name_address"];
        };
        /**
         * Money
         * @description The currency and amount for a financial transaction, such as a balance or payment due.
         */
        money: {
            currency_code: components["schemas"]["currency_code"];
            /** @description The value, which might be:<ul><li>An integer for currencies like `JPY` that are not typically fractional.</li><li>A decimal fraction for currencies like `TND` that are subdivided into thousandths.</li></ul>For the required number of decimal places for a currency code, see [Currency Codes](/docs/integration/direct/rest/currency-codes/). */
            value: string;
        };
        /**
         * Format: ppaas_common_percentage_v2
         * @description The percentage, as a fixed-point, signed decimal number. For example, define a 19.99% interest rate as `19.99`.
         */
        percentage: string;
        /**
         * Tax
         * @description The tax information. Includes the tax name and tax rate of invoice items. The tax amount is added to the item total.
         */
        tax: {
            /** @description The name of the tax applied on the invoice items. */
            name: string;
            /** @description The tax rate. Value is from `0` to `100`. Supports up to five decimal places. */
            percent: components["schemas"]["percentage"];
            /** @description The calculated tax amount. The tax amount is added to the item total. */
            readonly amount?: components["schemas"]["money"];
        };
        /**
         * Discount
         * @description The discount as a percent or amount at invoice level. The invoice discount amount is subtracted from the item total.
         */
        discount: {
            /** @description The discount as a percentage value. Value is from `0` to `100`. Supports up to five decimal places. */
            percent?: components["schemas"]["percentage"];
            /** @description The invoice level discount amount. Value is from `0` to `1000000`. Supports up to two decimal places. */
            amount?: components["schemas"]["money"];
        };
        /**
         * @description The unit of measure for the invoiced item.
         * @enum {string}
         */
        unit_of_measure: "QUANTITY" | "HOURS" | "AMOUNT";
        /**
         * Invoice Item
         * @description An array of invoice line item information. The maximum items for an invoice is `100`.
         */
        item: {
            /** @description The ID of the invoice line item. */
            readonly id?: string;
            /** @description The item name for the invoice line item. */
            name: string;
            /** @description The item description for the invoice line item. */
            description?: string;
            /** @description The quantity of the item that the invoicer provides to the payer. Value is from `-1000000` to `1000000`. Supports up to five decimal places. */
            quantity: string;
            /** @description The unit price of the item. This does not include tax and discount. Value is from `-1000000` to `1000000`. Supports up to two decimal places. */
            unit_amount: components["schemas"]["money"];
            /** @description The tax associated with the item. The tax amount is added to the item total. Value is from `0` to `100`. Supports up to five decimal places. */
            tax?: components["schemas"]["tax"];
            /** @description The date when the item or service was provided, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *yyyy*-*MM*-*dd*T*z*. */
            item_date?: components["schemas"]["date_no_time"];
            /** @description Discount as a percent or amount at invoice level. The invoice discount amount is subtracted from the item total. */
            discount?: components["schemas"]["discount"];
            /** @description The unit of measure for the invoiced item. For `AMOUNT` the `unit_amount` and `quantity` are not shown on the invoice.<blockquote><strong>Note:</strong> If your specify different `unit_of_measure` values for the same invoice, the invoice uses the first value.</blockquote> */
            unit_of_measure?: components["schemas"]["unit_of_measure"];
        };
        /**
         * Partial Payment
         * @description The partial payment details. Includes the minimum amount that the invoicer expects from the payer.
         */
        partial_payment: {
            /**
             * @description Indicates whether the invoice allows a partial payment. If `false`, the invoice must be paid in full. If `true`, the invoice allows partial payments.<blockquote><strong>Note:</strong> This feature is not available for users in `India`, `Brazil`, or `Israel`.</blockquote>
             * @default false
             */
            allow_partial_payment: boolean;
            /** @description The minimum amount allowed for a partial payment. Valid only when `allow_partial_payment` is `true`. */
            minimum_amount_due?: components["schemas"]["money"];
        };
        /**
         * Template Configuration
         * @description The template configuration details. Includes tax information, tip, and partial payment.
         */
        template_configuration: {
            /**
             * @description Indicates whether the tax is calculated before or after a discount. If `false`, the tax is calculated before a discount. If `true`, the tax is calculated after a discount.
             * @default true
             */
            tax_calculated_after_discount: boolean;
            /**
             * @description Indicates whether the unit price includes tax.
             * @default false
             */
            tax_inclusive: boolean;
            /**
             * @description Indicates whether the invoice enables the customer to enter a tip amount during payment. If `true`, the invoice shows a tip amount field so that the customer can enter a tip amount. If `false`, the invoice does not show a tip amount field.<blockquote><strong>Note:</strong> This feature is not available for users in `Hong Kong`, `Taiwan`, `India`, or `Japan`.</blockquote>
             * @default false
             */
            allow_tip: boolean;
            /** @description The partial payment details. Includes the minimum amount that the invoicer wants the payer to pay. */
            partial_payment?: components["schemas"]["partial_payment"];
        };
        /**
         * Configuration
         * @description The invoice configuration details. Includes partial payment, tip, and tax calculated after discount.
         */
        configuration: components["schemas"]["template_configuration"] & {
            /**
             * @description The template ID. The template determines the layout of the invoice. Includes which fields to show and hide.
             * @default PayPal system template
             */
            template_id: string;
        };
        /**
         * Aggregated Discount
         * @description The discount. Can be an item- or invoice-level discount, or both. Can be applied as a percent or amount. If you provide both amount and percent, amount takes precedent.
         */
        aggregated_discount: {
            /** @description The discount as a percent or amount at invoice level. The invoice discount amount is subtracted from the item total. */
            invoice_discount?: components["schemas"]["discount"];
            /** @description The discount as a percent or amount at item level. The item discount amount is subtracted from each item amount. */
            item_discount?: components["schemas"]["money"];
        };
        /**
         * Shipping Cost
         * @description The shipping fee for all items. Includes tax on shipping.
         */
        shipping_cost: {
            /** @description The shipping amount. Value is from `0` to `1000000`. Supports up to two decimal places. */
            amount?: components["schemas"]["money"];
            /** @description The tax associated with the shipping. */
            tax?: components["schemas"]["tax"];
        };
        /**
         * Custom Amount
         * @description The custom amount to apply to an invoice. If you include a label, you must include a custom amount.
         */
        custom_amount: {
            /** @description The label to the custom amount of the invoice. */
            label: string;
            /** @description The custom amount value. Value is from `-1000000` to `1000000`. Supports up to two decimal places. */
            amount?: components["schemas"]["money"];
        };
        /**
         * Amount with Breakdown
         * @description The breakdown of the amount. Includes total item amount, total tax amount, custom amount, and shipping and discounts, if any.
         */
        amount_with_breakdown: {
            /** @description The subtotal for all items. Must equal the sum of (`items[].unit_amount` * `items[].quantity`) for all items. */
            item_total?: components["schemas"]["money"];
            /** @description The discount can be at the item or invoice level, or both. Can be applied as a percent or amount. If you provide both amount and percent, amount takes precedent. */
            discount?: components["schemas"]["aggregated_discount"];
            /** @description The aggregated amount of the item and shipping taxes. */
            tax_total?: components["schemas"]["money"];
            /** @description The shipping fee for all items. Includes tax on shipping. */
            shipping?: components["schemas"]["shipping_cost"];
            /** @description The custom amount to apply to an invoice. If you include a label, you must include the custom amount. */
            custom?: components["schemas"]["custom_amount"];
        };
        /**
         * Invoice Amount Summary
         * @description The invoice amount summary of item total, discount, tax total, and shipping.
         */
        amount_summary_detail: {
            currency_code?: components["schemas"]["currency_code"];
            /** @description The value, which might be:<ul><li>An integer for currencies like `JPY` that are not typically fractional.</li><li>A decimal fraction for currencies like `TND` that are subdivided into thousandths.</li></ul>For the required number of decimal places for a currency code, see [Currency Codes](/docs/integration/direct/rest/currency-codes/). */
            value?: string;
            /** @description The breakdown of the amount. Breakdown provides details such as total item amount, total tax amount, custom amount, shipping and discounts, if any. */
            breakdown?: components["schemas"]["amount_with_breakdown"];
        };
        /**
         * Payment Type
         * @description The payment type. Can be PayPal or an external payment. Includes cash or a check.
         * @enum {string}
         */
        payment_type: "PAYPAL" | "EXTERNAL";
        /**
         * Payment Method
         * @description The payment mode or method through which the invoicer can accept the payments.
         * @enum {string}
         */
        payment_method: "BANK_TRANSFER" | "CASH" | "CHECK" | "CREDIT_CARD" | "DEBIT_CARD" | "PAYPAL" | "WIRE_TRANSFER" | "OTHER";
        /**
         * Payment Detail
         * @description The payment details of the invoice. Includes payment type, method, date, discount, and transaction type.
         */
        payment_detail: {
            /** @description The payment type in an invoicing flow which can be PayPal or an external cash or check payment. */
            readonly type?: components["schemas"]["payment_type"];
            /** @description The ID for a PayPal payment transaction. Required for the `PAYPAL` payment type. */
            payment_id?: string;
            /** @description The date when the invoice was paid, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *yyyy*-*MM*-*dd* *z*. */
            payment_date?: components["schemas"]["date_no_time"];
            /** @description The payment mode or method through which the invoicer can accept the payment. */
            method: components["schemas"]["payment_method"];
            /** @description A note associated with an external cash or check payment. */
            note?: string;
            /** @description The payment amount to record against the invoice. If you omit this parameter, the total invoice amount is marked as paid. This amount cannot exceed the amount due. */
            amount?: components["schemas"]["money"];
            /** @description The recipient's shipping information. Includes the user's contact information, which includes name and address. */
            shipping_info?: components["schemas"]["contact_name_address"];
        };
        /**
         * Payments
         * @description An array of payments registered against the invoice.
         */
        payments: {
            /** @description The aggregated payment amounts against this invoice. */
            readonly paid_amount?: components["schemas"]["money"];
            /** @description An array of payment details for the invoice. The payment details of the invoice like payment type, method, date, discount and transaction type. */
            readonly transactions?: components["schemas"]["payment_detail"][];
        };
        /**
         * Refund Detail
         * @description The refund details of the invoice. Includes the refund type, date, amount, and method.
         */
        refund_detail: {
            /** @description The PayPal refund type. Indicates whether the refund was paid through PayPal or externally in the invoicing flow. The record refund method supports the `EXTERNAL` refund type. The `PAYPAL` refund type is supported for backward compatibility. */
            readonly type?: components["schemas"]["payment_type"];
            /** @description The ID for a PayPal payment transaction. Required for the `PAYPAL` payment type. */
            readonly refund_id?: string;
            /** @description The date when the invoice was refunded, in [Internet date format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, `2014-02-27`. */
            refund_date?: components["schemas"]["date_no_time"];
            /** @description The amount to record as refunded. If you omit the amount, the total invoice paid amount is recorded as refunded. */
            amount?: components["schemas"]["money"];
            /** @description The payment mode or method through which the invoicer can accept the payments. */
            method: components["schemas"]["payment_method"];
        };
        /**
         * Refunds
         * @description The invoicing refund details. Includes the refund type, date, amount, and method.
         */
        refunds: {
            /** @description The aggregated refund amounts. */
            readonly refund_amount?: components["schemas"]["money"];
            /** @description An array of refund details for the invoice. Includes the refund type, date, amount, and method. */
            readonly transactions?: components["schemas"]["refund_detail"][];
        };
        /**
         * Link Description
         * @description The request-related [HATEOAS link](/docs/api/reference/api-responses/#hateoas-links) information.
         */
        link_description: {
            /** @description The complete target URL. To make the related call, combine the method with this [URI Template-formatted](https://tools.ietf.org/html/rfc6570) link. For pre-processing, include the `$`, `(`, and `)` characters. The `href` is the key HATEOAS component that links a completed call with a subsequent call. */
            href: string;
            /** @description The [link relation type](https://tools.ietf.org/html/rfc5988#section-4), which serves as an ID for a link that unambiguously describes the semantics of the link. See [Link Relations](https://www.iana.org/assignments/link-relations/link-relations.xhtml). */
            rel: string;
            /**
             * @description The HTTP method required to make the related call.
             * @enum {string}
             */
            method?: "GET" | "POST" | "PUT" | "DELETE" | "HEAD" | "CONNECT" | "OPTIONS" | "PATCH";
        };
        /**
         * Invoice
         * @description The invoice details which includes all information of the invoice like items, billing information.
         */
        invoice: {
            /** @description The ID of the invoice. */
            readonly id?: string;
            /** @description The parent ID to an invoice that defines the group invoice to which the invoice is related. */
            readonly parent_id?: string;
            readonly status?: components["schemas"]["invoice_status"];
            /** @description The details of the invoice. Includes the invoice number, date, payment terms, and audit metadata. */
            detail: components["schemas"]["invoice_detail"];
            /** @description The invoicer information. Includes the business name, email, address, phone, fax, tax ID, additional notes, and logo URL. */
            invoicer?: components["schemas"]["invoicer_info"];
            /** @description The billing and shipping information. Includes name, email, address, phone and language. */
            primary_recipients?: components["schemas"]["recipient_info"][];
            /** @description An array of one or more CC: emails to which notifications are sent. If you omit this parameter, a notification is sent to all CC: email addresses that are part of the invoice.<blockquote><strong>Note:</strong> Valid values are email addresses in the `additional_recipients` value associated with the invoice.</blockquote> */
            additional_recipients?: components["schemas"]["email_address"][];
            /** @description An array of invoice line item information. */
            items?: components["schemas"]["item"][];
            /** @description The invoice configuration details. Includes partial payment, tip, and tax calculated after discount. */
            configuration?: components["schemas"]["configuration"];
            /** @description The invoice amount summary of item total, discount, tax total and shipping.. */
            amount?: components["schemas"]["amount_summary_detail"];
            /** @description The due amount, which is the balance amount outstanding after payments. */
            readonly due_amount?: components["schemas"]["money"];
            /** @description The amount paid by the payer as gratuity to the invoicer. */
            readonly gratuity?: components["schemas"]["money"];
            /** @description List of payments registered against the invoice.. */
            payments?: components["schemas"]["payments"];
            /** @description List of refunds against this invoice. The invoicing refund details includes refund type, date, amount, and method. */
            refunds?: components["schemas"]["refunds"];
            /** @description An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links). */
            readonly links?: components["schemas"]["link_description"][];
        };
        /**
         * Invoices
         * @description An array of merchant invoices. Includes the total invoices count and [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links) for navigation.
         */
        invoices: {
            /** @description The total number of pages that are available for the search criteria. <blockquote><strong>Note:</strong> Clients MUST NOT assume that the value of total_pages is constant. The value MAY change from one request to the next</blockquote> */
            readonly total_pages?: number;
            /** @description The total number of invoices that match the search criteria.<blockquote><strong>Note:</strong> Clients MUST NOT assume that the value of <code>total_items</code> is constant. The value MAY change from one request to the next.</blockquote> */
            readonly total_items?: number;
            /** @description The list of invoices that match the search criteria. */
            readonly items?: components["schemas"]["invoice"][];
            /** @description An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links). */
            readonly links?: components["schemas"]["link_description"][];
        };
        "invoices.create-400": {
            details?: ({
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Address line2 length should be less than 300 characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_LENGTH";
                /** @enum {string} */
                description?: "National Number length should be between 1 and 14.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Address line1 length should be less than 300 characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_PARAMETER_SYNTAX";
                /** @enum {string} */
                description?: "Country code is invalid.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Custom label length should be less than 50 characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Given name length should be less than 140 characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_LENGTH";
                /** @enum {string} */
                description?: "Language is invalid.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Admin area1 length should be less than 300 characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_LENGTH";
                /** @enum {string} */
                description?: "Item quantity length should be 1 and 14.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Surname length should be less than 140 characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_LENGTH";
                /** @enum {string} */
                description?: "Attachment reference url length should be between 1 and 2000.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_LENGTH";
                /** @enum {string} */
                description?: "Country code length should be 2 characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_LENGTH";
                /** @enum {string} */
                description?: "Currency code length should be 3 characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Business name length should be less than 300 characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Minimum due amount length should be less than 32 characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_LENGTH";
                /** @enum {string} */
                description?: "Attachment id length should be between 1 and 255.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Admin area2 length should be less than 300 characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Tax name length should be less than 100.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Website url length should be less than 2048 characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Postal code length should be less than 60 characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_PARAMETER_SYNTAX";
                /** @enum {string} */
                description?: "National Number is not valid.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Memo length should be less than 4000 characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Item name length should be less than 200 characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_LENGTH";
                /** @enum {string} */
                description?: "country code length should be between 1 and 3.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Template Id length should be less than 22 characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Logo url length should be less than 4000 characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Invoice note length should be less than 4000 characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Reference field length should be less than 120 characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_PARAMETER_SYNTAX";
                /** @enum {string} */
                description?: "Due date is invalid.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Terms and Conditions length should be less than 4000 characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_LENGTH";
                /** @enum {string} */
                description?: "Email address length should be between 3 and 254.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Additional data length should be less than 4000.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Additional information value length should be less than 40 characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Tax id length should be less than 100 characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_PARAMETER_SYNTAX";
                /** @enum {string} */
                description?: "Invoice date is invalid.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_LENGTH";
                /** @enum {string} */
                description?: "Invoice date is invalid.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Invoice number length should be less than 25 characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_PARAMETER_SYNTAX";
                /** @enum {string} */
                description?: "Item Date is invalid.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Item description length should be less than 1000 characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Shipping Tax name length should be less than 100 characters.";
            })[];
        };
        /**
         * Notification
         * @description The email or SMS notification to send to the invoicer or payer on sending an invoice.
         */
        notification: {
            /** @description The subject of the email that is sent as a notification to the recipient. */
            subject?: string;
            /** @description A note to the payer. */
            note?: string;
            /**
             * @description Indicates whether to send a copy of the email to the merchant.
             * @default false
             */
            send_to_invoicer: boolean;
            /**
             * @description Indicates whether to send a copy of the email to the recipient.
             * @default true
             */
            send_to_recipient: boolean;
            /** @description An array of one or more CC: emails to which notifications are sent. If you omit this parameter, a notification is sent to all CC: email addresses that are part of the invoice.<blockquote><strong>Note:</strong> Valid values are email addresses in the `additional_recipients` value associated with the invoice.</blockquote> */
            additional_recipients?: components["schemas"]["email_address"][];
        };
        /**
         * Accepted Response
         * @description The HTTP `202 Accepted` response.
         */
        "202-response": {
            /** @description An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links). */
            readonly links?: components["schemas"]["link_description"][];
        };
        "invoices.remind-400": {
            details?: ({
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "the value of a field is too long.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_ARRAY_MAX_ITEMS";
                /** @enum {string} */
                description?: "Only maximum of 100 email address is supported in additional recipients.";
            })[];
        };
        "invoices.remind-422": {
            details?: {
                /** @enum {string} */
                issue?: "CANNOT_REMIND_INVOICE";
                /** @enum {string} */
                description?: "You cannot remind an invoice which is in DRAFT status. Only UNPAID, SENT and PARTIALLY_PAID invoices can be reminded.";
            }[];
        };
        "invoices.cancel-400": {
            details?: ({
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Field value exceeded the maximum allowed number of characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_ARRAY_MAX_ITEMS";
                /** @enum {string} */
                description?: "Only maximum of 100 email address is supported in additional recipients.";
            })[];
        };
        "invoices.cancel-422": {
            details?: ({
                /** @enum {string} */
                issue?: "CANNOT_CANCEL_DRAFT_INVOICE";
                /** @enum {string} */
                description?: "Draft invoice cannot be canceled.";
            } | {
                /** @enum {string} */
                issue?: "CANNOT_CANCEL_PAID_INVOICE";
                /** @enum {string} */
                description?: "Cannot cancel a paid or partially paid invoice.";
            } | {
                /** @enum {string} */
                issue?: "CANNOT_CANCEL_REFUNDED_INVOICE";
                /** @enum {string} */
                description?: "Cannot cancel a refunded or partially refunded invoice.";
            } | {
                /** @enum {string} */
                issue?: "CANNOT_CANCEL_SCHEDULED_INVOICE";
                /** @enum {string} */
                description?: "Cannot cancel a scheduled invoice.";
            } | {
                /** @enum {string} */
                issue?: "INVOICE_CANCELED_ALREADY";
                /** @enum {string} */
                description?: "Invoice is already cancelled.";
            })[];
        };
        /**
         * Payment Reference
         * @description The reference to the payment detail.
         */
        payment_reference: {
            /** @description The ID for the invoice payment. */
            readonly payment_id?: string;
        };
        "invoices.payments-400": {
            details?: ({
                /** @enum {string} */
                issue?: "MISSING_REQUIRED_PARAMETER";
                /** @enum {string} */
                description?: "Payment method is missing. Please provide a valid payment method.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_PAYMENT_METHOD";
                /** @enum {string} */
                description?: "The value provided is not an acceptable method of payment.";
            } | {
                /** @enum {string} */
                issue?: "NOT_SUPPORTED";
                /** @enum {string} */
                description?: "Currency code is not supported.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_LENGTH";
                /** @enum {string} */
                description?: "Currency code length should be 3 characters.";
            } | {
                /** @enum {string} */
                issue?: "MISSING_REQUIRED_PARAMETER";
                /** @enum {string} */
                description?: "Amount value is missing. Please provide a valid amount.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Amount value cannot be greater than the maximum limit of 32 characters length.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_PARAMETER_SYNTAX";
                /** @enum {string} */
                description?: "Amount value is invalid. Should be a numeric value.";
            } | {
                /** @enum {string} */
                issue?: "VALUE_CANNOT_BE_ZERO";
                /** @enum {string} */
                description?: "Payment amount cannot be zero. Please provide a valid amount.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_DECIMAL_VALUE";
                /** @enum {string} */
                description?: "Payment amount value is invalid. Can have non-negative value with maximum 7 digits and upto 2 fractions.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_INTEGER_VALUE";
                /** @enum {string} */
                description?: "Payment amount value is invalid. Can have non-negative value with maximum 6 digits.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_PARAMETER_SYNTAX";
                /** @enum {string} */
                description?: "Date should be of format yyyy-mm-dd.";
            })[];
        };
        "invoices.payments-422": {
            details?: ({
                /** @enum {string} */
                issue?: "PAYMENT_AMOUNT_GREATER_THAN_AMOUNT_DUE";
                /** @enum {string} */
                description?: "Payment amount is greater than the amount due.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_INVOICE_TYPE";
                /** @enum {string} */
                description?: "The invoice type is not valid for paying an invoice.";
            } | {
                /** @enum {string} */
                issue?: "CANNOT_PROCESS_PAYMENTS";
                /** @enum {string} */
                description?: "Current invoice state does not support payment processing.";
            })[];
        };
        "invoices.payments-delete-422": {
            details?: {
                /** @enum {string} */
                issue?: "CANNOT_DELETE_EXTERNAL_PAYMENT";
                /** @enum {string} */
                description?: "The external payment cannot be deleted as the recorded refund cannot exceed the recored payment for an invoice.";
            }[];
        };
        /**
         * Refund Payment Reference
         * @description The reference to the refund payment detail.
         */
        refund_reference: {
            /** @description The ID of the refund of an invoice payment. */
            readonly refund_id?: string;
        };
        "invoices.refunds-400": {
            details?: ({
                /** @enum {string} */
                issue?: "MISSING_REQUIRED_PARAMETER";
                /** @enum {string} */
                description?: "Payment method is missing. Please provide a valid payment method.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_REFUND_METHOD";
                /** @enum {string} */
                description?: "The value provided is not an acceptable method of refund.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_PARAMETER_SYNTAX";
                /** @enum {string} */
                description?: "The value provided is not an acceptable method of refund.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_LENGTH";
                /** @enum {string} */
                description?: "Currency code length should be 3 characters.";
            } | {
                /** @enum {string} */
                issue?: "NOT_SUPPORTED";
                /** @enum {string} */
                description?: "Currency code is not supported. Please provide a valid currency code.";
            } | {
                /** @enum {string} */
                issue?: "MISSING_REQUIRED_PARAMETER";
                /** @enum {string} */
                description?: "Amount value is missing. Please provide a valid amount.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_PARAMETER_SYNTAX";
                /** @enum {string} */
                description?: "Amount value is invalid. Should be a numeric value.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Amount value cannot be greater than the maximum limit of 32 characters length.";
            } | {
                /** @enum {string} */
                issue?: "VALUE_CANNOT_BE_ZERO";
                /** @enum {string} */
                description?: "Refund amount cannot be zero.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_INTEGER_VALUE";
                /** @enum {string} */
                description?: "Refund amount value is invalid. Can have non-negative value with maximum 6 digits.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_DECIMAL_VALUE";
                /** @enum {string} */
                description?: "Refund amount value is invalid. Can have non-negative value with maximum 7 digits and upto 2 fractions.";
            })[];
        };
        "invoices.refunds-422": {
            details?: ({
                /** @enum {string} */
                issue?: "INVALID_REFUND_AMOUNT";
                /** @enum {string} */
                description?: "Recorded refunds cannot exceed recorded payments.";
            } | {
                /** @enum {string} */
                issue?: "CANNOT_PROCESS_REFUNDS";
                /** @enum {string} */
                description?: "Current invoice state does not support refunds.";
            })[];
        };
        /**
         * QR Configuration
         * @description The configuration for a QR code.
         */
        qr_config: {
            /**
             * @description The width, in pixels, of the QR code image. Value is from `150` to `500`.
             * @default 500
             */
            width: number;
            /**
             * @description The height, in pixels, of the QR code image. Value is from `150` to `500`.
             * @default 500
             */
            height: number;
            /**
             * @description The type of URL for which to generate a QR code. Valid values are `pay` and `details`.
             * @default pay
             */
            action: string;
        };
        "invoices.generate-qr-code-400": {
            details?: ({
                /** @enum {string} */
                issue?: "INVALID_INTEGER_MAX_VALUE";
                /** @enum {string} */
                description?: "Value exceeds max value.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_INTEGER_MIN_VALUE";
                /** @enum {string} */
                description?: "Value less than minimum value.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_PARAMETER_SYNTAX";
                /** @enum {string} */
                description?: "Value of the field does not conform to the expected format.";
            })[];
        };
        /**
         * Invoice Number
         * @description The invoice number.
         */
        invoice_number: {
            /** @description The invoice number. If you omit this value, the default is the auto-incremented number from the last number. */
            readonly invoice_number?: string;
        };
        "invoices.update-400": {
            details?: ({
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Address line2 length should be less than 300 characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_LENGTH";
                /** @enum {string} */
                description?: "National Number length should be between 1 and 14.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Address line1 length should be less than 300 characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_PARAMETER_SYNTAX";
                /** @enum {string} */
                description?: "Country code is invalid.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Custom label length should be less than 50 characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Given name length should be less than 140 characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_LENGTH";
                /** @enum {string} */
                description?: "Language is invalid.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Admin area1 length should be less than 300 characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_LENGTH";
                /** @enum {string} */
                description?: "Item quantity length should be 1 and 14.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Surname length should be less than 140 characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_LENGTH";
                /** @enum {string} */
                description?: "Attachment reference url length should be between 1 and 2000.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_LENGTH";
                /** @enum {string} */
                description?: "Country code length should be 2 characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_LENGTH";
                /** @enum {string} */
                description?: "Currency code length should be 3 characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Business name length should be less than 300 characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Minimum due amount length should be less than 32 characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_LENGTH";
                /** @enum {string} */
                description?: "Attachment id length should be between 1 and 255.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Admin area2 length should be less than 300 characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Tax name length should be less than 100.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Website url length should be less than 2048 characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Postal code length should be less than 60 characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_PARAMETER_SYNTAX";
                /** @enum {string} */
                description?: "National Number is not valid.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Memo length should be less than 4000 characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Item name length should be less than 200 characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_LENGTH";
                /** @enum {string} */
                description?: "country code length should be between 1 and 3.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Template Id length should be less than 22 characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Logo url length should be less than 4000 characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Invoice note length should be less than 4000 characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Reference field length should be less than 120 characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_PARAMETER_SYNTAX";
                /** @enum {string} */
                description?: "Due date is invalid.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Terms and Conditions length should be less than 4000 characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_LENGTH";
                /** @enum {string} */
                description?: "Email address length should be between 3 and 254.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Additional data length should be less than 4000.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Additional information value length should be less than 40 characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Tax id length should be less than 100 characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_PARAMETER_SYNTAX";
                /** @enum {string} */
                description?: "Invoice date is invalid.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_LENGTH";
                /** @enum {string} */
                description?: "Invoice date is invalid.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Invoice number length should be less than 25 characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_PARAMETER_SYNTAX";
                /** @enum {string} */
                description?: "Item Date is invalid.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Item description length should be less than 1000 characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Shipping Tax name length should be less than 100 characters.";
            })[];
        };
        /**
         * Amount Range
         * @description The amount range.
         */
        amount_range: {
            /** @description The lower limit of the amount range. */
            lower_amount: components["schemas"]["money"];
            /** @description The upper limit of the amount range. */
            upper_amount: components["schemas"]["money"];
        };
        /**
         * Date Range
         * @description The date range. Filters invoices by creation date, invoice date, due date, and payment date.
         */
        date_range: {
            /** @description The start date of the range. Filters invoices by creation date, invoice date, due date, and payment date. */
            start: components["schemas"]["date_no_time"];
            /** @description The end date of the range. Filters invoices by creation date, invoice date, due date, and payment date. */
            end: components["schemas"]["date_no_time"];
        };
        /**
         * Date and Time Range
         * @description The date and time range. Filters invoices by creation date, invoice date, due date, and payment date.
         */
        date_time_range: {
            /** @description The start date of the range. Filters invoices by creation date, invoice date, due date, and payment date. */
            start: components["schemas"]["date_time"];
            /** @description The end date of the range. Filters invoices by creation date, invoice date, due date, and payment date. <blockquote><strong>Note: The regular expression provides guidance but does not reject all invalid dates.</strong></blockquote><br/>Minimum length: 20.<br/>Maximum length: 64<br/>Pattern: <code>^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])[T,t]([0-1][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)([.][0-9]+)?([Zz]|[+-][0-9]{2}:[0-9]{2})$</code> */
            end: components["schemas"]["date_time"];
        };
        /**
         * Search Data
         * @description The invoice search parameters.
         */
        search_data: {
            /** @description Filters the search by the email address. */
            recipient_email?: string;
            /** @description Filters the search by the recipient first name. */
            recipient_first_name?: string;
            /** @description Filters the search by the recipient last name. */
            recipient_last_name?: string;
            /** @description Filters the search by the recipient business name. */
            recipient_business_name?: string;
            /** @description Filters the search by the invoice number. */
            invoice_number?: string;
            /** @description An array of status values. */
            status?: components["schemas"]["invoice_status"][];
            /** @description The reference data, such as a PO number. */
            reference?: string;
            /** @description The [three-character ISO-4217 currency code](/docs/integration/direct/rest/currency-codes/) that identifies the currency. */
            currency_code?: components["schemas"]["currency_code"];
            /** @description A private bookkeeping memo for the user. */
            memo?: string;
            /** @description Filters the search by the total amount. */
            total_amount_range?: components["schemas"]["amount_range"];
            /** @description Filters the search by a date range for the invoice, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). */
            invoice_date_range?: components["schemas"]["date_range"];
            /** @description Filters the search by a due date range for the invoice, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). */
            due_date_range?: components["schemas"]["date_range"];
            payment_date_range?: components["schemas"]["date_time_range"];
            /** @description Filters the search by a creation date range for the invoice, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). */
            creation_date_range?: components["schemas"]["date_time_range"];
            /** @description Indicates whether to list merchant-archived invoices in the response. Value is:<ul><li><code>true</code>. Response lists only merchant-archived invoices.</li><li><code>false</code>. Response lists only unarchived invoices.</li><li><code>null</code>. Response lists all invoices.</li></ul> */
            archived?: boolean;
            /** @description A CSV file of fields to return for the user, if available. Because the invoice object can be very large, field filtering is required. Valid collection fields are <code>items</code>, <code>payments</code>, <code>refunds</code>, <code>additional_recipients_info</code>, and <code>attachments</code>. */
            fields?: string[];
        };
        "invoices.search-invoices-400": {
            details?: ({
                /** @enum {string} */
                issue?: "INVALID_INTEGER_MAX_VALUE";
                /** @enum {string} */
                description?: "Value exceeds max value.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_INTEGER_MIN_VALUE";
                /** @enum {string} */
                description?: "Value less than minimum value.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "the value of a field is too long.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_ARRAY_MAX_ITEMS";
                /** @enum {string} */
                description?: "the number of items in an array parameter is too large.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_LENGTH";
                /** @enum {string} */
                description?: "the value of a field is either too short or too long.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "the value of a field is too long.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_PARAMETER_SYNTAX";
                /** @enum {string} */
                description?: "the value of a field does not conform to the expected format.";
            })[];
        };
        /**
         * Template Detail
         * @description The template-related details. Includes notes, terms and conditions, memo, and attachments.
         */
        template_detail: components["schemas"]["detail"] & {
            /** @description The payment due date for the invoice. Value is either but not both <code>term_type</code> or <code>due_date</code>. */
            payment_term?: components["schemas"]["payment_term"];
            /** @description The audit metadata. Captures all template actions on create and update. */
            metadata?: components["schemas"]["template_metadata"];
        };
        /**
         * Template Information
         * @description The template details. Includes invoicer business information, invoice recipients, items, and configuration.
         */
        template_info: {
            /** @description The template-related details. Includes notes, terms and conditions, memo, and attachments. */
            detail?: components["schemas"]["template_detail"];
            /** @description The invoicer information. Includes business name, email, address, phone, fax, tax ID, additional notes, and logo URL. */
            invoicer?: components["schemas"]["invoicer_info"];
            /** @description The billing and shipping information. Includes name, email, address, phone, and language. */
            primary_recipients?: components["schemas"]["recipient_info"][];
            /** @description An array of one or more CC: emails to which notifications are sent. If you omit this parameter, a notification is sent to all CC: email addresses that are part of the invoice.<blockquote><strong>Note:</strong> Valid values are email addresses in the `additional_recipients` value associated with the invoice.</blockquote> */
            additional_recipients?: components["schemas"]["email_address"][];
            /** @description An array of invoice line-item information. */
            items?: components["schemas"]["item"][];
            /** @description The template configuration details. Includes tax information, tip, and partial payment. */
            configuration?: components["schemas"]["template_configuration"];
            /** @description The invoice amount summary of the item total, discount, tax total, and shipping. */
            amount?: components["schemas"]["amount_summary_detail"];
            /** @description The amount due for the invoice. */
            readonly due_amount?: components["schemas"]["money"];
        };
        /**
         * Template Item Field
         * @description The field names for the invoice line items in the template.
         * @enum {string}
         */
        template_item_field: "ITEMS_QUANTITY" | "ITEMS_DESCRIPTION" | "ITEMS_DATE" | "ITEMS_DISCOUNT" | "ITEMS_TAX";
        /**
         * Template Display Preference
         * @description The template display preference.
         */
        template_display_preference: {
            /**
             * @description Indicates whether to show or hide this field.
             * @default false
             */
            hidden: boolean;
        };
        /**
         * Template Item Setting
         * @description The template item setting. Sets a template as the default template or edit template.
         */
        template_item_setting: {
            /** @description The field name in `template_data` for which to map corresponding display preferences. */
            field_name?: components["schemas"]["template_item_field"];
            /** @description The display preference. */
            display_preference?: components["schemas"]["template_display_preference"];
        };
        /**
         * Template Subtotal Field
         * @description The field names in the template for discount, shipping, and custom amounts.
         * @enum {string}
         */
        template_subtotal_field: "DISCOUNT" | "SHIPPING" | "CUSTOM";
        /**
         * Template Subtotal Setting
         * @description The template subtotal setting. Includes the field name and display preference.
         */
        template_subtotal_setting: {
            /** @description The field name in `template_data` for which to map corresponding display preferences. */
            field_name?: components["schemas"]["template_subtotal_field"];
            /** @description The display preference. */
            display_preference?: components["schemas"]["template_display_preference"];
        };
        /**
         * Template Settings
         * @description The template settings. Sets a template as the default template or edit template.
         */
        template_settings: {
            /** @description The template item headers display preference. */
            template_item_settings?: components["schemas"]["template_item_setting"][];
            /** @description The template subtotal headers display preference. */
            template_subtotal_settings?: components["schemas"]["template_subtotal_setting"][];
        };
        /**
         * Template
         * @description The template with invoice details to load with all captured fields.
         */
        template: {
            /** @description The ID of the template. */
            readonly id?: string;
            /** @description The template name.<blockquote><strong>Note:</strong> The template name must be unique.</blockquote> */
            name?: string;
            /** @description Indicates whether this template is the default template. A invoicer can have one default template. */
            default_template?: boolean;
            /** @description The template details. Includes invoicer business information, invoice recipients, items, and configuration. */
            template_info?: components["schemas"]["template_info"];
            /** @description The template settings. Describes which fields to show or hide when you create an invoice. */
            settings?: components["schemas"]["template_settings"];
            /** @description The unit of measure for the template. Value is quantity, hours, or amount. */
            unit_of_measure?: components["schemas"]["unit_of_measure"];
            /** @description Indicates whether this template is a invoicer-created custom template. The system generates non-custom templates. */
            readonly standard_template?: boolean;
            /** @description An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links). */
            readonly links?: components["schemas"]["link_description"][];
        };
        /**
         * Templates
         * @description An array of merchant-created templates with associated details that include the emails, addresses, and phone numbers from the user's PayPal profile.
         */
        templates: {
            /** @description An array of addresses in the user's PayPal profile. */
            readonly addresses?: components["schemas"]["address_portable"][];
            /** @description An array of emails in the user's PayPal profile. */
            readonly emails?: components["schemas"]["email_address"];
            /** @description An array of phone numbers in the user's PayPal profile. */
            phones?: components["schemas"]["phone_detail"][];
            /** @description An array of details for each template. If `fields` is `none`, returns only the template name, ID, and default status. */
            templates?: components["schemas"]["template"][];
            /** @description An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links). */
            readonly links?: components["schemas"]["link_description"][];
        };
        "templates.create-400": {
            details?: ({
                /** @enum {string} */
                issue?: "TEMPLATE_NAME_ALREADY_EXISTS";
                /** @enum {string} */
                description?: "Template name already exists.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_LENGTH";
                /** @enum {string} */
                description?: "Template name length should be between 1 and 500.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_LENGTH";
                /** @enum {string} */
                description?: "Currency code length should be 3 characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_LENGTH";
                /** @enum {string} */
                description?: "the value of a field is either too short or too long.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Value of the field is too long.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_PARAMETER_SYNTAX";
                /** @enum {string} */
                description?: "the value of a field does not conform to the expected format.";
            })[];
        };
        "templates.create-422": {
            details?: {
                /** @enum {string} */
                issue?: "CANNOT_CANCEL_DRAFT_INVOICE";
                /** @enum {string} */
                description?: "Cannot cancel a draft invoice.";
            }[];
        };
        "templates.get-403": {
            details?: {
                /** @enum {string} */
                issue?: "PERMISSION_DENIED";
                /** @enum {string} */
                description?: "The requested template is not associated with the requested user.";
            }[];
        };
        "templates.update-400": {
            details?: ({
                /** @enum {string} */
                issue?: "TEMPLATE_NAME_ALREADY_EXISTS";
                /** @enum {string} */
                description?: "Template name already exists.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_LENGTH";
                /** @enum {string} */
                description?: "Template name length should be between 1 and 500.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_LENGTH";
                /** @enum {string} */
                description?: "Currency code length should be 3 characters.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_LENGTH";
                /** @enum {string} */
                description?: "Value of the field is either too short or too long.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_STRING_MAX_LENGTH";
                /** @enum {string} */
                description?: "Value of the field is too long.";
            } | {
                /** @enum {string} */
                issue?: "INVALID_PARAMETER_SYNTAX";
                /** @enum {string} */
                description?: "Value of the field does not conform to the expected format.";
            })[];
        };
        "templates.update-422": {
            details?: {
                /** @enum {string} */
                issue?: "CANNOT_CANCEL_DRAFT_INVOICE";
                /** @enum {string} */
                description?: "Cannot cancel a draft invoice.";
            }[];
        };
        "templates.delete-403": {
            details?: ({
                /** @enum {string} */
                issue?: "PERMISSION_DENIED";
                /** @enum {string} */
                description?: "The requested template is not associated with the requested user.";
            } | {
                /** @enum {string} */
                issue?: "CANNOT_DELETE_GLOBAL_TEMPLATE";
                /** @enum {string} */
                description?: "Global templates cannot be deleted.";
            })[];
        };
    };
    responses: {
        /** @description The default response. */
        default: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["error_default"];
            };
        };
    };
    parameters: {
        /** @description The page number to be retrieved, for the list of templates. So, a combination of `page=1` and `page_size=20` returns the first 20 templates. A combination of `page=2` and `page_size=20` returns the next 20 templates. */
        page: number;
        /** @description The maximum number of templates to return in the response. */
        page_size: number;
        /** @description Indicates whether the to show <code>total_pages</code> and <code>total_items</code> in the response. */
        total_required: boolean;
        /** @description The fields to return in the response. Value is `all` or `none`. To return only the template name, ID, and default attributes, specify `none`. */
        fields: string;
        /** @description The ID of the draft invoice to delete. */
        invoice_id: string;
        /** @description The ID of the external refund transaction to delete. */
        transaction_id: string;
        /** @description Indicates whether to send the invoice update notification to the recipient. */
        send_to_recipient: boolean;
        /** @description Indicates whether to send the invoice update notification to the merchant. */
        send_to_invoicer: boolean;
        /** @description The ID of the template to delete. */
        template_id: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "invoices.list": {
        parameters: {
            query?: {
                /** @description The page number to be retrieved, for the list of templates. So, a combination of `page=1` and `page_size=20` returns the first 20 templates. A combination of `page=2` and `page_size=20` returns the next 20 templates. */
                page?: components["parameters"]["page"];
                /** @description The maximum number of templates to return in the response. */
                page_size?: components["parameters"]["page_size"];
                /** @description Indicates whether the to show <code>total_pages</code> and <code>total_items</code> in the response. */
                total_required?: components["parameters"]["total_required"];
                /** @description The fields to return in the response. Value is `all` or `none`. To return only the template name, ID, and default attributes, specify `none`. */
                fields?: components["parameters"]["fields"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that lists invoices with details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["invoices"];
                    "multipart/mixed": components["schemas"]["invoices"];
                };
            };
            /** @description Invalid request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_400"] & components["schemas"]["400"];
                    "multipart/mixed": components["schemas"]["error_400"] & components["schemas"]["400"];
                };
            };
            /** @description Authorization Error. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_403"];
                    "multipart/mixed": components["schemas"]["error_403"];
                };
            };
            default: components["responses"]["default"];
        };
    };
    "invoices.create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The invoice details which includes all information of the invoice like items, billing information. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["invoice"];
            };
        };
        responses: {
            /** @description A successful request returns the HTTP `201 Created` status code. A JSON response body that shows invoice details is returned if you set <code>prefer=return=representation</code>. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["invoice"];
                    "multipart/mixed": components["schemas"]["invoice"];
                };
            };
            /** @description Invalid request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_400"] & components["schemas"]["invoices.create-400"];
                    "multipart/mixed": components["schemas"]["error_400"] & components["schemas"]["invoices.create-400"];
                };
            };
            /** @description Authorization Error. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_403"];
                    "multipart/mixed": components["schemas"]["error_403"];
                };
            };
            /** @description Unprocessable Entity. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_422"] & components["schemas"]["422"];
                    "multipart/mixed": components["schemas"]["error_422"] & components["schemas"]["422"];
                };
            };
            default: components["responses"]["default"];
        };
    };
    "invoices.send": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the draft invoice to delete. */
                invoice_id: components["parameters"]["invoice_id"];
            };
            cookie?: never;
        };
        /** @description The email or SMS notification to send to the payer when they send an invoice.. */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["notification"];
            };
        };
        responses: {
            /** @description A successful request returns the HTTP `200 OK` when the invoice issue date is current date. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["link_description"];
                    "multipart/mixed": components["schemas"]["link_description"];
                };
            };
            /** @description A successful request returns the HTTP `202 Accepted` status code with no JSON response body, when the invoice issue date is in future. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["202-response"];
                    "multipart/mixed": components["schemas"]["202-response"];
                };
            };
            /** @description Invalid request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_400"];
                    "multipart/mixed": components["schemas"]["error_400"];
                };
            };
            /** @description Authorization Error. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_403"];
                    "multipart/mixed": components["schemas"]["error_403"];
                };
            };
            /** @description Resource Not Found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_404"];
                    "multipart/mixed": components["schemas"]["error_404"];
                };
            };
            /** @description Unprocessable Entity. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_422"];
                    "multipart/mixed": components["schemas"]["error_422"];
                };
            };
            default: components["responses"]["default"];
        };
    };
    "invoices.remind": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the draft invoice to delete. */
                invoice_id: components["parameters"]["invoice_id"];
            };
            cookie?: never;
        };
        /** @description The email or SMS notification that will be sent to the payer for reminder. */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["notification"];
            };
        };
        responses: {
            /** @description A successful request returns the HTTP `204 No Content` status code with no JSON response body. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_400"] & components["schemas"]["invoices.remind-400"];
                    "multipart/mixed": components["schemas"]["error_400"] & components["schemas"]["invoices.remind-400"];
                };
            };
            /** @description Authorization Error. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_403"] & components["schemas"]["403"];
                    "multipart/mixed": components["schemas"]["error_403"] & components["schemas"]["403"];
                };
            };
            /** @description Resource Not Found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_404"];
                    "multipart/mixed": components["schemas"]["error_404"];
                };
            };
            /** @description Unprocessable Entity. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_422"] & components["schemas"]["invoices.remind-422"];
                    "multipart/mixed": components["schemas"]["error_422"] & components["schemas"]["invoices.remind-422"];
                };
            };
            default: components["responses"]["default"];
        };
    };
    "invoices.cancel": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the draft invoice to delete. */
                invoice_id: components["parameters"]["invoice_id"];
            };
            cookie?: never;
        };
        /** @description The email or SMS notification that will be sent to the payer on cancellation. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["notification"];
            };
        };
        responses: {
            /** @description A successful request returns the HTTP `204 No Content` status code with no JSON response body. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_400"] & components["schemas"]["invoices.cancel-400"];
                };
            };
            /** @description Authorization Error. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_403"] & components["schemas"]["403"];
                };
            };
            /** @description Resource Not Found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_404"];
                };
            };
            /** @description Unprocessable Entity. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_422"] & components["schemas"]["invoices.cancel-422"];
                };
            };
            default: components["responses"]["default"];
        };
    };
    "invoices.payments": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the draft invoice to delete. */
                invoice_id: components["parameters"]["invoice_id"];
            };
            cookie?: never;
        };
        /** @description The details of the payment to record against the invoice. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["payment_detail"];
            };
        };
        responses: {
            /** @description A successful request returns the HTTP `200 Created` status code and a reference to the recorded payment. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["payment_reference"];
                    "multipart/mixed": components["schemas"]["payment_reference"];
                };
            };
            /** @description Invalid request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_400"] & components["schemas"]["invoices.payments-400"];
                    "multipart/mixed": components["schemas"]["error_400"] & components["schemas"]["invoices.payments-400"];
                };
            };
            /** @description Authorization Error. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_403"] & components["schemas"]["403"];
                    "multipart/mixed": components["schemas"]["error_403"] & components["schemas"]["403"];
                };
            };
            /** @description Resource Not Found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_404"];
                    "multipart/mixed": components["schemas"]["error_404"];
                };
            };
            /** @description Unprocessable Entity. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_422"] & components["schemas"]["invoices.payments-422"];
                    "multipart/mixed": components["schemas"]["error_422"] & components["schemas"]["invoices.payments-422"];
                };
            };
            default: components["responses"]["default"];
        };
    };
    "invoices.payments-delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the draft invoice to delete. */
                invoice_id: components["parameters"]["invoice_id"];
                /** @description The ID of the external refund transaction to delete. */
                transaction_id: components["parameters"]["transaction_id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `204 No Content` status code with no JSON response body. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authorization Error. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_403"] & components["schemas"]["403"];
                };
            };
            /** @description Resource Not Found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_404"];
                };
            };
            /** @description Unprocessable Entity. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_422"] & components["schemas"]["invoices.payments-delete-422"];
                };
            };
            default: components["responses"]["default"];
        };
    };
    "invoices.refunds": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the draft invoice to delete. */
                invoice_id: components["parameters"]["invoice_id"];
            };
            cookie?: never;
        };
        /** @description The details of the refund to record against the invoice. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["refund_detail"];
            };
        };
        responses: {
            /** @description A successful request returns the HTTP `200 Created` status code and a reference to the recorded refund. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["refund_reference"];
                    "multipart/mixed": components["schemas"]["refund_reference"];
                };
            };
            /** @description Invalid request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_400"] & components["schemas"]["invoices.refunds-400"];
                    "multipart/mixed": components["schemas"]["error_400"] & components["schemas"]["invoices.refunds-400"];
                };
            };
            /** @description Authorization Error. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_403"] & components["schemas"]["403"];
                    "multipart/mixed": components["schemas"]["error_403"] & components["schemas"]["403"];
                };
            };
            /** @description Resource Not Found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_404"];
                    "multipart/mixed": components["schemas"]["error_404"];
                };
            };
            /** @description Unprocessable Entity. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_422"] & components["schemas"]["invoices.refunds-422"];
                    "multipart/mixed": components["schemas"]["error_422"] & components["schemas"]["invoices.refunds-422"];
                };
            };
            default: components["responses"]["default"];
        };
    };
    "invoices.refunds-delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the draft invoice to delete. */
                invoice_id: components["parameters"]["invoice_id"];
                /** @description The ID of the external refund transaction to delete. */
                transaction_id: components["parameters"]["transaction_id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `204 No Content` status code with no JSON response body. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authorization Error. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_403"] & components["schemas"]["403"];
                    "multipart/mixed": components["schemas"]["error_403"] & components["schemas"]["403"];
                };
            };
            /** @description Resource Not Found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_404"];
                    "multipart/mixed": components["schemas"]["error_404"];
                };
            };
            default: components["responses"]["default"];
        };
    };
    "invoices.generate-qr-code": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the draft invoice to delete. */
                invoice_id: components["parameters"]["invoice_id"];
            };
            cookie?: never;
        };
        /** @description Optional configuration parameters to adjust QR code width, height and the encoded URL. */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["qr_config"];
            };
        };
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that shows the QR code as a PNG image. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "multipart/mixed": components["schemas"]["error_400"] & components["schemas"]["invoices.generate-qr-code-400"];
                };
            };
            /** @description Authorization Error. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "multipart/mixed": components["schemas"]["error_403"] & components["schemas"]["403"];
                };
            };
            /** @description Resource Not Found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "multipart/mixed": components["schemas"]["error_404"];
                };
            };
            default: components["responses"]["default"];
        };
    };
    "invoicing.generate-next-invoice-number": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that shows the next invoice number. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["invoice_number"];
                };
            };
            /** @description Authorization Error. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_403"];
                };
            };
            default: components["responses"]["default"];
        };
    };
    "invoices.get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the draft invoice to delete. */
                invoice_id: components["parameters"]["invoice_id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that shows invoice details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["invoice"];
                };
            };
            /** @description Invalid request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_400"];
                };
            };
            /** @description Authorization Error. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_403"] & components["schemas"]["403"];
                };
            };
            /** @description Resource Not Found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_404"];
                };
            };
            /** @description Unprocessable Entity. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_422"];
                };
            };
            default: components["responses"]["default"];
        };
    };
    "invoices.update": {
        parameters: {
            query?: {
                /** @description Indicates whether to send the invoice update notification to the recipient. */
                send_to_recipient?: components["parameters"]["send_to_recipient"];
                /** @description Indicates whether to send the invoice update notification to the merchant. */
                send_to_invoicer?: components["parameters"]["send_to_invoicer"];
            };
            header?: never;
            path: {
                /** @description The ID of the draft invoice to delete. */
                invoice_id: components["parameters"]["invoice_id"];
            };
            cookie?: never;
        };
        /** @description A representation of changes to make in the invoice. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["invoice"];
            };
        };
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code. A JSON response body that shows invoice details is returned if you set <code>prefer=return=representation</code>. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["invoice"];
                    "multipart/mixed": components["schemas"]["invoice"];
                };
            };
            /** @description Invalid request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_400"] & components["schemas"]["invoices.update-400"];
                    "multipart/mixed": components["schemas"]["error_400"] & components["schemas"]["invoices.update-400"];
                };
            };
            /** @description Authorization Error. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_403"] & components["schemas"]["403"];
                    "multipart/mixed": components["schemas"]["error_403"] & components["schemas"]["403"];
                };
            };
            /** @description Resource Not Found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_404"];
                    "multipart/mixed": components["schemas"]["error_404"];
                };
            };
            /** @description Unprocessable Entity. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_422"] & components["schemas"]["422"];
                    "multipart/mixed": components["schemas"]["error_422"] & components["schemas"]["422"];
                };
            };
            default: components["responses"]["default"];
        };
    };
    "invoices.delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the draft invoice to delete. */
                invoice_id: components["parameters"]["invoice_id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `204 No Content` status code with no JSON response body. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_400"];
                };
            };
            /** @description Authorization Error. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_403"] & components["schemas"]["403"];
                };
            };
            /** @description Resource Not Found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_404"];
                };
            };
            default: components["responses"]["default"];
        };
    };
    "invoices.search-invoices": {
        parameters: {
            query?: {
                /** @description The page number to be retrieved, for the list of templates. So, a combination of `page=1` and `page_size=20` returns the first 20 templates. A combination of `page=2` and `page_size=20` returns the next 20 templates. */
                page?: components["parameters"]["page"];
                /** @description The maximum number of templates to return in the response. */
                page_size?: components["parameters"]["page_size"];
                /** @description Indicates whether the to show <code>total_pages</code> and <code>total_items</code> in the response. */
                total_required?: components["parameters"]["total_required"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The invoice search can be used to retrieve the invoices based on the search parameters. */
        requestBody?: {
            content: {
                "application/json": components["schemas"]["search_data"];
            };
        };
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that lists the invoices that match the search criteria. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["invoices"];
                    "multipart/mixed": components["schemas"]["invoices"];
                };
            };
            /** @description Invalid request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_400"] & components["schemas"]["invoices.search-invoices-400"];
                    "multipart/mixed": components["schemas"]["error_400"] & components["schemas"]["invoices.search-invoices-400"];
                };
            };
            /** @description Authorization Error. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_403"];
                    "multipart/mixed": components["schemas"]["error_403"];
                };
            };
            default: components["responses"]["default"];
        };
    };
    "templates.list": {
        parameters: {
            query?: {
                /** @description The fields to return in the response. Value is `all` or `none`. To return only the template name, ID, and default attributes, specify `none`. */
                fields?: components["parameters"]["fields"];
                /** @description The page number to be retrieved, for the list of templates. So, a combination of `page=1` and `page_size=20` returns the first 20 templates. A combination of `page=2` and `page_size=20` returns the next 20 templates. */
                page?: components["parameters"]["page"];
                /** @description The maximum number of templates to return in the response. */
                page_size?: components["parameters"]["page_size"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that lists invoices. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["templates"];
                    "multipart/mixed": components["schemas"]["templates"];
                };
            };
            /** @description Invalid request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_400"] & components["schemas"]["400"];
                    "multipart/mixed": components["schemas"]["error_400"] & components["schemas"]["400"];
                };
            };
            /** @description Authorization Error. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_403"];
                    "multipart/mixed": components["schemas"]["error_403"];
                };
            };
            default: components["responses"]["default"];
        };
    };
    "templates.create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["template"];
            };
        };
        responses: {
            /** @description A successful request returns the HTTP `201 Created` status code. A JSON response body that shows template details is returned if you set <code>prefer=return=representation</code>. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["template"];
                    "multipart/mixed": components["schemas"]["template"];
                };
            };
            /** @description Invalid request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_400"] & components["schemas"]["templates.create-400"];
                    "multipart/mixed": components["schemas"]["error_400"] & components["schemas"]["templates.create-400"];
                };
            };
            /** @description Unprocessable Entity. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_422"] & components["schemas"]["templates.create-422"];
                    "multipart/mixed": components["schemas"]["error_422"] & components["schemas"]["templates.create-422"];
                };
            };
            default: components["responses"]["default"];
        };
    };
    "templates.get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the template to delete. */
                template_id: components["parameters"]["template_id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that shows template details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["template"];
                    "multipart/mixed": components["schemas"]["template"];
                };
            };
            /** @description Authorization Error. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_403"] & components["schemas"]["templates.get-403"];
                    "multipart/mixed": components["schemas"]["error_403"] & components["schemas"]["templates.get-403"];
                };
            };
            /** @description Resource Not Found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_404"];
                    "multipart/mixed": components["schemas"]["error_404"];
                };
            };
            default: components["responses"]["default"];
        };
    };
    "templates.update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the template to delete. */
                template_id: components["parameters"]["template_id"];
            };
            cookie?: never;
        };
        /** @description A representation of changes to make in the template. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["template"];
            };
        };
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code. A JSON response body that shows template details is returned if you set <code>prefer=return=representation</code>. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["template"];
                };
            };
            /** @description Invalid request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_400"] & components["schemas"]["templates.update-400"];
                };
            };
            /** @description Authorization Error. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_403"] & components["schemas"]["403"];
                };
            };
            /** @description Resource Not Found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_404"];
                };
            };
            /** @description Unprocessable Entity. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_422"] & components["schemas"]["templates.update-422"];
                };
            };
            default: components["responses"]["default"];
        };
    };
    "templates.delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the template to delete. */
                template_id: components["parameters"]["template_id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `204 No Content` status code with no JSON response body. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_400"];
                    "multipart/mixed": components["schemas"]["error_400"];
                };
            };
            /** @description Authorization Error. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_403"] & components["schemas"]["templates.delete-403"];
                    "multipart/mixed": components["schemas"]["error_403"] & components["schemas"]["templates.delete-403"];
                };
            };
            /** @description Resource Not Found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_404"];
                    "multipart/mixed": components["schemas"]["error_404"];
                };
            };
            /** @description Unprocessable Entity. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_422"];
                    "multipart/mixed": components["schemas"]["error_422"];
                };
            };
            default: components["responses"]["default"];
        };
    };
}
