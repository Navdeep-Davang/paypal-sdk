/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/customer/partner-referrals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create partner referral
         * @description Creates a partner referral that is shared by the API caller. The referrals contains the client's personal, business, and financial data.
         */
        post: operations["partner-referrals.create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customer/partner-referrals/{partner_referral_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show referral data
         * @description Shows details for referral data, by ID, that was shared by the API caller.
         */
        get: operations["partner-referrals.read"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customer/partners/{partner_id}/merchant-integrations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List seller tracking information
         * @description Lists sellers that a partner onboarded, by partner ID.
         */
        get: operations["merchant-integration.find"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customer/partners/{partner_id}/merchant-integrations/{merchant_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show seller status
         * @description Shows status information for sellers that the partner on-boards, by partner ID.
         */
        get: operations["merchant-integration.status"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customer/partners/{partner_id}/merchant-integrations/credentials": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Fetch merchant credentials
         * @description Fetches merchant credentials for a merchant onboarded through downloadable cart flow.
         */
        get: operations["merchant-integration.credentials"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customer/partners/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show partner information - agreements and preferences
         * @description Shows partner information - agreements and preferences - by partner ID.
         */
        get: operations["partner.read"];
        /**
         * Update partner information - agreements and preferences
         * @description Updates partner information - agreements and preferences - for the given partner.
         */
        put: operations["partner.update"];
        /**
         * Create partner information - agreements and preferences
         * @description Creates partner information - agreements and preferences - for the given partner.
         */
        post: operations["partner.create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * Error Details
         * @description The error details. Required for client-side `4XX` errors.
         */
        error_details: {
            /** @description The field that caused the error. If this field is in the body, set this value to the field's JSON pointer value. Required for client-side errors. */
            field?: string;
            /** @description The value of the field that caused the error. */
            value?: string;
            location?: components["schemas"]["error_location"];
            /** @description The unique, fine-grained application-level error code. */
            issue: string;
            /** @description The human-readable description for an issue. The description can change over the lifetime of an API, so clients must not depend on this value. */
            description?: string;
        };
        /**
         * @description The location of the field that caused the error. Value is `body`, `path`, or `query`.
         * @default body
         * @enum {string}
         */
        error_location: "body" | "path" | "query";
        /**
         * Link Description
         * @description The request-related [HATEOAS link](/api/rest/responses/#hateoas-links) information.
         */
        error_link_description: {
            /** @description The complete target URL. To make the related call, combine the method with this [URI Template-formatted](https://tools.ietf.org/html/rfc6570) link. For pre-processing, include the `$`, `(`, and `)` characters. The `href` is the key HATEOAS component that links a completed call with a subsequent call. */
            href: string;
            /** @description The [link relation type](https://tools.ietf.org/html/rfc5988#section-4), which serves as an ID for a link that unambiguously describes the semantics of the link. See [Link Relations](https://www.iana.org/assignments/link-relations/link-relations.xhtml). */
            rel: string;
            /**
             * @description The HTTP method required to make the related call.
             * @enum {string}
             */
            method?: "GET" | "POST" | "PUT" | "DELETE" | "PATCH";
        };
        /**
         * Bad Request Error
         * @description Request is not well-formed, syntactically incorrect, or violates schema.
         */
        error_400: {
            /** @enum {string} */
            name?: "INVALID_REQUEST";
            /** @enum {string} */
            message?: "Request is not well-formed, syntactically incorrect, or violates schema.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Unauthorized Error
         * @description Authentication failed due to missing Authorization header, or invalid authentication credentials.
         */
        error_401: {
            /** @enum {string} */
            name?: "AUTHENTICATION_FAILURE";
            /** @enum {string} */
            message?: "Authentication failed due to missing authorization header, or invalid authentication credentials.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Not Authorized Error
         * @description The client is not authorized to access this resource, although it may have valid credentials.
         */
        error_403: {
            /** @enum {string} */
            name?: "NOT_AUTHORIZED";
            /** @enum {string} */
            message?: "Authorization failed due to insufficient permissions.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Not found Error
         * @description The server has not found anything matching the request URI. This either means that the URI is incorrect or the resource is not available.
         */
        error_404: {
            /** @enum {string} */
            name?: "RESOURCE_NOT_FOUND";
            /** @enum {string} */
            message?: "The specified resource does not exist.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Resource Conflict Error
         * @description The server has detected a conflict while processing this request.
         */
        error_409: {
            /** @enum {string} */
            name?: "RESOURCE_CONFLICT";
            /** @enum {string} */
            message?: "The server has detected a conflict while processing this request.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Unsupported Media Type Error
         * @description The server does not support the request payload's media type.
         */
        error_415: {
            /** @enum {string} */
            name?: "UNSUPPORTED_MEDIA_TYPE";
            /** @enum {string} */
            message?: "The server does not support the request payload's media type.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Unprocessable Entity Error
         * @description The requested action cannot be performed and may require interaction with APIs or processes outside of the current request. This is distinct from a 500 response in that there are no systemic problems limiting the API from performing the request.
         */
        error_422: {
            /** @enum {string} */
            name?: "UNPROCESSABLE_ENTITY";
            /** @enum {string} */
            message?: "The requested action could not be performed, semantically incorrect, or failed business validation.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Internal Server Error
         * @description This is either a system or application error, and generally indicates that although the client appeared to provide a correct request, something unexpected has gone wrong on the server.
         * @example {
         *       "name": "INTERNAL_SERVER_ERROR",
         *       "message": "An internal server error occurred.",
         *       "debug_id": "90957fca61718",
         *       "links": [
         *         {
         *           "href": "https://developer.paypal.com/api/orders/v2/#error-INTERNAL_SERVER_ERROR",
         *           "rel": "information_link"
         *         }
         *       ]
         *     }
         */
        error_500: {
            /** @enum {string} */
            name?: "INTERNAL_SERVER_ERROR";
            /** @enum {string} */
            message?: "An internal server error occurred.";
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Service Unavailable Error
         * @description The server is temporarily unable to handle the request, for example, because of planned maintenance or downtime.
         * @example {
         *       "name": "SERVICE_UNAVAILABLE",
         *       "message": "Service Unavailable.",
         *       "debug_id": "90957fca61718",
         *       "information_link": "https://developer.paypal.com/docs/api/orders/v2/#error-SERVICE_UNAVAILABLE"
         *     }
         */
        error_503: {
            /** @enum {string} */
            name?: "SERVICE_UNAVAILABLE";
            /** @enum {string} */
            message?: "Service Unavailable.";
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Format: ppaas_common_email_address_v2
         * @description The internationalized email address.<blockquote><strong>Note:</strong> Up to 64 characters are allowed before and 255 characters are allowed after the <code>@</code> sign. However, the generally accepted maximum length for an email address is 254 characters. The pattern verifies that an unquoted <code>@</code> sign exists.</blockquote>
         */
        email_address: string;
        /**
         * Name
         * @description The name of the party.
         */
        name: {
            /** @description The prefix, or title, to the party's name. */
            prefix?: string;
            /** @description When the party is a person, the party's given, or first, name. */
            given_name?: string;
            /** @description When the party is a person, the party's surname or family name. Also known as the last name. Required when the party is a person. Use also to store multiple surnames including the matronymic, or mother's, surname. */
            surname?: string;
            /** @description When the party is a person, the party's middle name. Use also to store multiple middle names including the patronymic, or father's, middle name. */
            middle_name?: string;
            /** @description The suffix for the party's name. */
            suffix?: string;
            /** @description DEPRECATED. The party's alternate name. Can be a business name, nickname, or any other name that cannot be split into first, last name. Required when the party is a business. */
            alternate_full_name?: string;
            /** @description When the party is a person, the party's full name. */
            full_name?: string;
        };
        /**
         * Phone
         * @description The phone number, in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en).
         */
        phone: {
            /** @description The country calling code (CC), in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en). The combined length of the CC and the national number must not be greater than 15 digits. The national number consists of a national destination code (NDC) and subscriber number (SN). */
            country_code: string;
            /** @description The national number, in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en). The combined length of the country calling code (CC) and the national number must not be greater than 15 digits. The national number consists of a national destination code (NDC) and subscriber number (SN). */
            national_number: string;
            /** @description The extension number. */
            extension_number?: string;
        };
        /**
         * Phone Type
         * @description The phone type.
         * @enum {string}
         */
        phone_type: "FAX" | "HOME" | "MOBILE" | "OTHER" | "PAGER";
        /**
         * Phone Details
         * @description The phone number and the phone type.
         */
        phone_details: {
            /** @description The phone number details. */
            phone_number_details: components["schemas"]["phone"];
            phone_type: components["schemas"]["phone_type"];
        };
        /**
         * Format: ppaas_common_country_code_v2
         * @description The [two-character ISO 3166-1 code](/docs/integration/direct/rest/country-codes/) that identifies the country or region.<blockquote><strong>Note:</strong> The country code for Great Britain is <code>GB</code> and not <code>UK</code> as used in the top-level domain names for that country. Use the `C2` country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.</blockquote>
         */
        country_code: string;
        /**
         * Simple Postal Address (Coarse-Grained)
         * @description A simple postal address with coarse-grained fields. Do not use for an international address. Use for backward compatibility only. Does not contain phone.
         */
        address: {
            /** @description The first line of the address. For example, number or street. */
            line1: string;
            /** @description The second line of the address. For example, suite or apartment number. */
            line2?: string;
            /** @description The city name. */
            city: string;
            /** @description The [code](/docs/integration/direct/rest/state-codes/) for a US state or the equivalent for other countries. Required for transactions if the address is in one of these countries: [Argentina](/docs/integration/direct/rest/state-codes/#argentina), [Brazil](/docs/integration/direct/rest/state-codes/#brazil), [Canada](/docs/integration/direct/rest/state-codes/#canada), [China](/docs/integration/direct/rest/state-codes/#china), [India](/docs/integration/direct/rest/state-codes/#india), [Italy](/docs/integration/direct/rest/state-codes/#italy), [Japan](/docs/integration/direct/rest/state-codes/#japan), [Mexico](/docs/integration/direct/rest/state-codes/#mexico), [Thailand](/docs/integration/direct/rest/state-codes/#thailand), or [United States](/docs/integration/direct/rest/state-codes/#usa). Maximum length is 40 single-byte characters. */
            state?: string;
            country_code: components["schemas"]["country_code"];
            /** @description The postal code, which is the zip code or equivalent. Typically required for countries with a postal code or an equivalent. See [postal code](https://en.wikipedia.org/wiki/Postal_code). */
            postal_code?: string;
        };
        /**
         * Identity Document Type
         * @description The identifier type in the onboarding domain. Indicates the most specific type or the closest matching value. For example, <code>SOCIAL_SECURITY_NUMBER</code> in preference to <code>TAX_IDENTIFICATION_NUMBER</code>.
         * @enum {string}
         */
        identity_document_type: "SOCIAL_SECURITY_NUMBER" | "EMPLOYMENT_IDENTIFICATION_NUMBER" | "TAX_IDENTIFICATION_NUMBER" | "PASSPORT_NUMBER" | "PENSION_FUND_ID" | "MEDICAL_INSURANCE_ID" | "CNPJ" | "CPF" | "PAN";
        /**
         * Identity Document
         * @description The authority-issued identification document. Document types include a driver's license, social security number, employee ID number, and so on.
         */
        identity_document: {
            type: components["schemas"]["identity_document_type"];
            /** @description The identifier value, such as license number, social security number, and so on. */
            value: string;
            /**
             * @description Indicates whether the value is a partial value. Specify this value when the identifier type supports a partial value, such as four SSN digits instead of the full nine values. Depending on the context, this parameter can be ignored.
             * @default false
             */
            partial_value: boolean;
            /** @description The [two-character ISO-3166-1 country code](/docs/api/reference/country-codes/) for the country that issued the document. */
            issuer_country_code: string;
        };
        /**
         * Seller Account Relationship
         * @description The familial relationship of the seller account owner.
         */
        account_owner_relationship: {
            /** @description The name of the familial relation. */
            name: components["schemas"]["name"];
            /**
             * @description The type of familial relationship.
             * @enum {string}
             */
            relation: "MOTHER";
            /** @description The nationality of the familial relation. */
            country_code_of_nationality: components["schemas"]["country_code"];
        };
        /**
         * Person Details
         * @description The customer's personal details.
         */
        person_details: {
            /** @description The primary email address of the account. */
            email_address?: components["schemas"]["email_address"];
            /** @description The legal name of the customer. */
            name?: components["schemas"]["name"];
            /** @description An array of contact phone numbers for the customer. */
            phone_contacts?: components["schemas"]["phone_details"][];
            /** @description The home address of the account holder. */
            home_address?: components["schemas"]["address"];
            /** @description The [two-character ISO-3166-1 country code](/docs/api/reference/country-codes/) for the nationality of the account holder. Can include one of the PayPal-supported countries. */
            nationality_country_code?: components["schemas"]["country_code"];
            /** @description An array of documents that uniquely identify the user, such as a license number, social security number, and so on. */
            identity_documents?: components["schemas"]["identity_document"][];
            /** @description An array of familial relationships that are attached to a seller. */
            account_owner_relationships?: components["schemas"]["account_owner_relationship"][];
        };
        /**
         * Business Types
         * @description The business type.
         * @enum {string}
         */
        business_type_enum: "INDIVIDUAL" | "PROPRIETORSHIP" | "PARTNERSHIP" | "CORPORATION" | "NONPROFIT" | "GOVERNMENT" | "GENERAL_PARTNERSHIP" | "LIMITED_PARTNERSHIP" | "LIMITED_LIABILITY_PARTNERSHIP" | "PRIVATE_CORPORATION" | "PUBLIC_CORPORATION" | "PROPRIETORSHIP_CRAFTSMAN" | "PUBLIC_PARTNERSHIP" | "LIMITED_LIABILITY_PROPRIETORS" | "LIMITED_LIABILITY_PRIVATE_CORPORATION" | "LIMITED_PARTNERSHIP_PRIVATE_CORPORATION" | "PRIVATE_PARTNERSHIP" | "PROPRIETARY_COMPANY" | "PUBLIC_COMPANY" | "ASSOCIATION" | "REGISTERED_COOPERATIVE" | "OTHER_CORPORATE_BODY" | "ANY_OTHER_BUSINESS_ENTITY" | "ONLY_BUY_OR_SEND_MONEY";
        /**
         * Business sub-type
         * @description Sub classification of the business type.
         * @enum {string}
         */
        business_sub_type: "ASSO_TYPE_INCORPORATED" | "ASSO_TYPE_NON_INCORPORATED" | "GOVT_TYPE_ENTITY" | "GOVT_TYPE_EMANATION" | "GOVT_TYPE_ESTD_COMM" | "GOVT_TYPE_ESTD_FC" | "GOVT_TYPE_ESTD_ST_TR";
        /**
         * Purpose Code
         * @description The purpose code. Required only for India. For more information, see the Reserve Bank Of India web site. Value is:<ul><li><code>P0104</code>. Cross border delivery of goods and services.</li><li><code>P0301</code>. Business related travel purchase.</li><li><code>P0801</code>. Hardware consulting.</li><li><code>P0802</code>. Software consulting.</li><li><code>P0803</code>. Data processing consulting.</li><li><code>P0805</code>. Freelance journalism.</li><li><code>P0806</code>. Other information services.</li><li><code>P0902</code>. Licensing revenues.</li><li><code>P1004</code>. Legal.</li><li><code>P1005</code>. Accounting and tax.</li><li><code>P1006</code>. Business and management consultancy.</li><li><code>P1007</code>. Advertising and market research.</li><li><code>P1008</code>. Research and development.</li><li><code>P1009</code>. Architectural services.</li></ul>
         * @enum {string}
         */
        purpose_code_enum: "P0104" | "P0301" | "P0801" | "P0802" | "P0803" | "P0805" | "P0806" | "P0902" | "P1004" | "P1005" | "P1006" | "P1007" | "P1008" | "P1009";
        /**
         * Business Name
         * @description A name for the business. For example, the legal name or the stock-trading name.
         */
        business_name: {
            /**
             * @description The legal category of the business.
             * @enum {string}
             */
            type: "LEGAL" | "DOING_BUSINESS_AS" | "STOCK_TRADING_NAME";
            /** @description The business name. */
            name: string;
        };
        /**
         * Events Type
         * @description The event type for an onboarding entity.
         * @enum {string}
         */
        events_type: "BIRTH" | "ESTABLISHED" | "INCORPORATION" | "OPERATION";
        /**
         * Date of Event
         * @description The date for an event type. Typically captured during onboarding.
         */
        date_of_event: {
            event_type: components["schemas"]["events_type"];
            /**
             * Format: date-time
             * @description The date portion of the date and time when the event occurred, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For accuracy, if you do not know the exact time zone, use the UTC time zone.
             */
            event_date: string;
        };
        /**
         * Currency
         * @description The [three-character ISO-4217 currency code](https://developer.paypal.com/docs/api/reference/currency-codes/).
         */
        currency: {
            /** @description The [three-character ISO-4217 currency code](/docs/api/reference/currency-codes/). */
            currency: string;
            /** @description The amount, up to _`N`_ digits after the decimal separator. For currencies that do not support decimals, see [currency codes](/docs/api/reference/currency-codes/). */
            value: string;
        };
        /**
         * Currency Range
         * @description The currency range, from the minimum inclusive amount to the maximum inclusive amount.
         */
        currency_range: {
            /** @description The minimum inclusive amount for the range. */
            minimum_amount?: components["schemas"]["currency"];
            /** @description The maximum inclusive amount for the range. */
            maximum_amount?: components["schemas"]["currency"];
        };
        /**
         * Email Contact
         * @description The email address. Includes the role of the email address.
         */
        email_contact: {
            email_address: components["schemas"]["email_address"];
            /**
             * @description The role of the email address.
             * @enum {string}
             */
            role: "CUSTOMER_SERVICE";
        };
        /**
         * Person
         * @description Details of the person party.
         */
        person: {
            /** @description The legal name of the customer. */
            name?: components["schemas"]["name"];
            /** @description An array of contact phone numbers for the customer. */
            phone_contacts?: components["schemas"]["phone_details"][];
            /** @description The home address of the account holder. */
            home_address?: components["schemas"]["address"];
            /** @description The citizenship country code of the person */
            nationality_country_code?: components["schemas"]["country_code"];
        };
        /**
         * Individual_beneficial_owner
         * @description The individual owner of the account.
         */
        individual_beneficial_owner: components["schemas"]["person"] & {
            /** @description The percentage of shares this person owns in the company. */
            percentage_of_ownership?: string;
        };
        /**
         * Business
         * @description Details of the business entity.
         */
        business: {
            /** @description An array of business names. */
            names?: components["schemas"]["business_name"][];
            /** @description An array of phone contacts for the business. */
            phone_contacts?: components["schemas"]["phone_details"][];
            /** @description The address of the business. */
            business_address?: components["schemas"]["address"];
            /** @description The type of business. */
            business_type?: string;
            /** @description The sub classification of business type. */
            business_subtype?: components["schemas"]["business_sub_type"];
            /** @description The customer's business category code. PayPal uses the industry standard seller category codes. */
            category?: string;
            /** @description The customer's business subcategory code. PayPal uses the industry standard seller category codes. */
            sub_category?: string;
            /** @description The customer's business seller category code. PayPal uses the industry standard seller category codes. */
            merchant_category_code?: string;
            /** @description The account's purpose code. */
            purpose_code?: unknown;
            /** @description An array of website URLs for the business. */
            website_urls?: string[];
            /** @description The range for the total annual sales volume of the business. */
            annual_sales_volume_range?: components["schemas"]["currency_range"];
            /** @description The range for the average monthly volume of the business. */
            average_monthly_volume_range?: components["schemas"]["currency_range"];
        };
        /**
         * Business_beneficial_owner
         * @description The individual owner of the account.
         */
        business_beneficial_owner: components["schemas"]["business"] & {
            /** @description The percentage of shares this person owns in the company. */
            percentage_of_ownership?: string;
        };
        /**
         * Beneficial_owners
         * @description Beneficial owners of the entity.
         */
        beneficial_owners: {
            /** @description Individual beneficial owners. */
            individual_beneficial_owners?: components["schemas"]["individual_beneficial_owner"][];
            /** @description Business beneficial owners. */
            business_beneficial_owners?: components["schemas"]["business_beneficial_owner"][];
        };
        /**
         * Role type
         * @description Role of the person party played in the business.
         * @enum {string}
         */
        office_bearer_role: "CEO" | "CHAIRMAN" | "DIRECTOR" | "SECRETARY" | "TREASURER" | "TRUSTEE";
        /**
         * Office_bearer
         * @description The office bearers of the account.
         */
        office_bearer: components["schemas"]["person"] & {
            /** @description The role of the person in the company. */
            role?: components["schemas"]["office_bearer_role"];
        };
        /**
         * Business Details
         * @description The customer's business details.
         */
        business_details: {
            /** @description An array of phone contacts for the business. */
            phone_contacts?: components["schemas"]["phone_details"][];
            /** @description The address of the business. */
            business_address?: components["schemas"]["address"];
            /** @description The type of business. */
            business_type?: string;
            business_subtype?: components["schemas"]["business_sub_type"];
            /** @description The customer's business category code. PayPal uses the industry standard seller category codes. */
            category?: string;
            /** @description The customer's business subcategory code. PayPal uses the industry standard seller category codes. */
            sub_category?: string;
            /** @description The customer's business seller category code. PayPal uses the industry standard seller category codes. */
            merchant_category_code?: string;
            /** @description The account's purpose code. */
            purpose_code?: unknown;
            /** @description An array of business names. */
            names?: components["schemas"]["business_name"][];
            /** @description The business goals description. For example, a mission statement. */
            business_description?: string;
            /** @description An array of event dates for the business. */
            event_dates?: components["schemas"]["date_of_event"][];
            /** @description An array of website URLs for the business. */
            website_urls?: string[];
            /** @description The range for the total annual sales volume of the business. */
            annual_sales_volume_range?: components["schemas"]["currency_range"];
            /** @description The range for the average monthly volume of the business. */
            average_monthly_volume_range?: components["schemas"]["currency_range"];
            /** @description An array of identity documents that uniquely identify the user. For example, a license number, social security number, and so on. */
            identity_documents?: components["schemas"]["identity_document"][];
            /** @description An array of contact email addresses for the company. */
            email_contacts?: components["schemas"]["email_contact"][];
            /** @description The country code of the country where the business was incorporated. */
            country_of_incorporation?: components["schemas"]["country_code"];
            /** @description List of beneficial owners part of the entity. They can be either a Person or a business entity. */
            beneficial_owners?: components["schemas"]["beneficial_owners"];
            /** @description List of office bearers as part of the business entity. */
            office_bearers?: components["schemas"]["office_bearer"][];
        };
        /**
         * Identifier
         * @description The attributes for an instrument institute ID. Used with the account number to uniquely identify the instrument. Value is:<ul><li>For banks with IBAN information, the IBAN number.</li><li>For banks with BBAN information, the BBAN number.</li><li>For banks with both IBAN and BBAN information, the IBAN number.</li></ul>
         */
        identifier: {
            /**
             * @description The bank account ID type.
             * @enum {string}
             */
            type?: "ROUTING_NUMBER_1" | "ROUTING_NUMBER_2" | "ROUTING_NUMBER_3" | "BI_CODE" | "BANK_CODE" | "BRANCH_CODE" | "INTERMEDIARY_SWIFT_CODE" | "BBAN" | "BBAN_ENCRYPTED" | "BBAN_HMAC" | "AGGREGATOR_YODLEE";
            /** @description The bank account ID value. */
            value?: string;
        };
        /**
         * Bank Details
         * @description The required information to add a card as a financial instrument to PayPal through onboarding.
         */
        bank_details: {
            /** @description The user-provided short name for the user's bank account. */
            nick_name?: string;
            /** @description The bank account number. These are numeric values only without any additional formatting. */
            account_number: string;
            /**
             * @description The type of account, which is checking or savings.
             * @enum {string}
             */
            account_type: "CHECKING" | "SAVINGS";
            /** @description The primary [three-character ISO-4217 currency code](/docs/api/reference/currency-codes/) for the account. */
            currency_code?: string;
            /** @description An array of instrument institute attributes. Used with the account number to uniquely identify the instrument. Value is:<ul><li>For banks with IBAN information, the IBAN number.</li><li>For banks with BBAN information, the BBAN number.</li><li>For banks with both IBAN and BBAN information, the IBAN number.</li></ul> */
            identifiers?: components["schemas"]["identifier"][];
            /** @description The branch location, if applicable. */
            branch_location?: components["schemas"]["address"];
            /** @description Indicates whether the user has agreed to the mandate for financial instrument (FI) authorization. */
            mandate_agreed?: boolean;
        };
        /**
         * Account Identifier
         * @description The PayPal account ID of the partner.
         */
        account_identifier: {
            /**
             * @description The type of ID for the account.
             * @enum {string}
             */
            type: "PAYER_ID";
            /** @description The ID of the account. */
            value: string;
        };
        /**
         * Partner Identifiers
         * @description The identifier for the customer in the partner's system.
         */
        partner_specific_identifiers: {
            /**
             * @description The identifier type.
             * @enum {string}
             */
            type: "TRACKING_ID" | "ACCOUNT_LINKING_ID";
            /** @description The identifier value. */
            value: string;
        };
        /**
         * User
         * @description The customer's business and personal data that is required to create an account.
         */
        user: {
            /**
             * @deprecated
             * @description The type of PayPal account to create, which is consumer or seller.
             * @enum {string}
             */
            customer_type?: "CONSUMER" | "MERCHANT";
            person_details?: components["schemas"]["person_details"];
            business_details?: components["schemas"]["business_details"];
            /**
             * Financial Instrument Data
             * @description The customer's financial instrument. Use it to add a financial instrument to the customer's PayPal account.
             */
            financial_instrument_data?: {
                /** @description An array of bank account details for the `ADD_BANK` capability. */
                bank_details?: components["schemas"]["bank_details"][];
            };
            /**
             * Preferred Language Code
             * @deprecated
             * @description The locale code of the user's preferred language.
             */
            preferred_language_code?: string;
            /** @description The primary [three-character ISO-4217 currency code](/docs/api/reference/currency-codes/) of the account. */
            primary_currency_code?: unknown;
            referral_user_payer_id?: components["schemas"]["account_identifier"];
            /** @description An array of customer identifiers in the partner's system. */
            partner_specific_identifiers?: components["schemas"]["partner_specific_identifiers"][];
        };
        /**
         * REST Endpoint Features
         * @description The REST endpoint.
         * @enum {string}
         */
        rest_endpoint_features_enum: "PAYMENT" | "REFUND" | "PARTNER_FEE" | "DELAY_FUNDS_DISBURSEMENT" | "READ_SELLER_DISPUTE" | "UPDATE_SELLER_DISPUTE" | "ACCESS_MERCHANT_INFORMATION" | "INVOICE_READ_WRITE" | "ADVANCED_TRANSACTIONS_SEARCH";
        /**
         * Integration Details
         * @description The integration details for the partner and customer relationship. Required if `capability_type` is `API_INTEGRATION`.
         */
        integration_details: {
            /** @description The payer ID of the partner who integrates with the client. To find this ID, log in to the partner's PayPal business account. Navigate to Profile, click Profile and settings, and click My business info. The account number appears in the Merchant account ID section. */
            partner_id?: string;
            /**
             * REST API Integration
             * @description The integration details for PayPal REST endpoints.
             */
            rest_api_integration?: {
                /**
                 * @description The REST-credential integration method.
                 * @default PAYPAL
                 * @enum {string}
                 */
                integration_method: "BRAINTREE" | "PAYPAL";
                /**
                 * Integration Type
                 * @description The type of REST-endpoint integration. To integrate with Braintree v.zero for PayPal REST endpoints, specify `REST_THIRD_PARTY_DETAILS`.
                 * @enum {string}
                 */
                integration_type?: "FIRST_PARTY" | "THIRD_PARTY";
            };
            /**
             * REST Third-Party Details
             * @description The integration details for PayPal REST endpoints.
             */
            rest_third_party_details?: {
                /** @description The client ID of the partner's API caller account. */
                partner_client_id?: string;
                /** @description An array of features that partner can access, or use, in PayPal on behalf of the seller. The seller grants permission for these features to the partner. */
                feature_list?: components["schemas"]["rest_endpoint_features_enum"][];
            };
            /**
             * REST First-Party Details
             * @description The integration details for PayPal First Party REST endpoints.
             */
            rest_first_party_details?: {
                /** @description The client ID of the partner. */
                partner_client_id?: string;
                /** @description An array of features that partner can access, or use, in PayPal on behalf of the seller. The seller grants permission for these features to the partner. */
                feature_list?: components["schemas"]["rest_endpoint_features_enum"][];
                /** @description S256 - The code verifier must be high-entropy cryptographic random string with a byte length of 43-128 range. */
                seller_nonce?: string;
            };
        };
        /**
         * Billing Experience Preference
         * @description The preference that customizes the billing experience of the customer.
         */
        billing_experience_preference: {
            /** @description The ID of the payment web experience profile, which is returned from a [create web experience profile](/docs/api/payment-experience/v1/#web-profiles_create) call. */
            experience_id?: string;
            /** @description Indicates whether the partner has already displayed the billing context to the seller. */
            billing_context_set?: boolean;
        };
        /**
         * Billing Agreement
         * @description The details of the billing agreement between the partner and a seller.
         */
        billing_agreement: {
            /** @description The billing agreement description. */
            description?: string;
            billing_experience_preference?: components["schemas"]["billing_experience_preference"];
            /** @description The custom data for the billing agreement. */
            merchant_custom_data?: string;
            /**
             * Format: uri
             * @description The URL to which to redirect seller to accept the billing agreement.
             */
            approval_url?: string;
            /** @description The billing agreement token for the agreement. */
            ec_token?: string;
        };
        /**
         * Capability
         * @description The required capability to share data.
         */
        capabilities: {
            /**
             * @description The capability to enable for the customer. To enable the collection of the API permissions that you require to integrate with the customer, specify `API_INTEGRATION`. `BANK_ADDITION` is supported only for the US.
             * @enum {string}
             */
            capability?: "API_INTEGRATION" | "BANK_ADDITION" | "BILLING_AGREEMENT" | "CONTEXTUAL_MARKETING_CONSENT";
            api_integration_preference?: components["schemas"]["integration_details"];
            billing_agreement?: components["schemas"]["billing_agreement"];
        };
        /**
         * Web Experience Preference
         * @description The preference to customize the web experience of the customer.
         */
        web_experience_preference: {
            /**
             * Format: uri
             * @description The partner logo URL to display in the seller onboarding flow.<blockquote><strong>Note:</strong> While there is no restriction on the size of your image, PayPal forces the max width to 106px and max height to 29px. The best resolution you can provide is 106px x 29px.</blockquote>
             */
            partner_logo_url?: string;
            /**
             * Format: uri
             * @description The URL to which to redirect the customer upon completion of the onboarding process.
             */
            return_url?: string;
            /** @description The description of the return URL. */
            return_url_description?: string;
            /**
             * Format: uri
             * @description If `renew_action_url` expires, redirect the customer to this URL.
             */
            action_renewal_url?: string;
            /** @description Indicates whether to show an add credit card page. */
            show_add_credit_card?: boolean;
            /** @description Indicates whether to ask the customer to initiate confirmation of their mobile phone (the phone that the partner designated as `MOBILE` in the customer data). Default is`false`. */
            show_mobile_confirm?: boolean;
            /** @description Indicates whether to provide a single page signup flow in a mini browser. Default is to provide a full-size, multi-page flow. */
            use_mini_browser?: boolean;
            /** @description Indicates whether to use the `hosted_user_agreement_url` to confirm the customer's email address. If `true`, PayPal appends the email confirmation code to `hosted_user_agreement_url`, and when a customer successfully accesses the hosted user agreement URL, confirms the customer's email address. If `false`, PayPal does not append the confirmation code to the URL and does not confirm the email address. */
            use_hua_email_confirmation?: boolean;
        };
        /**
         * Legal Consent
         * @description The customer-provided consent.
         */
        legal_consent: {
            /**
             * @description The type of consent. `SHARE_DATA_CONSENT` gives consent to you to share your customer's data with PayPal.
             * @enum {string}
             */
            type: "SHARE_DATA_CONSENT";
            /** @description Indicates whether the customer agreed to share this type of data. To give consent, specify `true`. To withhold consent, specify `false`. */
            granted: boolean;
        };
        /**
         * Product Name
         * @description The PayPal product for which the customer is onboarded.
         * @enum {string}
         */
        product_name: "EXPRESS_CHECKOUT" | "PPPLUS" | "WP_PRO" | "PPCP" | "PAYMENT_METHODS" | "ADVANCED_VAULTING";
        /**
         * Referral Data
         * @description The referral data that partners share with PayPal.
         */
        referral_data: {
            customer_data?: components["schemas"]["user"];
            /** @description An array of capabilities to enable for the customer while he or she shares the data. */
            requested_capabilities?: components["schemas"]["capabilities"][];
            web_experience_preference?: components["schemas"]["web_experience_preference"];
            /** @description An array of all consents that the partner has received from this seller. If `SHARE_DATA_CONSENT` is not granted, PayPal does not store customer data. */
            collected_consents?: components["schemas"]["legal_consent"][];
            /** @description An array of PayPal products to which the partner wants to onboard the customer. */
            products?: components["schemas"]["product_name"][];
        };
        /**
         * Error Details
         * @description The error details. Required for client-side `4XX` errors.
         */
        "error_details-2": {
            /** @description The field that caused the error. If this field is in the body, set this value to the field's JSON pointer value. Required for client-side errors. */
            field?: string;
            /** @description The value of the field that caused the error. */
            value?: string;
            /**
             * @description The location of the field that caused the error. Value is `body`, `path`, or `query`.
             * @default body
             */
            location: string;
            /** @description The unique, fine-grained application-level error code. */
            issue: string;
            /** @description The human-readable description for an issue. The description can change over the lifetime of an API, so clients must not depend on this value. */
            description?: string;
        };
        /**
         * Link Description
         * @description The request-related [HATEOAS link](/docs/api/reference/api-responses/#hateoas-links) information.
         */
        link_description: {
            /** @description The complete target URL. To make the related call, combine the method with this [URI Template-formatted](https://tools.ietf.org/html/rfc6570) link. For pre-processing, include the `$`, `(`, and `)` characters. The `href` is the key HATEOAS component that links a completed call with a subsequent call. */
            href: string;
            /** @description The [link relation type](https://tools.ietf.org/html/rfc5988#section-4), which serves as an ID for a link that unambiguously describes the semantics of the link. See [Link Relations](https://www.iana.org/assignments/link-relations/link-relations.xhtml). */
            rel: string;
            /**
             * @description The HTTP method required to make the related call.
             * @enum {string}
             */
            method?: "GET" | "POST" | "PUT" | "DELETE" | "HEAD" | "CONNECT" | "OPTIONS" | "PATCH";
        };
        /**
         * Error
         * @description The error details.
         */
        error: {
            /** @description The human-readable, unique name of the error. */
            name: string;
            /** @description The message that describes the error. */
            message: string;
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id: string;
            /** @description The information link, or URI, that shows detailed information about this error for the developer. */
            readonly information_link?: string;
            /** @description An array of additional details about the error. */
            details?: components["schemas"]["error_details-2"][];
            /** @description An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links). */
            readonly links?: components["schemas"]["link_description"][];
        };
        /**
         * Create Referral Data Response
         * @description The shared referral data.
         */
        create_referral_data_response: {
            /** @description An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links). */
            readonly links?: components["schemas"]["link_description"][];
        };
        /**
         * Referral Data Response
         * @description The share referral data response.
         */
        referral_data_response: {
            /** @description The ID to access the customer's data shared by the partner with PayPal. */
            readonly partner_referral_id?: string;
            /** @description The payer ID of the partner who shared the referral data. */
            readonly submitter_payer_id?: string;
            referral_data?: components["schemas"]["referral_data"];
            /** @description An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links). */
            readonly links?: components["schemas"]["link_description"][];
        };
        /**
         * Capability Name
         * @description The name of capability.
         * @enum {string}
         */
        account_capability_names: "PREPAID" | "INSTANT_FUNDS" | "SEND_MONEY" | "RECEIVE_MONEY" | "CARD_PROCESSING_VIRTUAL_TERMINAL" | "AMEX_OPTBLUE" | "CUSTOM_CARD_PROCESSING" | "FRAUD_TOOL_ACCESS" | "DEBIT_CARD_SWITCH" | "COMMERCIAL_ENTITY" | "WITHDRAW_MONEY" | "STANDARD_CARD_PROCESSING" | "PAYPAL_CREDIT_PROCESSING" | "VENMO_PAY_PROCESSING" | "ALT_PAY_PROCESSING";
        /**
         * Product
         * @description The seller product information.
         */
        product: {
            /**
             * @description The name of the product.
             * @enum {string}
             */
            name?: "EXPRESS_CHECKOUT" | "WEBSITE_PAYMENTS_STANDARD" | "MASS_PAYMENT" | "EMAIL_PAYMENTS" | "EBAY_CHECKOUT" | "PAYFLOW_LINK" | "PAYFLOW_PRO" | "WEBSITE_PAYMENTS_PRO_3_0" | "WEBSITE_PAYMENTS_PRO_2_0" | "VIRTUAL_TERMINAL" | "HOSTED_SOLE_SOLUTION" | "BILL_ME_LATER" | "MOBILE_EXPRESS_CHECKOUT" | "PAYPAL_HERE" | "MOBILE_IN_STORE" | "PAYPAL_STANDARD" | "MOBILE_PAYPAL_STANDARD" | "MOBILE_PAYMENT_ACCEPTANCE" | "PAYPAL_ADVANCED" | "PAYPAL_PRO" | "ENHANCED_RECURRING_PAYMENTS" | "PPCP_STANDARD" | "PPCP_CUSTOM" | "PAYMENT_METHODS" | "ADVANCED_VAULTING";
            /**
             * @description The risk vetting status of product, if applicable.
             * @enum {string}
             */
            vetting_status?: "APPROVED" | "PENDING" | "DECLINED" | "SUBSCRIBED" | "IN_REVIEW" | "NEED_MORE_DATA" | "DENIED";
            /**
             * @description The status of product bundle, if applicable.
             * @enum {string}
             */
            status?: "ACTIVE" | "INACTIVE" | "PENDING";
            /** @description An array of the capability names bundled in the parent product. */
            capabilities?: components["schemas"]["account_capability_names"][];
        };
        /**
         * Signature
         * @description The signature portion of the seller credentials.
         */
        signature: {
            /** @description The API user name of the seller. */
            api_user_name?: string;
            /** @description The API password of the seller. */
            api_password?: string;
            /** @description The signature credential of the seller. */
            signature?: string;
        };
        /**
         * Certificate
         * @description A certificate for seller credentials.
         */
        certificate: {
            /** @description The API user name for the seller. */
            api_user_name?: string;
            /** @description The API password for the seller. */
            api_password?: string;
            /** @description The fingerprint. */
            fingerprint?: string;
            /** @description The URL to download the certificate. */
            download_link?: string;
        };
        /**
         * Credential
         * @description Seller credentials.
         */
        credential: {
            signature?: components["schemas"]["signature"];
            certificate?: components["schemas"]["certificate"];
        };
        /**
         * OAuth Third Party
         * @description The seller third-party information for REST API.
         */
        "oauth-third-party": {
            /** @description The client ID of the partner's API caller account. */
            partner_client_id?: string;
            /** @description The client ID of the seller. */
            merchant_client_id?: string;
            /** @description An array of scopes that the seller granted the partner. */
            scopes?: string[];
            /** @description The access token for the partner-selected integration method. */
            access_token?: string;
            /** @description The refresh token for the partner-selected integration method. */
            refresh_token?: string;
        };
        /**
         * OAuth Integration
         * @description The status of the oauth-integration between a partner and seller.
         */
        "oauth-integration": {
            /**
             * @description The type of integration between the partner and the seller.
             * @enum {string}
             */
            integration_type?: "FIRST_PARTY_INTEGRATED" | "FIRST_PARTY_NON_INTEGRATED" | "THIRD_PARTY" | "OAUTH_THIRD_PARTY";
            /**
             * @description The integration method that the partner uses to integrate with PayPal APIs.
             * @enum {string}
             */
            integration_method?: "PAYPAL" | "BRAINTREE";
            /**
             * @description The integration status.
             * @enum {string}
             */
            status?: "A" | "I";
            /** @description An array of combinations of `partner_client_id` and `merchant_client_id` values and their associated scopes. */
            oauth_third_party?: components["schemas"]["oauth-third-party"][];
        };
        /**
         * Limitation
         * @description The limitations on a seller account.
         */
        limitation: {
            /** @description The title of the limitation that is applied to the account. */
            name?: string;
            /** @description An array of the restriction names. */
            restrictions?: string[];
        };
        /**
         * Capability Status
         * @description Status of the account capability.
         * @enum {string}
         */
        account_capability_status: "ACTIVE" | "SUSPENDED" | "REVOKED";
        /**
         * Limit Type
         * @description The type of limit.
         * @enum {string}
         */
        capability_limit_types: "GENERAL";
        /**
         * Capability Limit
         * @description Limit associated with the capability.
         */
        capability_limit: {
            /** @description Type of the limit. */
            type?: components["schemas"]["capability_limit_types"];
        };
        /**
         * Account Capability
         * @description Capability associated with the account.
         */
        account_capability: {
            /** @description Name of the capability. */
            name?: components["schemas"]["account_capability_names"];
            /** @description The status of the capability. */
            status?: components["schemas"]["account_capability_status"];
            /** @description An array of limitations on the capability. */
            limits?: components["schemas"]["capability_limit"][];
        };
        /**
         * Seller Integration
         * @description The `merchant-integration` status information for a partner.
         */
        "merchant-integration": {
            /** @description The partner-provided tracking ID, if one was provided. */
            tracking_id?: string;
            /** @description The payer ID of the seller after creation of their PayPal account. */
            merchant_id?: string;
            /** @description The given name of the seller. Only available for casual sellers. */
            given_name?: string;
            /** @description The surname of the seller. Only available for casual sellers. */
            surname?: string;
            /** @description An array of all products that are integrated with the partner for the seller. */
            products?: components["schemas"]["product"][];
            /** @description Indicates whether the seller account can receive payments. */
            payments_receivable?: boolean;
            /** @description The legal business name of the seller. */
            legal_name?: string;
            /** @description Indicates whether the primary email of the seller has been confirmed. */
            primary_email_confirmed?: boolean;
            /** @description The primary email address of the seller. */
            primary_email?: string;
            /** @description The date when the seller account was created, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). */
            date_created?: string;
            /** @description An array of permissions granted to the partner by the seller. */
            granted_permissions?: ("EXPRESS_CHECKOUT" | "REFUND" | "DIRECT_PAYMENT" | "AUTH_CAPTURE" | "BUTTON_MANAGER" | "ACCOUNT_BALANCE" | "TRANSACTION_DETAILS" | "TRANSACTION_SEARCH" | "REFERENCE_TRANSACTION" | "RECURRING_PAYMENTS" | "BILLING_AGREEMENT" | "MANAGE_PENDING_TRANSACTION_STATUS" | "NON_REFERENCED_CREDIT" | "MASS_PAY" | "ENCRYPTED_WEBSITE_PAYMENTS" | "SETTLEMENT_CONSOLIDATION" | "SETTLEMENT_REPORTING" | "MOBILE_CHECKOUT" | "AIR_TRAVEL" | "INVOICING" | "RECURRING_PAYMENT_REPORT" | "EXTENDED_PRO_PROCESSING_REPORT" | "EXCEPTION_PROCESSING_REPORT" | "TRANSACTION_DETAIL_REPORT" | "ACCOUNT_MANAGEMENT_PERMISSION" | "ACCESS_BASIC_PERSONAL_DATA" | "ACCESS_ADVANCED_PERSONAL_DATA")[];
            /** @description The API credentials of the seller. */
            api_credentials?: components["schemas"]["credential"];
            /** @description An array of information about OAuth integrations between partners and sellers. */
            oauth_integrations?: components["schemas"]["oauth-integration"][];
            /** @description An array of limitations on the seller account. */
            limitations?: components["schemas"]["limitation"][];
            /** @description An array of capabilities associated with the products integrated between seller and partner. */
            capabilities?: components["schemas"]["account_capability"][];
        };
        /**
         * Seller Credentials
         * @description The `merchant-integration` merchant credentials for a downloadable cart seller.
         */
        "merchant-integration.credentials": {
            /** @description The client ID of the seller. */
            client_id?: string;
            /** @description The client secret of the seller. */
            client_secret?: string;
            /** @description The payer ID of the seller and the pattern is not provided because the value is defined by an external party. */
            payer_id?: string;
        };
        /**
         * Error Details
         * @description The error details. Required for client-side `4XX` errors.
         */
        "error_details-3": {
            /** @description The name of the field that caused the error. */
            field: string;
            /** @description The reason for the error. */
            issue: string;
        };
        /**
         * Error
         * @description The error information.
         */
        "error-2": {
            /** @description The human-readable, unique name of the error. */
            readonly name: string;
            /** @description The PayPal internal ID. Used for correlation purposes. */
            readonly debug_id?: string;
            /** @description The message that describes the error. */
            readonly message: string;
            /** @description The URI to detailed information related to this error for the developer. */
            readonly information_link: string;
            /** @description An array of additional details for the error. */
            readonly details?: components["schemas"]["error_details-3"][];
        };
        /**
         * Product Integration
         * @description The required information for a partner to integrate this product.
         */
        "product-integration": {
            /**
             * @description The product.
             * @enum {string}
             */
            product?: "EXPRESS_CHECKOUT" | "WEBSITE_PAYMENTS_STANDARD" | "MASS_PAYMENT" | "EMAIL_PAYMENTS" | "EBAY_CHECKOUT" | "PAYFLOW_LINK" | "PAYFLOW_PRO" | "WEBSITE_PAYMENTS_PRO_3_0" | "WEBSITE_PAYMENTS_PRO_2_0" | "VIRTUAL_TERMINAL" | "HOSTED_SOLE_SOLUTION" | "BILL_ME_LATER" | "MOBILE_EXPRESS_CHECKOUT" | "PAYPAL_HERE" | "MOBILE_IN_STORE" | "PAYPAL_STANDARD" | "MOBILE_PAYPAL_STANDARD" | "MOBILE_PAYMENT_ACCEPTANCE" | "PAYPAL_ADVANCED" | "PAYPAL_PRO" | "ENHANCED_RECURRING_PAYMENTS";
            /**
             * @description The integration type for the product as third or first party or sellers that are onboarded through this partner.
             * @enum {string}
             */
            integration_type?: "FIRST_PARTY" | "THIRD_PARTY";
            /**
             * @description The credential type for a first-party integration. Required if `integration_type` is provided.
             * @enum {string}
             */
            credential_type?: "SIGNATURE" | "CERTIFICATE" | "OAUTH_TOKEN";
            /** @description An array of permissions that the partner expects that the seller has granted for a third-party integration. Different products need different permissions, so permissions also depend on the product. */
            permissions?: ("EXPRESS_CHECKOUT" | "REFUND" | "DIRECT_PAYMENT" | "AUTH_CAPTURE" | "BUTTON_MANAGER" | "ACCOUNT_BALANCE" | "TRANSACTION_DETAILS" | "TRANSACTION_SEARCH" | "REFERENCE_TRANSACTION" | "RECURRING_PAYMENTS" | "BILLING_AGREEMENT" | "MANAGE_PENDING_TRANSACTION_STATUS" | "NON_REFERENCED_CREDIT" | "MASS_PAY" | "ENCRYPTED_WEBSITE_PAYMENTS" | "SETTLEMENT_CONSOLIDATION" | "SETTLEMENT_REPORTING" | "MOBILE_CHECKOUT" | "AIR_TRAVEL" | "INVOICING" | "RECURRING_PAYMENT_REPORT" | "EXTENDED_PRO_PROCESSING_REPORT" | "EXCEPTION_PROCESSING_REPORT" | "TRANSACTION_DETAIL_REPORT" | "ACCOUNT_MANAGEMENT_PERMISSION" | "ACCESS_BASIC_PERSONAL_DATA" | "ACCESS_ADVANCED_PERSONAL_DATA")[];
        };
        /**
         * Product Preferences
         * @description The product preferences. A partner can customize these preferences based on the country and product.
         */
        "product-preferences": {
            /**
             * @description The product to which these preferences belong.
             * @enum {string}
             */
            product?: "EXPRESS_CHECKOUT" | "WEBSITE_PAYMENTS_STANDARD" | "MASS_PAYMENT" | "EMAIL_PAYMENTS" | "EBAY_CHECKOUT" | "PAYFLOW_LINK" | "PAYFLOW_PRO" | "WEBSITE_PAYMENTS_PRO_3_0" | "WEBSITE_PAYMENTS_PRO_2_0" | "VIRTUAL_TERMINAL" | "HOSTED_SOLE_SOLUTION" | "BILL_ME_LATER" | "MOBILE_EXPRESS_CHECKOUT" | "PAYPAL_HERE" | "MOBILE_IN_STORE" | "PAYPAL_STANDARD" | "MOBILE_PAYPAL_STANDARD" | "MOBILE_PAYMENT_ACCEPTANCE" | "PAYPAL_ADVANCED" | "PAYPAL_PRO" | "ENHANCED_RECURRING_PAYMENTS";
            /**
             * Format: uri
             * @description The URL to which to redirect the seller after sign-up is complete.
             */
            url?: string;
        };
        /**
         * Message
         * @description The user- and seller-provided messages.
         */
        message: {
            /** @description The message text. */
            message?: string;
            /** @description The [locale code](/docs/api/reference/locale-codes/) for the language of the message, such as `en_US`. */
            language_code?: string;
        };
        /**
         * Region Preferences
         * @description The region preferences.
         */
        "region-preferences": {
            /** @description The [two-character ISO-3166-1 country code](/docs/api/reference/country-codes/) for the country that is associated with the preferences. */
            country_code?: string;
            /** @description An array of product preferences. Can change for a country or product. */
            product_preferences?: components["schemas"]["product-preferences"][];
            /** @description An array of messages to the seller from the partner after completion of sign-up. The message can change by country and language. */
            return_message?: components["schemas"]["message"][];
        };
        /**
         * Partner
         * @description The seller acquisition partner-related information. Defines the settings for the customized onboarding experience of the seller.
         */
        partner: {
            /** @description The account ID of the partner. */
            partner_id?: string;
            /**
             * @description Indicates whether the onboarding occurs in a full browser, mini-browser, or light box.
             * @default FULL_BROWSER
             * @enum {string}
             */
            launch_type: "FULL_BROWSER" | "LIGHT_BOX" | "EMBEDDED" | "MINI_BROWSER";
            /**
             * @description Indicates whether the partner is integrated to receive a seller credential.
             * @default false
             */
            receives_credential: boolean;
            /**
             * @description Indicates whether the seller can select a product with which to integrate.
             * @enum {string}
             */
            product_selection?: "Y" | "N" | "P";
            /**
             * Format: uri
             * @description The partner logo URL. Provides a way for partners to update their logo through preferences. This logo over-writes any image URL provided earlier for their business accounts.
             */
            logo_url?: string;
            /**
             * Format: uri
             * @description The partner-provided URL for notifications.
             */
            notification_url?: string;
            /** @description An array of required information for a partner to integrate this product. Varies based on the product to integrate. */
            integration_preferences?: components["schemas"]["product-integration"][];
            /** @description An array of region-specific preferences. */
            region_preferences?: components["schemas"]["region-preferences"][];
            /** @description An array of partner-accepted agreements. */
            agreement_types?: "VENDOR_SECURITY_POLICY_AGREEMENT"[];
            /** @description The display name of the partner. */
            readonly display_name?: string;
        };
    };
    responses: never;
    parameters: {
        /** @description The ID of the partner-referrals data for which to show details. */
        partner_referral_id: string;
        /** @description The ID of the partner for which to show onboarded seller's credentials, which is the partner's PayPal account number. To find this ID, log in to the partner's PayPal business account. Navigate to **Profile**, click **Profile and settings**, and click **My business info**. The account number appears in the **Merchant account ID** section. */
        partner_id: string;
        /** @description Filters the sellers in the response by this partner-provided seller ID (`merchant_id`). */
        tracking_id: string;
        /** @description The ID of the seller for which to show status information. */
        merchant_id: string;
        /** @description Filters the fields in the response to this comma-separated list of fields. */
        fields: string;
        /** @description The ID of the partner, which is the partner's PayPal account number. To find this ID, log in to the partner's PayPal business account. Navigate to **Profile**, click **Profile and settings**, and click **My business info**. The account number appears in the **Merchant account ID** section. */
        id: string;
        /** @description The country code to load region preferences. */
        country_code: string;
        /** @description The product to load region and integration preferences. */
        product: string;
        /** @description The Content-type header MUST be described in all externally-accessible APIs. */
        content_type: string;
        /** @description The X-PAYPAL-SECURITY-CONTEXT header MUST be described in all externally-accessible APIs. */
        x_paypal_security_context: string;
    };
    requestBodies: {
        partner: {
            content: {
                "application/json": components["schemas"]["partner"];
            };
        };
    };
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "partner-referrals.create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["referral_data"];
            };
        };
        responses: {
            /** @description A successful request returns the HTTP `201 Created` status code and a JSON response body that contains a [HATEOAS link](/docs/api/reference/api-responses/#hateoas-links) to show the referral data and an `action_url` to which you redirect the customer in a browser to complete the signup process. The `partner_referral_id` token is appended to the URL. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["create_referral_data_response"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "partner-referrals.read": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the partner-referrals data for which to show details. */
                partner_referral_id: components["parameters"]["partner_referral_id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that shows referral data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["referral_data_response"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "merchant-integration.find": {
        parameters: {
            query: {
                /** @description Filters the sellers in the response by this partner-provided seller ID (`merchant_id`). */
                tracking_id: components["parameters"]["tracking_id"];
            };
            header?: never;
            path: {
                /** @description The ID of the partner for which to show onboarded seller's credentials, which is the partner's PayPal account number. To find this ID, log in to the partner's PayPal business account. Navigate to **Profile**, click **Profile and settings**, and click **My business info**. The account number appears in the **Merchant account ID** section. */
                partner_id: components["parameters"]["partner_id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `201 Created` status code and a JSON response body that lists sellers. For each seller, the response shows the seller ID (`merchant_id`), the tracking ID, and [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links) to show the seller-partner information. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "merchant-integration.status": {
        parameters: {
            query?: {
                /** @description Filters the fields in the response to this comma-separated list of fields. */
                fields?: components["parameters"]["fields"];
            };
            header?: never;
            path: {
                /** @description The ID of the partner for which to show onboarded seller's credentials, which is the partner's PayPal account number. To find this ID, log in to the partner's PayPal business account. Navigate to **Profile**, click **Profile and settings**, and click **My business info**. The account number appears in the **Merchant account ID** section. */
                partner_id: components["parameters"]["partner_id"];
                /** @description The ID of the seller for which to show status information. */
                merchant_id: components["parameters"]["merchant_id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that shows status details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["merchant-integration"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "merchant-integration.credentials": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the partner for which to show onboarded seller's credentials, which is the partner's PayPal account number. To find this ID, log in to the partner's PayPal business account. Navigate to **Profile**, click **Profile and settings**, and click **My business info**. The account number appears in the **Merchant account ID** section. */
                partner_id: components["parameters"]["partner_id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that shows merchant credentials. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["merchant-integration.credentials"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "partner.read": {
        parameters: {
            query?: {
                /** @description The country code to load region preferences. */
                country_code?: components["parameters"]["country_code"];
                /** @description The product to load region and integration preferences. */
                product?: components["parameters"]["product"];
            };
            header?: {
                /** @description The Content-type header MUST be described in all externally-accessible APIs. */
                "Content-type"?: components["parameters"]["content_type"];
                /** @description The X-PAYPAL-SECURITY-CONTEXT header MUST be described in all externally-accessible APIs. */
                "X-PAYPAL-SECURITY-CONTEXT"?: components["parameters"]["x_paypal_security_context"];
            };
            path: {
                /** @description The ID of the partner, which is the partner's PayPal account number. To find this ID, log in to the partner's PayPal business account. Navigate to **Profile**, click **Profile and settings**, and click **My business info**. The account number appears in the **Merchant account ID** section. */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that shows partner information. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["partner"];
                };
            };
            /** @description Authorization failed due to insufficient permissions. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error-2"];
                };
            };
            /** @description The specified resource does not exist. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error-2"];
                };
            };
            /** @description An internal server error has occurred. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error-2"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error-2"];
                };
            };
        };
    };
    "partner.update": {
        parameters: {
            query?: never;
            header?: {
                /** @description The Content-type header MUST be described in all externally-accessible APIs. */
                "Content-type"?: components["parameters"]["content_type"];
                /** @description The X-PAYPAL-SECURITY-CONTEXT header MUST be described in all externally-accessible APIs. */
                "X-PAYPAL-SECURITY-CONTEXT"?: components["parameters"]["x_paypal_security_context"];
            };
            path: {
                /** @description The ID of the partner, which is the partner's PayPal account number. To find this ID, log in to the partner's PayPal business account. Navigate to **Profile**, click **Profile and settings**, and click **My business info**. The account number appears in the **Merchant account ID** section. */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody: components["requestBodies"]["partner"];
        responses: {
            /** @description The server has successfully executed the method, but there is no entity body to return. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request is not well-formed, syntactically incorrect, or violates schema. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error-2"];
                };
            };
            /** @description Authorization failed due to insufficient permissions. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error-2"];
                };
            };
            /** @description The specified resource does not exist. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error-2"];
                };
            };
            /** @description An internal server error has occurred. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error-2"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error-2"];
                };
            };
        };
    };
    "partner.create": {
        parameters: {
            query?: never;
            header?: {
                /** @description The Content-type header MUST be described in all externally-accessible APIs. */
                "Content-type"?: components["parameters"]["content_type"];
                /** @description The X-PAYPAL-SECURITY-CONTEXT header MUST be described in all externally-accessible APIs. */
                "X-PAYPAL-SECURITY-CONTEXT"?: components["parameters"]["x_paypal_security_context"];
            };
            path: {
                /** @description The ID of the partner, which is the partner's PayPal account number. To find this ID, log in to the partner's PayPal business account. Navigate to **Profile**, click **Profile and settings**, and click **My business info**. The account number appears in the **Merchant account ID** section. */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody: components["requestBodies"]["partner"];
        responses: {
            /** @description A successful request returns the HTTP `201 Created` status code and a JSON response body that contains an array of [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links) that show the partner info. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["partner"];
                };
            };
            /** @description Request is not well-formed, syntactically incorrect, or violates schema. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error-2"];
                };
            };
            /** @description Authorization failed due to insufficient permissions. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error-2"];
                };
            };
            /** @description An internal server error has occurred. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error-2"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error-2"];
                };
            };
        };
    };
}
