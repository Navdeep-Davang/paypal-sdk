/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v2/customer/partner-referrals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create partner referral
         * @description Creates a partner referral that is shared by the partner or API caller. The partner referral is used to onboard the seller, and contains the seller's personal, business, financial and operations.
         */
        post: operations["partner-referrals.create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/customer/partner-referrals/{partner_referral_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show referral data
         * @description Shows details by ID for referral data that was shared by the partner or API caller.
         */
        get: operations["partner-referrals.read"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        400: {
            details?: ({
                /** @enum {string} */
                issue?: "INVALID_STRING_LENGTH";
                /** @enum {string} */
                description?: "the value of a field is either too short or too long";
            } | {
                /** @enum {string} */
                issue?: "INVALID_PARAMETER_SYNTAX";
                /** @enum {string} */
                description?: "the value of a field does not conform to the expected format";
            } | {
                /** @enum {string} */
                issue?: "INVALID_PARAMETER_VALUE";
                /** @enum {string} */
                description?: "the value of a field is invalid";
            } | {
                /** @enum {string} */
                issue?: "INVALID_ARRAY_LENGTH";
                /** @enum {string} */
                description?: "the number of items in an array parameter is too small or too large";
            })[];
        };
        401: {
            details?: {
                /** @enum {string} */
                issue?: "AUTHORIZATION_ERROR";
                /** @enum {string} */
                description?: "This API call is not authorized";
            }[];
        };
        403: {
            details?: {
                /** @enum {string} */
                issue?: "PERMISSION_DENIED";
                /** @enum {string} */
                description?: "You do not have permission to access or perform operations on this resource.";
            }[];
        };
        422: {
            details?: ({
                /** @enum {string} */
                issue?: "USER_NOT_FOUND";
                /** @enum {string} */
                description?: "Account for this Partner ID does not exist.";
            } | {
                /** @enum {string} */
                issue?: "ACCOUNT_STATUS_ERROR";
                description?: string;
            } | {
                /** @enum {string} */
                issue?: "PRODUCT_PPCP_UNAUTHORIZED";
                /** @enum {string} */
                description?: "Account has not been configured to use PayPal Complete Payments";
            })[];
        };
        /**
         * Error Details
         * @description The error details. Required for client-side `4XX` errors.
         */
        error_details: {
            /** @description The field that caused the error. If this field is in the body, set this value to the field's JSON pointer value. Required for client-side errors. */
            field?: string;
            /** @description The value of the field that caused the error. */
            value?: string;
            location?: components["schemas"]["error_location"];
            /** @description The unique, fine-grained application-level error code. */
            issue: string;
            /** @description The human-readable description for an issue. The description can change over the lifetime of an API, so clients must not depend on this value. */
            description?: string;
        };
        /**
         * @description The location of the field that caused the error. Value is `body`, `path`, or `query`.
         * @default body
         * @enum {string}
         */
        error_location: "body" | "path" | "query";
        /** @description The default error response. */
        error_default: components["schemas"]["error_400"] | components["schemas"]["error_401"] | components["schemas"]["error_403"] | components["schemas"]["error_404"] | components["schemas"]["error_409"] | components["schemas"]["error_415"] | components["schemas"]["error_422"] | components["schemas"]["error_500"] | components["schemas"]["error_503"];
        /**
         * Link Description
         * @description The request-related [HATEOAS link](/api/rest/responses/#hateoas-links) information.
         */
        error_link_description: {
            /** @description The complete target URL. To make the related call, combine the method with this [URI Template-formatted](https://tools.ietf.org/html/rfc6570) link. For pre-processing, include the `$`, `(`, and `)` characters. The `href` is the key HATEOAS component that links a completed call with a subsequent call. */
            href: string;
            /** @description The [link relation type](https://tools.ietf.org/html/rfc5988#section-4), which serves as an ID for a link that unambiguously describes the semantics of the link. See [Link Relations](https://www.iana.org/assignments/link-relations/link-relations.xhtml). */
            rel: string;
            /**
             * @description The HTTP method required to make the related call.
             * @enum {string}
             */
            method?: "GET" | "POST" | "PUT" | "DELETE" | "PATCH";
        };
        /**
         * Bad Request Error
         * @description Request is not well-formed, syntactically incorrect, or violates schema.
         */
        error_400: {
            /** @enum {string} */
            name?: "INVALID_REQUEST";
            /** @enum {string} */
            message?: "Request is not well-formed, syntactically incorrect, or violates schema.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Unauthorized Error
         * @description Authentication failed due to missing Authorization header, or invalid authentication credentials.
         */
        error_401: {
            /** @enum {string} */
            name?: "AUTHENTICATION_FAILURE";
            /** @enum {string} */
            message?: "Authentication failed due to missing authorization header, or invalid authentication credentials.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Not Authorized Error
         * @description The client is not authorized to access this resource, although it may have valid credentials.
         */
        error_403: {
            /** @enum {string} */
            name?: "NOT_AUTHORIZED";
            /** @enum {string} */
            message?: "Authorization failed due to insufficient permissions.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Not found Error
         * @description The server has not found anything matching the request URI. This either means that the URI is incorrect or the resource is not available.
         */
        error_404: {
            /** @enum {string} */
            name?: "RESOURCE_NOT_FOUND";
            /** @enum {string} */
            message?: "The specified resource does not exist.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Resource Conflict Error
         * @description The server has detected a conflict while processing this request.
         */
        error_409: {
            /** @enum {string} */
            name?: "RESOURCE_CONFLICT";
            /** @enum {string} */
            message?: "The server has detected a conflict while processing this request.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Unsupported Media Type Error
         * @description The server does not support the request payload's media type.
         */
        error_415: {
            /** @enum {string} */
            name?: "UNSUPPORTED_MEDIA_TYPE";
            /** @enum {string} */
            message?: "The server does not support the request payload's media type.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Unprocessable Entity Error
         * @description The requested action cannot be performed and may require interaction with APIs or processes outside of the current request. This is distinct from a 500 response in that there are no systemic problems limiting the API from performing the request.
         */
        error_422: {
            /** @enum {string} */
            name?: "UNPROCESSABLE_ENTITY";
            /** @enum {string} */
            message?: "The requested action could not be performed, semantically incorrect, or failed business validation.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Internal Server Error
         * @description This is either a system or application error, and generally indicates that although the client appeared to provide a correct request, something unexpected has gone wrong on the server.
         * @example {
         *       "name": "INTERNAL_SERVER_ERROR",
         *       "message": "An internal server error occurred.",
         *       "debug_id": "90957fca61718",
         *       "links": [
         *         {
         *           "href": "https://developer.paypal.com/api/orders/v2/#error-INTERNAL_SERVER_ERROR",
         *           "rel": "information_link"
         *         }
         *       ]
         *     }
         */
        error_500: {
            /** @enum {string} */
            name?: "INTERNAL_SERVER_ERROR";
            /** @enum {string} */
            message?: "An internal server error occurred.";
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Service Unavailable Error
         * @description The server is temporarily unable to handle the request, for example, because of planned maintenance or downtime.
         * @example {
         *       "name": "SERVICE_UNAVAILABLE",
         *       "message": "Service Unavailable.",
         *       "debug_id": "90957fca61718",
         *       "information_link": "https://developer.paypal.com/docs/api/orders/v2/#error-SERVICE_UNAVAILABLE"
         *     }
         */
        error_503: {
            /** @enum {string} */
            name?: "SERVICE_UNAVAILABLE";
            /** @enum {string} */
            message?: "Service Unavailable.";
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Name
         * @description The name of the party.
         */
        name: {
            /** @description The prefix, or title, to the party's name. */
            prefix?: string;
            /** @description When the party is a person, the party's given, or first, name. */
            given_name?: string;
            /** @description When the party is a person, the party's surname or family name. Also known as the last name. Required when the party is a person. Use also to store multiple surnames including the matronymic, or mother's, surname. */
            surname?: string;
            /** @description When the party is a person, the party's middle name. Use also to store multiple middle names including the patronymic, or father's, middle name. */
            middle_name?: string;
            /** @description The suffix for the party's name. */
            suffix?: string;
            /** @description When the party is a person, the party's full name. */
            full_name?: string;
        };
        /**
         * Person name type
         * @description The person's name type.
         * @enum {string}
         */
        person_name_type: "LEGAL";
        /**
         * Person name
         * @description The name of the person.
         */
        person_name: components["schemas"]["name"] & {
            /** @description The type of name. Currently supported values are: `LEGAL`. */
            type: components["schemas"]["person_name_type"];
        };
        /**
         * Format: ppaas_common_country_code_v2
         * @description The [two-character ISO 3166-1 code](/docs/api/reference/country-codes/) that identifies the country or region.<blockquote><strong>Note:</strong> The country code for Great Britain is <code>GB</code> and not <code>UK</code> as used in the top-level domain names for that country. Use the `C2` country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.</blockquote>
         */
        country_code: string;
        /**
         * Portable Postal Address (Medium-Grained)
         * @description The portable international postal address. Maps to [AddressValidationMetadata](https://github.com/googlei18n/libaddressinput/wiki/AddressValidationMetadata) and HTML 5.1 [Autofilling form controls: the autocomplete attribute](https://www.w3.org/TR/html51/sec-forms.html#autofilling-form-controls-the-autocomplete-attribute).
         */
        address_portable: {
            /** @description The first line of the address. For example, number or street. For example, `173 Drury Lane`. Required for data entry and compliance and risk checks. Must contain the full address. */
            address_line_1?: string;
            /** @description The second line of the address. For example, suite or apartment number. */
            address_line_2?: string;
            /** @description The third line of the address, if needed. For example, a street complement for Brazil, direction text, such as `next to Walmart`, or a landmark in an Indian address. */
            address_line_3?: string;
            /** @description The neighborhood, ward, or district. Smaller than `admin_area_level_3` or `sub_locality`. Value is:<ul><li>The postal sorting code for Guernsey and many French territories, such as French Guiana.</li><li>The fine-grained administrative levels in China.</li></ul> */
            admin_area_4?: string;
            /** @description A sub-locality, suburb, neighborhood, or district. Smaller than `admin_area_level_2`. Value is:<ul><li>Brazil. Suburb, bairro, or neighborhood.</li><li>India. Sub-locality or district. Street name information is not always available but a sub-locality or district can be a very small area.</li></ul> */
            admin_area_3?: string;
            /** @description A city, town, or village. Smaller than `admin_area_level_1`. */
            admin_area_2?: string;
            /** @description The highest level sub-division in a country, which is usually a province, state, or ISO-3166-2 subdivision. Format for postal delivery. For example, `CA` and not `California`. Value, by country, is:<ul><li>UK. A county.</li><li>US. A state.</li><li>Canada. A province.</li><li>Japan. A prefecture.</li><li>Switzerland. A kanton.</li></ul> */
            admin_area_1?: string;
            /** @description The postal code, which is the zip code or equivalent. Typically required for countries with a postal code or an equivalent. See [postal code](https://en.wikipedia.org/wiki/Postal_code). */
            postal_code?: string;
            country_code: components["schemas"]["country_code"];
            /**
             * Address Details
             * @description The non-portable additional address details that are sometimes needed for compliance, risk, or other scenarios where fine-grain address information might be needed. Not portable with common third party and open source. Redundant with core fields.<br/>For example, `address_portable.address_line_1` is usually a combination of `address_details.street_number`, `street_name`, and `street_type`.
             */
            address_details?: {
                /** @description The street number. */
                street_number?: string;
                /** @description The street name. Just `Drury` in `Drury Lane`. */
                street_name?: string;
                /** @description The street type. For example, avenue, boulevard, road, or expressway. */
                street_type?: string;
                /** @description The delivery service. Post office box, bag number, or post office name. */
                delivery_service?: string;
                /** @description A named locations that represents the premise. Usually a building name or number or collection of buildings with a common name or number. For example, <code>Craven House</code>. */
                building_name?: string;
                /** @description The first-order entity below a named building or location that represents the sub-premise. Usually a single building within a collection of buildings with a common name. Can be a flat, story, floor, room, or apartment. */
                sub_building?: string;
            };
        };
        /**
         * Person address type
         * @description The address type under which the provided address is tagged.
         * @enum {string}
         */
        person_address_type: "HOME";
        /**
         * Person address detail
         * @description A simple postal address with coarse-grained fields.
         */
        person_address_detail: components["schemas"]["address_portable"] & {
            /** @description The address type under which this is classified. */
            type: components["schemas"]["person_address_type"];
            /** @description Whether this is the primary address of the user. This cannot be directly set to `false`, but rather it is toggled `false` in the datastore when another address is set to primary. */
            primary?: boolean;
            /** @description Whether this address has been inactivated. */
            readonly inactive?: boolean;
        };
        /**
         * Phone
         * @description The phone number in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en).
         */
        phone: {
            /** @description The country calling code (CC), in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en). The combined length of the CC and the national number must not be greater than 15 digits. The national number consists of a national destination code (NDC) and subscriber number (SN). */
            country_code: string;
            /** @description The national number, in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en). The combined length of the country calling code (CC) and the national number must not be greater than 15 digits. The national number consists of a national destination code (NDC) and subscriber number (SN). */
            national_number: string;
            /** @description The extension number. */
            extension_number?: string;
        };
        /**
         * Phone Type
         * @description The phone type.
         * @enum {string}
         */
        phone_type: "FAX" | "HOME" | "MOBILE" | "OTHER" | "PAGER";
        /**
         * Phone number tag
         * @description Tag associated with the phone number.
         * @enum {string}
         */
        phone_number_tag: "MOBILE" | "LANDLINE";
        /**
         * Phone details
         * @description The phone number, in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en).
         */
        person_phone_detail: components["schemas"]["phone"] & {
            /** @description The name that the phone number is connected to. */
            contact_name?: string;
            /** @description Whether this phone number has been inactivated by the user. */
            readonly inactive?: boolean;
            /** @description Whether this is the primary contact phone number of the user. */
            primary?: boolean;
            /** @description Whether this is the primary mobile phone number of the user. */
            primary_mobile?: boolean;
            /** @description The type of phone number provided. For example, home, work, or mobile. */
            type: components["schemas"]["phone_type"];
            /** @description Array of tags for this phone number. */
            tags?: components["schemas"]["phone_number_tag"][];
        };
        /**
         * Format: ppaas_date_notime_v2
         * @description The stand-alone date, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). To represent special legal values, such as a date of birth, you should use dates with no associated time or time-zone data. Whenever possible, use the standard `date_time` type. This regular expression does not validate all dates. For example, February 31 is valid and nothing is known about leap years.
         */
        date_no_time: string;
        /**
         * Birth details
         * @description Date of birth data provided by the user
         */
        birth_details: {
            /** @description date of birth, fomrat [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). */
            date_of_birth: components["schemas"]["date_no_time"];
        };
        /**
         * Format: ppaas_date_time_v3
         * @description The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
         */
        date_time: string;
        /**
         * File Reference
         * @description The file reference. Can be a file in PayPal MediaServ, PayPal DMS, or another custom store.
         */
        file_reference: {
            /** @description The ID of the referenced file. */
            id?: string;
            /**
             * Format: uri
             * @description The reference URL for the file.
             */
            reference_url?: string;
            /** @description The [Internet Assigned Numbers Authority (IANA) media type of the file](https://www.iana.org/assignments/media-types/media-types.xhtml). */
            content_type?: string;
            /** @description The date and time when the file was created, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). */
            create_time?: components["schemas"]["date_time"];
            /** @description The size of the file, in bytes. */
            size?: string;
        };
        /**
         * Link Description
         * @description The request-related [HATEOAS link](/docs/api/reference/api-responses/#hateoas-links) information.
         */
        link_description: {
            /** @description The complete target URL. To make the related call, combine the method with this [URI Template-formatted](https://tools.ietf.org/html/rfc6570) link. For pre-processing, include the `$`, `(`, and `)` characters. The `href` is the key HATEOAS component that links a completed call with a subsequent call. */
            href: string;
            /** @description The [link relation type](https://tools.ietf.org/html/rfc5988#section-4), which serves as an ID for a link that unambiguously describes the semantics of the link. See [Link Relations](https://www.iana.org/assignments/link-relations/link-relations.xhtml). */
            rel: string;
            /**
             * @description The HTTP method required to make the related call.
             * @enum {string}
             */
            method?: "GET" | "POST" | "PUT" | "DELETE" | "HEAD" | "CONNECT" | "OPTIONS" | "PATCH";
        };
        /**
         * Document
         * @description The document object.
         */
        document: {
            /** @description The encrypted identifier for the document. */
            readonly id?: string;
            /** @description The document labels. A document could be classfied to multiple categories. For example, a bill document can be classfified as `BILL DOCUMENT` and `UTILITY DOCUMENT`. */
            labels?: string[];
            /** @description The file name. */
            name?: string;
            /** @description The number for the document. It is the ID number if the document is `ID CARD`, the passport number if the document is `PASSPORT`, etc. */
            identification_number?: string;
            /** @description The issue date of the document. */
            issue_date?: components["schemas"]["date_no_time"];
            /** @description The expire data of the document. */
            expiry_date?: components["schemas"]["date_no_time"];
            /** @description The country code of the document. */
            issuing_country_code?: components["schemas"]["country_code"];
            /** @description The files contained in the document. For example, a document could be represented by a front page file and a back page file, etc. */
            files?: components["schemas"]["file_reference"][];
            /** @description The HATEOAS links. */
            readonly links?: components["schemas"]["link_description"][];
        };
        /**
         * Document type
         * @description The type of documents.
         * @enum {string}
         */
        person_document_type: "SOCIAL_SECURITY_NUMBER" | "EMPLOYMENT_IDENTIFICATION_NUMBER" | "TAX_IDENTIFICATION_NUMBER" | "PASSPORT_NUMBER" | "PENSION_FUND_ID" | "MEDICAL_INSURANCE_ID" | "CNPJ" | "CPF" | "PAN";
        /**
         * Person document
         * @description The documents associated with the person.
         */
        person_document: components["schemas"]["document"] & {
            /** @description The actual type of the document. It could be `ID_CARD`, `PASSPORT`, etc. */
            type?: components["schemas"]["person_document_type"];
        };
        /**
         * Person
         * @description Details of the person or party.
         */
        person: {
            /** @description The encrypted party ID. */
            readonly id?: string;
            /** @description The name of the person. */
            names?: components["schemas"]["person_name"][];
            /** @description The citizenship country code of the person. */
            citizenship?: components["schemas"]["country_code"];
            /** @description The list of addresses associated with the person. */
            addresses?: components["schemas"]["person_address_detail"][];
            /** @description The list of phone numbers associated with the person. */
            phones?: components["schemas"]["person_phone_detail"][];
            /** @description The person's birth details. */
            birth_details?: components["schemas"]["birth_details"];
            /** @description A person's or party's related document data collected from the customer. For example SSN, ITIN, or business registration number collected from the user. <blockquote><strong>Note:</strong> This field is not applicable for POST [/v2/customer/partner-referrals](/docs/api/partner-referrals/v2/#partner-referrals_create) API calls.</blockquote> */
            documents?: components["schemas"]["person_document"][];
        };
        /**
         * Individual owner role type
         * @description Role of the person party played in the account.
         * @enum {string}
         */
        individual_owner_type: "PRIMARY";
        /**
         * Individual_owner
         * @description The individual owner of the account.
         */
        individual_owner: components["schemas"]["person"] & {
            /** @description The actual role of this user on the account, PRIMARY/SECONDARY. */
            type?: components["schemas"]["individual_owner_type"];
        };
        /**
         * Business type
         * @description The business types classified
         * @enum {string}
         */
        business_type: "ANY_OTHER_BUSINESS_ENTITY" | "ASSOCIATION" | "CORPORATION" | "GENERAL_PARTNERSHIP" | "GOVERNMENT" | "INDIVIDUAL" | "LIMITED_LIABILITY_PARTNERSHIP" | "LIMITED_LIABILITY_PROPRIETORS" | "LIMITED_LIABILITY_PRIVATE_CORPORATION" | "LIMITED_PARTNERSHIP" | "LIMITED_PARTNERSHIP_PRIVATE_CORPORATION" | "NONPROFIT" | "ONLY_BUY_OR_SEND_MONEY" | "OTHER_CORPORATE_BODY" | "PARTNERSHIP" | "PRIVATE_PARTNERSHIP" | "PROPRIETORSHIP" | "PROPRIETORSHIP_CRAFTSMAN" | "PROPRIETORY_COMPANY" | "PRIVATE_CORPORATION" | "PUBLIC_COMPANY" | "PUBLIC_CORPORATION" | "PUBLIC_PARTNERSHIP" | "REGISTERED_COOPERATIVE";
        /**
         * The business sub type.
         * @description Sub classification of the business type
         * @enum {string}
         */
        business_sub_type: "ASSO_TYPE_INCORPORATED" | "ASSO_TYPE_NON_INCORPORATED" | "GOVT_TYPE_ENTITY" | "GOVT_TYPE_EMANATION" | "GOVT_TYPE_ESTD_COMM" | "GOVT_TYPE_ESTD_FC" | "GOVT_TYPE_ESTD_ST_TR";
        /**
         * Business type information
         * @description The type and subtype of the business.
         */
        business_type_info: {
            /** @description Type of business entity like corporation, sole prop, governmental. */
            type?: components["schemas"]["business_type"];
            /** @description The sub classification of the business type. */
            subtype?: components["schemas"]["business_sub_type"];
        };
        /**
         * Business industry
         * @description The category, subcategory and MCC code of the business.
         */
        business_industry: {
            /** @description The customer's business category code. PayPal uses industry standard seller category codes. */
            category: string;
            /** @description The customer's business seller category code. PayPal uses industry standard seller category codes. */
            mcc_code: string;
            /** @description The customer's business subcategory code. PayPal uses industry standard seller subcategory codes. */
            subcategory: string;
        };
        /**
         * Business_incorporation
         * @description Business incorporation information.
         */
        business_incorporation: {
            /** @description The incorporation country code. */
            incorporation_country_code?: components["schemas"]["country_code"];
            /** @description date of incorporation */
            incorporation_date?: components["schemas"]["date_no_time"];
            /** @description The province of incorporation. */
            incorporation_province_code?: string;
        };
        /**
         * Business Name
         * @description The business name of the party.
         */
        business_name: {
            /** @description Required. The business name of the party. */
            business_name?: string;
        };
        /**
         * The business name type.
         * @description Business name type
         * @enum {string}
         */
        business_name_type: "DOING_BUSINESS_AS" | "LEGAL_NAME";
        /**
         * Business name
         * @description Name of the business provided.
         */
        business_name_detail: components["schemas"]["business_name"] & {
            /** @description The encrypted ID for the business name. */
            readonly id?: string;
            /** @description The type of business name. For example, trading name. */
            type: components["schemas"]["business_name_type"];
        };
        /**
         * Format: ppaas_common_email_address_v2
         * @description The internationalized email address.<blockquote><strong>Note:</strong> Up to 64 characters are allowed before and 255 characters are allowed after the <code>@</code> sign. However, the generally accepted maximum length for an email address is 254 characters. The pattern verifies that an unquoted <code>@</code> sign exists.</blockquote>
         */
        email_address: string;
        /**
         * Email of a person orbusiness
         * @description An email address at which the person or business can be contacted.
         */
        email: {
            /**
             * @description The role of the email address.
             * @enum {string}
             */
            type: "CUSTOMER_SERVICE";
            email: components["schemas"]["email_address"];
        };
        /**
         * Business address type
         * @description Address type under which the provided address is tagged
         * @enum {string}
         */
        business_address_type: "WORK";
        /**
         * Business_address_detail
         * @description A simple postal address with coarse-grained fields.
         */
        business_address_detail: components["schemas"]["address_portable"] & {
            /** @description The address type under which this is classified. For example, shipping or dropoff. */
            type: components["schemas"]["business_address_type"];
            /** @description Whether this is the primary address of the user. This cannot be directly set to `false`, but rather it is toggled `false` in the datastore when another address is set to primary. */
            primary?: boolean;
            /** @description Whether this address has been inactivated. */
            readonly inactive?: boolean;
        };
        /**
         * Phone type
         * @description The type of phone number provided. For example, home, work, or mobile.
         * @enum {string}
         */
        business_phone_type: "CUSTOMER_SERVICE" | "BUSINESS";
        /**
         * Phone details
         * @description The phone number, in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en).
         */
        business_phone_detail: components["schemas"]["phone"] & {
            /** @description The name that the phone number is connected to. */
            contact_name?: string;
            /** @description Whether this phone number has been inactivated by the user. */
            readonly inactive?: boolean;
            /** @description Whether this is the primary contact phone number of the user. */
            primary?: boolean;
            /** @description The type of phone number provided. For example, home, work, or mobile. */
            type: components["schemas"]["business_phone_type"];
            /** @description Array of tags for this phone number. */
            tags?: components["schemas"]["phone_number_tag"][];
        };
        /**
         * Document type
         * @description The type of documents.
         * @enum {string}
         */
        business_document_type: "SOCIAL_SECURITY_NUMBER" | "EMPLOYMENT_IDENTIFICATION_NUMBER" | "TAX_IDENTIFICATION_NUMBER" | "PASSPORT_NUMBER" | "PENSION_FUND_ID" | "MEDICAL_INSURANCE_ID" | "CNPJ" | "CPF" | "PAN";
        /**
         * Business document
         * @description The documents associated with the business.
         */
        business_document: components["schemas"]["document"] & {
            /** @description The actual type of the document. */
            type?: components["schemas"]["business_document_type"];
        };
        business: {
            /** @description Information related to the business like the nature of business, started date etc. */
            business_type?: components["schemas"]["business_type_info"];
            /** @description Information related to the business like the nature of business, started date etc. */
            business_industry?: components["schemas"]["business_industry"];
            /** @description Information related to the business like the nature of business, started date etc. */
            business_incorporation?: components["schemas"]["business_incorporation"];
            /** @description Name of the business. */
            names?: components["schemas"]["business_name_detail"][];
            /** @description Email addresses of the business. */
            emails?: components["schemas"]["email"][];
            /**
             * Format: uri
             * @description Website of the business.
             */
            website?: string;
            /** @description List of addresses associated with the business entity. */
            addresses?: components["schemas"]["business_address_detail"][];
            /** @description List of phone number associated with the business. */
            phones?: components["schemas"]["business_phone_detail"][];
            /** @description Business Party related Document data collected from the customer.. For example SSN, ITIN, Business registration number that were collected from the user. */
            documents?: components["schemas"]["business_document"][];
        };
        /**
         * Format: ppaas_common_percentage_v2
         * @description The percentage, as a fixed-point, signed decimal number. For example, define a 19.99% interest rate as `19.99`.
         */
        percentage: string;
        /**
         * Individual_beneficial_owner
         * @description The individual owner of the account.
         */
        individual_beneficial_owner: components["schemas"]["person"] & {
            /** @description The percentage of shares this person owns in the company. */
            percentage_of_ownership?: components["schemas"]["percentage"];
        };
        /**
         * Business_beneficial_owner
         * @description The business beneficial owner of the account.
         */
        business_beneficial_owner: components["schemas"]["business"] & {
            /** @description The percentage of shares this person owns in the company. */
            percentage_of_ownership?: components["schemas"]["percentage"];
        };
        /**
         * Beneficial_owners
         * @description Beneficial owners of the entity.
         */
        beneficial_owners: {
            /** @description Individual beneficial owners. */
            individual_beneficial_owners?: components["schemas"]["individual_beneficial_owner"][];
            /** @description Business beneficial owners. */
            business_beneficial_owners?: components["schemas"]["business_beneficial_owner"][];
        };
        /**
         * Role type
         * @description Role of the person party played in the business.
         * @enum {string}
         */
        office_bearer_role: "CEO" | "CHAIRMAN" | "DIRECTOR" | "SECRETARY" | "TREASURER" | "TRUSTEE";
        /**
         * Office Bearers
         * @description The office bearer associated to the account.
         */
        office_bearer: components["schemas"]["person"] & {
            /** @description The role of the office bearer in the company. */
            role?: components["schemas"]["office_bearer_role"];
        };
        /**
         * Format: ppaas_common_currency_code_v2
         * @description The [three-character ISO-4217 currency code](/docs/integration/direct/rest/currency-codes/) that identifies the currency.
         */
        currency_code: string;
        /**
         * Money
         * @description The currency and amount for a financial transaction, such as a balance or payment due.
         */
        money: {
            currency_code: components["schemas"]["currency_code"];
            /** @description The value, which might be:<ul><li>An integer for currencies like `JPY` that are not typically fractional.</li><li>A decimal fraction for currencies like `TND` that are subdivided into thousandths.</li></ul>For the required number of decimal places for a currency code, see [Currency Codes](/docs/integration/direct/rest/currency-codes/). */
            value: string;
        };
        /**
         * Currency Range
         * @description The currency range, from the minimum inclusive amount to the maximum inclusive amount.
         */
        currency_range: {
            /** @description The minimum inclusive amount for the range. */
            minimum_amount?: components["schemas"]["money"];
            /** @description The maximum inclusive amount for the range. */
            maximum_amount?: components["schemas"]["money"];
        };
        /**
         * Purpose Code
         * @description The purpose code. Required only for India. For more information, see the Reserve Bank Of India web site. Value is:<ul><li><code>P0104</code>. Cross border delivery of goods and services.</li><li><code>P0301</code>. Business related travel purchase.</li><li><code>P0801</code>. Hardware consulting.</li><li><code>P0802</code>. Software consulting.</li><li><code>P0803</code>. Data processing consulting.</li><li><code>P0805</code>. Freelance journalism.</li><li><code>P0806</code>. Other information services.</li><li><code>P0902</code>. Licensing revenues.</li><li><code>P1004</code>. Legal.</li><li><code>P1005</code>. Accounting and tax.</li><li><code>P1006</code>. Business and management consultancy.</li><li><code>P1007</code>. Advertising and market research.</li><li><code>P1008</code>. Research and development.</li><li><code>P1009</code>. Architectural services.</li></ul>
         * @enum {string}
         */
        purpose_code_enum: "P0104" | "P0301" | "P0801" | "P0802" | "P0803" | "P0805" | "P0806" | "P0902" | "P1004" | "P1005" | "P1006" | "P1007" | "P1008" | "P1009";
        /**
         * Business_entity
         * @description The business entity of the account.
         */
        business_entity: components["schemas"]["business"] & {
            /** @description List of beneficial owners part of the entity. They can be either a Person or a business entity. */
            beneficial_owners?: components["schemas"]["beneficial_owners"];
            /** @description List of Directors present as part of the business entity. */
            office_bearers?: components["schemas"]["office_bearer"][];
            /** @description The range for the total annual sales volume of the business. */
            annual_sales_volume_range?: components["schemas"]["currency_range"];
            /** @description The range for the average monthly volume of the business. */
            average_monthly_volume_range?: components["schemas"]["currency_range"];
            /** @description The account's purpose code. */
            purpose_code?: unknown;
            /** @description The business goals description. For example, a mission statement. */
            business_description?: string;
        };
        /**
         * Account
         * @description Common account object to hold the account related details of the customer.
         */
        account: {
            /** @description List of owners in the account. There should be only one primary account owner which is mentioned in their role_type. */
            individual_owners?: components["schemas"]["individual_owner"][];
            /** @description Business entity of the account. */
            business_entity?: components["schemas"]["business_entity"];
        };
        /**
         * Format: ppaas_common_language_v3
         * @description The [language tag](https://tools.ietf.org/html/bcp47#section-2) for the language in which to localize the error-related strings, such as messages, issues, and suggested actions. The tag is made up of the [ISO 639-2 language code](https://www.loc.gov/standards/iso639-2/php/code_list.php), the optional [ISO-15924 script tag](https://www.unicode.org/iso15924/codelists.html), and the [ISO-3166 alpha-2 country code](/docs/integration/direct/rest/country-codes/).
         */
        language: string;
        /**
         * Partner Configuration Override
         * @description The preference to customize the web experience of the customer by overriding that is set at the Partner's Account.
         */
        partner_config_override: {
            /**
             * Format: uri
             * @description The partner logo URL to display in the customer's onboarding flow.
             */
            partner_logo_url?: string;
            /**
             * Format: uri
             * @description The URL to which to redirect the customer upon completion of the onboarding process.
             */
            return_url?: string;
            /** @description The description of the return URL. */
            return_url_description?: string;
            /**
             * Format: uri
             * @description If `renew_action_url` expires, redirect the customer to this URL.
             */
            action_renewal_url?: string;
            /** @description Indicates whether to show an add credit card page. */
            show_add_credit_card?: boolean;
        };
        /**
         * Bank Account Identifier
         * @description The bank account ID. An ID with `ROUTING_NUMBER_1` is required.
         */
        identifier: {
            /**
             * @description The bank account ID type.
             * @enum {string}
             */
            type?: "BANK_CODE" | "BI_CODE" | "ROUTING_NUMBER_1" | "ROUTING_NUMBER_2" | "ROUTING_NUMBER_3" | "SWIFT_CODE" | "BRANCH_CODE" | "INTERMEDIARY_SWIFT_CODE" | "BBAN" | "BBAN_ENCRYPTED" | "BBAN_HMAC" | "AGGREGATOR_YODLEE";
            /** @description The value of account identifier. */
            value?: string;
        };
        /**
         * Format: ppaas_common_country_code_v2
         * @description The [two-character ISO 3166-1 code](/docs/integration/direct/rest/country-codes/) that identifies the country or region.<blockquote><strong>Note:</strong> The country code for Great Britain is <code>GB</code> and not <code>UK</code> as used in the top-level domain names for that country. Use the `C2` country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.</blockquote>
         */
        "country_code-2": string;
        /**
         * Portable Postal Address (Medium-Grained)
         * @description The portable international postal address. Maps to [AddressValidationMetadata](https://github.com/googlei18n/libaddressinput/wiki/AddressValidationMetadata) and HTML 5.1 [Autofilling form controls: the autocomplete attribute](https://www.w3.org/TR/html51/sec-forms.html#autofilling-form-controls-the-autocomplete-attribute).
         */
        "address_portable-2": {
            /** @description The first line of the address. For example, number or street. For example, `173 Drury Lane`. Required for data entry and compliance and risk checks. Must contain the full address. */
            address_line_1?: string;
            /** @description The second line of the address. For example, suite or apartment number. */
            address_line_2?: string;
            /** @description The third line of the address, if needed. For example, a street complement for Brazil, direction text, such as `next to Walmart`, or a landmark in an Indian address. */
            address_line_3?: string;
            /** @description The neighborhood, ward, or district. Smaller than `admin_area_level_3` or `sub_locality`. Value is:<ul><li>The postal sorting code for Guernsey and many French territories, such as French Guiana.</li><li>The fine-grained administrative levels in China.</li></ul> */
            admin_area_4?: string;
            /** @description A sub-locality, suburb, neighborhood, or district. Smaller than `admin_area_level_2`. Value is:<ul><li>Brazil. Suburb, bairro, or neighborhood.</li><li>India. Sub-locality or district. Street name information is not always available but a sub-locality or district can be a very small area.</li></ul> */
            admin_area_3?: string;
            /** @description A city, town, or village. Smaller than `admin_area_level_1`. */
            admin_area_2?: string;
            /** @description The highest level sub-division in a country, which is usually a province, state, or ISO-3166-2 subdivision. Format for postal delivery. For example, `CA` and not `California`. Value, by country, is:<ul><li>UK. A county.</li><li>US. A state.</li><li>Canada. A province.</li><li>Japan. A prefecture.</li><li>Switzerland. A kanton.</li></ul> */
            admin_area_1?: string;
            /** @description The postal code, which is the zip code or equivalent. Typically required for countries with a postal code or an equivalent. See [postal code](https://en.wikipedia.org/wiki/Postal_code). */
            postal_code?: string;
            country_code: components["schemas"]["country_code-2"];
            /**
             * Address Details
             * @description The non-portable additional address details that are sometimes needed for compliance, risk, or other scenarios where fine-grain address information might be needed. Not portable with common third party and open source. Redundant with core fields.<br/>For example, `address_portable.address_line_1` is usually a combination of `address_details.street_number`, `street_name`, and `street_type`.
             */
            address_details?: {
                /** @description The street number. */
                street_number?: string;
                /** @description The street name. Just `Drury` in `Drury Lane`. */
                street_name?: string;
                /** @description The street type. For example, avenue, boulevard, road, or expressway. */
                street_type?: string;
                /** @description The delivery service. Post office box, bag number, or post office name. */
                delivery_service?: string;
                /** @description A named locations that represents the premise. Usually a building name or number or collection of buildings with a common name or number. For example, <code>Craven House</code>. */
                building_name?: string;
                /** @description The first-order entity below a named building or location that represents the sub-premise. Usually a single building within a collection of buildings with a common name. Can be a flat, story, floor, room, or apartment. */
                sub_building?: string;
            };
        };
        /**
         * Mandate
         * @description Seller’s consent to operate on this financial instrument.
         */
        mandate: {
            /** @description Whether mandate was accepted or not. */
            accepted: boolean;
        };
        /**
         * Bank Account
         * @description The bank account information.
         */
        bank: {
            /** @description The user-provided short name for the user's bank account. */
            nick_name?: string;
            /** @description The bank account number. */
            account_number: string;
            /**
             * @description The type of bank account.
             * @enum {string}
             */
            account_type: "CHECKING" | "SAVINGS";
            /** @description The primary currency code of the bank account. */
            currency_code?: components["schemas"]["currency_code"];
            /** @description An array of instrument institute attributes. Used with the account number to uniquely identify the instrument. Value is:<ul><li>For banks with IBAN information, the IBAN number.</li><li>For banks with BBAN information, the BBAN number.</li><li>For banks with both IBAN and BBAN information, the IBAN number.</li></ul> */
            identifiers?: components["schemas"]["identifier"][];
            /** @description The branch location, if applicable. */
            branch_location?: components["schemas"]["address_portable-2"];
            /** @description Mandate for this bank account. */
            mandate?: components["schemas"]["mandate"];
        };
        /**
         * Financial instrument.
         * @description Financial instruments attached to this account.
         */
        financial_instruments: {
            /** @description An array of banks attached to this managed account. */
            banks?: components["schemas"]["bank"][];
        };
        /**
         * CLASSIC API integration
         * @description The integration details for PayPal CLASSIC endpoints.
         */
        classic_api_integration: Record<string, never>;
        /**
         * REST Endpoint Features
         * @description The REST endpoint.
         * @enum {string}
         */
        rest_endpoint_features_enum: "PAYOUTS" | "PAYMENT" | "REFUND" | "FUTURE_PAYMENT" | "DIRECT_PAYMENT" | "PARTNER_FEE" | "DELAY_FUNDS_DISBURSEMENT" | "READ_SELLER_DISPUTE" | "UPDATE_SELLER_DISPUTE" | "ADVANCED_TRANSACTIONS_SEARCH" | "SWEEP_FUNDS_EXTERNAL_SINK" | "ACCESS_MERCHANT_INFORMATION" | "TRACKING_SHIPMENT_READWRITE" | "INVOICE_READ_WRITE" | "DISPUTE_READ_BUYER" | "UPDATE_CUSTOMER_DISPUTES" | "VAULT" | "BILLING_AGREEMENT";
        /**
         * REST API Integration
         * @description The integration details for PayPal REST endpoints.
         */
        rest_api_integration: {
            /**
             * @description The REST-credential integration method.
             * @default PAYPAL
             * @enum {string}
             */
            integration_method: "BRAINTREE" | "PAYPAL";
            /**
             * Integration Type
             * @description The type of REST-endpoint integration. To integrate with Braintree v.zero for PayPal REST endpoints, specify `third_party_details`.
             * @enum {string}
             */
            integration_type?: "FIRST_PARTY" | "THIRD_PARTY";
            /**
             * REST First-Party Details
             * @description The integration details for PayPal first party REST endpoints.
             */
            first_party_details?: {
                /** @description An array of features that partner can access, or use, in PayPal on behalf of the seller. The seller grants permission for these features to the partner. */
                features: components["schemas"]["rest_endpoint_features_enum"][];
                /** @description S256 - The code verifier must be high-entropy cryptographic random string with a byte length of 43-128 range. */
                seller_nonce: string;
            };
            /**
             * REST Third-Party Details
             * @description The integration details for PayPal REST endpoints.
             */
            third_party_details?: {
                /** @description An array of features that partner can access, or use, in PayPal on behalf of the seller. The seller grants permission for these features to the partner. */
                features: components["schemas"]["rest_endpoint_features_enum"][];
            };
        };
        /**
         * Integration Details
         * @description The integration details for the partner and customer relationship. Required if `operation` is `API_INTEGRATION`.
         */
        integration_details: {
            classic_api_integration?: components["schemas"]["classic_api_integration"];
            rest_api_integration?: components["schemas"]["rest_api_integration"];
        };
        /**
         * Billing Experience Preference
         * @description The preference that customizes the billing experience of the customer.
         */
        billing_experience_preference: {
            /** @description The ID of the payment web experience profile. */
            experience_id?: string;
            /** @description Indicates whether the partner has already displayed the billing context to the seller. */
            billing_context_set?: boolean;
        };
        /**
         * Billing Agreement
         * @description The details of the billing agreement between the partner and a seller.
         */
        billing_agreement: {
            /** @description The billing agreement description. */
            description?: string;
            billing_experience_preference?: components["schemas"]["billing_experience_preference"];
            /** @description The custom data for the billing agreement. */
            merchant_custom_data?: string;
            /**
             * Format: uri
             * @description The URL to which to redirect seller to accept the billing agreement.
             */
            approval_url?: string;
            /** @description The billing agreement token for the agreement. */
            ec_token?: string;
        };
        /**
         * Operation
         * @description The required operation to share data.
         */
        operation: {
            /**
             * @description The operation to enable for the customer. To enable the collection of the API permissions that you require to integrate with the customer, specify `API_INTEGRATION`. `BANK_ADDITION` is supported only for the US.
             * @enum {string}
             */
            operation?: "API_INTEGRATION" | "BANK_ADDITION" | "BILLING_AGREEMENT" | "CONTEXTUAL_MARKETING_CONSENT" | "SALESFORCE_REFERRAL";
            api_integration_preference?: components["schemas"]["integration_details"];
            billing_agreement?: components["schemas"]["billing_agreement"];
        };
        /**
         * Product Name
         * @description The PayPal product for which the customer is onboarded.
         * @enum {string}
         */
        product: "EXPRESS_CHECKOUT" | "PAYPAL_COMMERCE_PLATFORM_BUSINESS" | "PPPLUS" | "WEBSITE_PAYMENT_PRO" | "PAYMENT_METHODS" | "PPCP" | "ADVANCED_VAULTING" | "IZETTLE";
        /**
         * Capability
         * @description Optional capabilities of the selected PayPal product for which the customer is being onboarded.
         * @enum {string}
         */
        capabilities: "PAYPAL_WALLET_VAULTING_ADVANCED" | "PAY_UPON_INVOICE" | "APPLE_PAY";
        dependent_process: unknown;
        /**
         * Legal Consent
         * @description The customer-provided consent.
         */
        legal_consent: {
            /**
             * @description The type of consent. `SHARE_DATA_CONSENT` gives consent to you to share your customer's data with PayPal.
             * @enum {string}
             */
            type: "SHARE_DATA_CONSENT";
            /** @description Indicates whether the customer agreed to share this type of data. To give consent, specify `true`. To withhold consent, specify `false`. */
            granted: boolean;
        };
        /**
         * Format: ppaas_common_currency_code_v2
         * @description The [three-character ISO-4217 currency code](/docs/api/reference/currency-codes/) that identifies the currency.
         */
        "currency_code-2": string;
        /**
         * Requested transfer method and currency for a country
         * @description Requested transfer method and currency for a country.
         */
        transfer_method: {
            /**
             * @description Transfer Method type.
             * @enum {string}
             */
            transfer_method_type?: "BANK_ACCOUNT" | "PAYPAL" | "VENMO" | "WIRE_ACCOUNT";
            /** @description Requested Currencies for a Transfer Method. */
            currencies?: components["schemas"]["currency_code-2"][];
        };
        /**
         * Requested country, transfer method and currency
         * @description Requested country, transfer method and currency.
         */
        country_transfer_method_currency_selection: {
            /** @description Country. */
            country?: components["schemas"]["country_code"];
            /** @description Requested transfer method and currency for a country. */
            transfer_methods?: components["schemas"]["transfer_method"][];
        };
        /**
         * Payout Attributes
         * @description Payout specific attributes.
         */
        payout_attributes: {
            /** @description If `true`, specifies that the merchant or platform is offering goods or services on behalf of 3rd party sellers. */
            marketplace?: boolean;
            /** @description If `true`, specifies that the Kyc is required for the merchant. */
            kyc_required?: boolean;
            /** @description Requested country, transfer method and currency. */
            country_transfer_method_currency_selection?: components["schemas"]["country_transfer_method_currency_selection"][];
        };
        /**
         * Customer Data
         * @description The customer's referral data that partners share with PayPal.
         */
        referral_data: {
            [key: string]: unknown;
        } & (components["schemas"]["account"] & {
            /** @description Email address of the customer used to create the account. */
            email?: components["schemas"]["email_address"];
            /** @description The preferred [locale code](/docs/api/reference/locale-codes/) to use in the onboarding flow for the customer. */
            preferred_language_code?: components["schemas"]["language"];
            /** @description The partner's unique identifier for this customer in their system which can be used to track user in PayPal. */
            tracking_id?: string;
            /** @description The configuration property that the partner intends to override for this onboarding request. */
            partner_config_override?: components["schemas"]["partner_config_override"];
            /** @description Array of financial instruments attached to the customer's account. */
            financial_instruments?: components["schemas"]["financial_instruments"];
            /** @description An array of operations to perform for the customer while they share their data. */
            operations: components["schemas"]["operation"][];
            /** @description An array of PayPal products to which the partner wants to onboard the customer. */
            products?: components["schemas"]["product"][];
            /** @description An array of capabilities which the partner wants to enable for the selected products. Supported only when products are specified. */
            capabilities?: components["schemas"]["capabilities"][];
            /** @description An array of dependent processes. */
            outside_process_dependencies?: components["schemas"]["dependent_process"][];
            /** @description An array of all consents that the partner has received from this seller. If `SHARE_DATA_CONSENT` is not granted, PayPal does not store customer data. */
            legal_consents: components["schemas"]["legal_consent"][];
            /** @description Payout specific attributes. */
            payout_attributes?: components["schemas"]["payout_attributes"];
        });
        /**
         * Create Referral Data Response
         * @description The shared referral data.
         */
        create_referral_data_response: {
            /**
             * Links
             * @description An array of request-related [HATEOAS links](/docs/api/overview/#hateoas-links).
             */
            readonly links?: components["schemas"]["link_description"][];
        };
        /**
         * Referral Data Response
         * @description The share referral data response.
         */
        referral_data_response: {
            /** @description The ID to access the customer's data shared by the partner with PayPal. */
            readonly partner_referral_id?: string;
            /** @description The payer ID of the partner who shared the referral data. */
            readonly submitter_payer_id?: string;
            referral_data?: components["schemas"]["referral_data"];
            /**
             * Links
             * @description An array of request-related [HATEOAS links](/docs/api/overview/#hateoas-links).
             */
            readonly links?: components["schemas"]["link_description"][];
        };
    };
    responses: {
        /** @description The default response. */
        default: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["error_default"];
            };
        };
    };
    parameters: {
        /** @description The ID of the partner-referrals data for which to show details. */
        partner_referral_id: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "partner-referrals.create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["referral_data"];
            };
        };
        responses: {
            /** @description A successful request returns the HTTP `201 Created` status code and a JSON response body that contains a [HATEOAS link](/docs/api/overview/#hateoas-links) to show the referral data and an `action_url` to which you redirect the customer in a browser to complete the signup process. The `partner_referral_id` token is appended to the URL. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["create_referral_data_response"];
                };
            };
            /** @description Request is not well-formed, syntactically incorrect, or violates schema. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_400"] & components["schemas"]["400"];
                };
            };
            /** @description The API call is not authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_401"] & components["schemas"]["401"];
                };
            };
            /** @description Authorization failed due to insufficient permissions or missing scopes on the caller account. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_403"] & components["schemas"]["403"];
                };
            };
            /** @description The caller is not a business account or the account is closed or locked. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_422"] & components["schemas"]["422"];
                };
            };
            /** @description An internal server error has occurred. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_500"];
                };
            };
            default: components["responses"]["default"];
        };
    };
    "partner-referrals.read": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the partner-referrals data for which to show details. */
                partner_referral_id: components["parameters"]["partner_referral_id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that shows referral data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["referral_data_response"];
                };
            };
            /** @description The API call is not authorized. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_401"] & components["schemas"]["401"];
                };
            };
            /** @description Authorization failed due to insufficient permissions or missing scopes on the caller Account. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_403"] & components["schemas"]["403"];
                };
            };
            /** @description An internal server error has occurred. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error_500"];
                };
            };
            default: components["responses"]["default"];
        };
    };
}
