/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/payment-experience/web-profiles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List web experience profiles
         * @description Lists the latest 20 web experience profiles for a merchant or subject. To show details for these or additional profiles, you can show web experience profile details by ID.
         */
        get: operations["web-profile.get-list"];
        put?: never;
        /**
         * Create web experience profile
         * @description Creates a web experience profile. In the JSON request body, specify the profile name and details.
         */
        post: operations["web-profile.create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payment-experience/web-profiles/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show web experience profile details by ID
         * @description Shows details for a web experience profile, by ID.
         */
        get: operations["web-profile.get"];
        /**
         * Update web experience profile
         * @description Updates a web experience profile, by ID. In the JSON request body, specify the profile details. If your request omits any profile parameters, any previously set values for those parameters are removed.
         */
        put: operations["web-profile.update"];
        post?: never;
        /**
         * Delete web experience profile
         * @description Deletes a web experience profile, by ID.
         */
        delete: operations["web-profile.delete"];
        options?: never;
        head?: never;
        /**
         * Partially update web experience profile
         * @description Partially-updates a web experience profile, by ID. In the JSON request body, specify a patch object, the path of the profile location to update, and a new value.
         */
        patch: operations["web-profile.partial-update"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * Error Details
         * @description The error details. Required for client-side `4XX` errors.
         */
        error_details: {
            /** @description The field that caused the error. If this field is in the body, set this value to the field's JSON pointer value. Required for client-side errors. */
            field?: string;
            /** @description The value of the field that caused the error. */
            value?: string;
            location?: components["schemas"]["error_location"];
            /** @description The unique, fine-grained application-level error code. */
            issue: string;
            /** @description The human-readable description for an issue. The description can change over the lifetime of an API, so clients must not depend on this value. */
            description?: string;
        };
        /**
         * @description The location of the field that caused the error. Value is `body`, `path`, or `query`.
         * @default body
         * @enum {string}
         */
        error_location: "body" | "path" | "query";
        /**
         * Link Description
         * @description The request-related [HATEOAS link](/api/rest/responses/#hateoas-links) information.
         */
        error_link_description: {
            /** @description The complete target URL. To make the related call, combine the method with this [URI Template-formatted](https://tools.ietf.org/html/rfc6570) link. For pre-processing, include the `$`, `(`, and `)` characters. The `href` is the key HATEOAS component that links a completed call with a subsequent call. */
            href: string;
            /** @description The [link relation type](https://tools.ietf.org/html/rfc5988#section-4), which serves as an ID for a link that unambiguously describes the semantics of the link. See [Link Relations](https://www.iana.org/assignments/link-relations/link-relations.xhtml). */
            rel: string;
            /**
             * @description The HTTP method required to make the related call.
             * @enum {string}
             */
            method?: "GET" | "POST" | "PUT" | "DELETE" | "PATCH";
        };
        /**
         * Bad Request Error
         * @description Request is not well-formed, syntactically incorrect, or violates schema.
         */
        error_400: {
            /** @enum {string} */
            name?: "INVALID_REQUEST";
            /** @enum {string} */
            message?: "Request is not well-formed, syntactically incorrect, or violates schema.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Unauthorized Error
         * @description Authentication failed due to missing Authorization header, or invalid authentication credentials.
         */
        error_401: {
            /** @enum {string} */
            name?: "AUTHENTICATION_FAILURE";
            /** @enum {string} */
            message?: "Authentication failed due to missing authorization header, or invalid authentication credentials.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Not Authorized Error
         * @description The client is not authorized to access this resource, although it may have valid credentials.
         */
        error_403: {
            /** @enum {string} */
            name?: "NOT_AUTHORIZED";
            /** @enum {string} */
            message?: "Authorization failed due to insufficient permissions.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Not found Error
         * @description The server has not found anything matching the request URI. This either means that the URI is incorrect or the resource is not available.
         */
        error_404: {
            /** @enum {string} */
            name?: "RESOURCE_NOT_FOUND";
            /** @enum {string} */
            message?: "The specified resource does not exist.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Resource Conflict Error
         * @description The server has detected a conflict while processing this request.
         */
        error_409: {
            /** @enum {string} */
            name?: "RESOURCE_CONFLICT";
            /** @enum {string} */
            message?: "The server has detected a conflict while processing this request.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Unsupported Media Type Error
         * @description The server does not support the request payload's media type.
         */
        error_415: {
            /** @enum {string} */
            name?: "UNSUPPORTED_MEDIA_TYPE";
            /** @enum {string} */
            message?: "The server does not support the request payload's media type.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Unprocessable Entity Error
         * @description The requested action cannot be performed and may require interaction with APIs or processes outside of the current request. This is distinct from a 500 response in that there are no systemic problems limiting the API from performing the request.
         */
        error_422: {
            /** @enum {string} */
            name?: "UNPROCESSABLE_ENTITY";
            /** @enum {string} */
            message?: "The requested action could not be performed, semantically incorrect, or failed business validation.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Internal Server Error
         * @description This is either a system or application error, and generally indicates that although the client appeared to provide a correct request, something unexpected has gone wrong on the server.
         * @example {
         *       "name": "INTERNAL_SERVER_ERROR",
         *       "message": "An internal server error occurred.",
         *       "debug_id": "90957fca61718",
         *       "links": [
         *         {
         *           "href": "https://developer.paypal.com/api/orders/v2/#error-INTERNAL_SERVER_ERROR",
         *           "rel": "information_link"
         *         }
         *       ]
         *     }
         */
        error_500: {
            /** @enum {string} */
            name?: "INTERNAL_SERVER_ERROR";
            /** @enum {string} */
            message?: "An internal server error occurred.";
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Service Unavailable Error
         * @description The server is temporarily unable to handle the request, for example, because of planned maintenance or downtime.
         * @example {
         *       "name": "SERVICE_UNAVAILABLE",
         *       "message": "Service Unavailable.",
         *       "debug_id": "90957fca61718",
         *       "information_link": "https://developer.paypal.com/docs/api/orders/v2/#error-SERVICE_UNAVAILABLE"
         *     }
         */
        error_503: {
            /** @enum {string} */
            name?: "SERVICE_UNAVAILABLE";
            /** @enum {string} */
            message?: "Service Unavailable.";
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Error Details
         * @description The error details. Required for client-side `4XX` errors.
         */
        "error_details-2": {
            /** @description The name of the field that caused the error. */
            field: string;
            /** @description The reason for the error. */
            issue: string;
        };
        /**
         * Error
         * @description The error information.
         */
        error: {
            /** @description The human-readable, unique name of the error. */
            readonly name: string;
            /** @description The PayPal internal ID. Used for correlation purposes. */
            readonly debug_id?: string;
            /** @description The message that describes the error. */
            readonly message: string;
            /** @description The URI to detailed information related to this error for the developer. */
            readonly information_link: string;
            /** @description An array of additional details for the error. */
            readonly details?: components["schemas"]["error_details-2"][];
        };
        /**
         * Web Profile
         * @description A payment web experience profile.
         */
        web_profile: {
            /** @description The ID of the web experience profile. */
            readonly id?: string;
            /** @description The web experience profile name. Must be unique for a set of profiles for a merchant. */
            name: string;
            /** @description Indicates whether the profile persists for three hours or permanently. To persist the profile permanently, set to `false`. To persist the profile for three hours, set to `true`. */
            temporary?: boolean;
            /**
             * Flow Configuration
             * @description The flow configuration parameters.
             */
            flow_config?: {
                /**
                 * @description The type of landing page to display on the PayPal site for user checkout. To use the non-PayPal account landing page, set to `Billing`. To use the PayPal account login landing page, set to `Login`.
                 * @enum {string}
                 */
                landing_page_type?: "login" | "billing";
                /**
                 * Format: uri
                 * @description The merchant site URL to display after a bank transfer payment. In Germany, valid only for the Giropay payment method or bank transfer payment method.
                 */
                bank_txn_pending_url?: string;
                /**
                 * @description Presents either the **Continue** or **Pay Now** checkout flow to the customer.<br/><br/>Default is **Continue**, or `user_action=continue`. When you do not know the final payment amount, accept this default flow, which redirects the customer to the PayPal payment page with the **Continue** button. When the customer clicks **Continue**, the customer can change the payment amount.<br/><br/> When you know the final payment amount, set `user_action=commit` to choose the **Pay Now** flow, which redirects the customer to the PayPal payment page with the **Pay Now** button. When the customer clicks **Pay Now**, the payment is processed immediately.
                 * @enum {string}
                 */
                user_action?: "COMMIT";
                /**
                 * @description The HTTP method to use to redirect the customer to a return URL. Value is `GET` or `POST`.
                 * @enum {string}
                 */
                return_uri_http_method?: "GET" | "POST";
            };
            /**
             * Input Field Customization
             * @description The input field customization parameters.
             */
            input_fields?: {
                /** @description Indicates whether PayPal displays shipping address fields on the experience pages. Value is:<ul><li><code>0</code>. Displays the shipping address on the PayPal pages.</li><li><code>1</code>. Redacts shipping address fields from the PayPal pages. For digital goods, this field is required and must be <code>1</code>.</li><li><code>2</code>. Gets the shipping address from the customer's account profile.</li></ul> */
                no_shipping?: number;
                /** @description Indicates whether to display the shipping address that is passed to this call rather than the one on file for this buyer on the PayPal experience pages. Value is:<ul><li><code>0</code>. Displays the shipping address on file.</li><li><code>1</code>. Displays the shipping address specified in this call. the customer cannot edit this shipping address.</li></ul> */
                address_override?: number;
            };
            /**
             * Style and Presentation
             * @description The style and presentation parameters.
             */
            presentation?: {
                /** @description A label that overrides the business name in the PayPal account on the PayPal pages. Character length and limitations: 127 single-byte alphanumeric characters. */
                brand_name?: string;
                /** @description A URL to the logo image. A valid media type is `.gif`, `.jpg`, or `.png`. The image's maximum width is 190 pixels and maximum height is 60 pixels. PayPal crops images that are larger. PayPal places your logo image at the top of the cart review area. PayPal recommends that you store the image on a secure (HTTPS) server. Otherwise, web browsers display a message that checkout pages contain non-secure items. Character length and limitations: 127 single-byte alphanumeric characters. */
                logo_image?: string;
                /** @description The locale of pages that the PayPal payment experience displays. A valid value is `AU`, `AT`, `BE`, `BR`, `CA`, `CH`, `CN`, `DE`, `ES`, `GB`, `FR`, `IT`, `NL`, `PL`, `PT`, `RU`, or `US`. A 5-character code is also valid for languages in these countries: `da_DK`, `he_IL`, `id_ID`, `ja_JP`, `no_NO`, `pt_BR`, `ru_RU`, `sv_SE`, `th_TH`, `zh_CN`, `zh_HK`, or `zh_TW`. */
                locale_code?: string;
            };
        };
        /**
         * Web Profile List
         * @description An array of web profiles.
         */
        web_profile_list: components["schemas"]["web_profile"][];
        /**
         * Patch
         * @description The JSON patch object to apply partial updates to resources.
         */
        patch: {
            /**
             * @description The operation.
             * @enum {string}
             */
            op: "add" | "remove" | "replace" | "move" | "copy" | "test";
            /** @description The <a href="https://tools.ietf.org/html/rfc6901">JSON Pointer</a> to the target document location at which to complete the operation. */
            path?: string;
            /**
             * Patch Value
             * @description The value to apply. The <code>remove</code> operation does not require a value.
             */
            value?: unknown;
            /** @description The <a href="https://tools.ietf.org/html/rfc6901">JSON Pointer</a> to the target document location from which to move the value. Required for the <code>move</code> operation. */
            from?: string;
        };
        /**
         * Patch Request
         * @description An array of JSON patch objects to apply partial updates to resources.
         */
        patch_request: components["schemas"]["patch"][];
    };
    responses: never;
    parameters: {
        /** @description The server stores keys for three hours. */
        paypal_request_id: string;
        /** @description The ID of the profile to delete. */
        id: string;
    };
    requestBodies: {
        web_profile: {
            content: {
                "application/json": components["schemas"]["web_profile"];
            };
        };
    };
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "web-profile.get-list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that lists the latest 20 profiles that the merchant owns, with details. To show details for these or additional profiles, you can show web experience profile details by ID. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["web_profile_list"];
                };
            };
            /** @description An internal server error occurred. The request returns the HTTP `500 Internal Server Error` status code. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "web-profile.create": {
        parameters: {
            query?: never;
            header: {
                /** @description The server stores keys for three hours. */
                "PayPal-Request-Id": components["parameters"]["paypal_request_id"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["web_profile"];
        responses: {
            /** @description A successful request, with or without the optional <code>PayPal-Request-Id</code> request header, returns the HTTP <code>201 Created</code> status code and a JSON response body that shows the profile details and the ID of the profile. Any subsequent calls with the same <code>PayPal-Request-Id</code> request header value within a three-hour window returns the HTTP <code>200 OK</code> status code and a JSON response body that shows the profile details and the ID of the profile. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["web_profile"];
                };
            };
            /** @description A successful request, with or without the optional <code>PayPal-Request-Id</code> request header, returns the HTTP <code>201 Created</code> status code and a JSON response body that shows the profile details and the ID of the profile. Any subsequent calls with the same <code>PayPal-Request-Id</code> request header value within a three-hour window returns the HTTP <code>200 OK</code> status code and a JSON response body that shows the profile details and the ID of the profile. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["web_profile"];
                };
            };
            /** @description An internal server error occurred. The request returns the HTTP `500 Internal Server Error` status code. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "web-profile.get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the profile to delete. */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that shows the profile details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["web_profile"];
                };
            };
            /** @description An internal server error occurred. The request returns the HTTP `500 Internal Server Error` status code. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "web-profile.update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the profile to delete. */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["web_profile"];
        responses: {
            /** @description A successful request returns the HTTP `204 No Content` status code with no JSON response body. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An internal server error occurred. The request returns the HTTP `500 Internal Server Error` status code. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "web-profile.delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the profile to delete. */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `204 No Content` status code with no JSON response body. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An internal server error occurred. The request returns the HTTP `500 Internal Server Error` status code. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "web-profile.partial-update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the profile to delete. */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["patch_request"];
            };
        };
        responses: {
            /** @description A successful request returns the HTTP `204 No Content` status code with no JSON response body. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description An internal server error occurred. The request returns the HTTP `500 Internal Server Error` status code. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
}
