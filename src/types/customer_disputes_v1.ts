/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/customer/disputes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List disputes
         * @description Lists disputes with a summary set of details, which shows the <code>dispute_id</code>, <code>reason</code>, <code>status</code>, <code>dispute_state</code>, <code>dispute_life_cycle_stage</code>, <code>dispute_channel</code>, <code>dispute_amount</code>, <code>create_time</code> and <code>update_time</code> fields.<br/><br/>To filter the disputes in the response, specify one or more optional query parameters. To limit the number of disputes in the response, specify the <code>page_size</code> query parameter.<br/><br/>To list multiple disputes, set these query parameters in the request:<ul><li><code>page_size=2</code></li><li><code>start_time</code> instead of <code>disputed_transaction_id</code></li></ul><br/>If the response contains more than two disputes, it lists two disputes and includes a HATEOAS link to the next page of results.
         */
        get: operations["disputes.list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customer/disputes/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show dispute details
         * @description Shows details for a dispute, by ID.<blockquote><strong>Note:</strong> The fields that appear in the response depend on the access. For example, if the merchant requests shows dispute details, the customer's email ID does not appear.</blockquote>
         */
        get: operations["disputes.get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Partially update dispute
         * @description Partially updates a dispute, by ID. Seller can update the `communication_detail` value or The partner can add the `partner action` information.
         */
        patch: operations["disputes.patch"];
        trace?: never;
    };
    "/v1/customer/disputes/{id}/provide-evidence": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Provide evidence
         * @description Provides evidence for a dispute, by ID. A merchant can provide evidence for disputes with the <code>WAITING_FOR_SELLER_RESPONSE</code> status while customers can provide evidence for disputes with the <code>WAITING_FOR_BUYER_RESPONSE</code> status. Evidence can be a proof of delivery or proof of refund document or notes, which can include logs. A proof of delivery document includes a tracking number while a proof of refund document includes a refund ID. For other evidence type, notes and documents can be given. Evidences requested from you can be found by checking the type of evidence for the corresponding source under the evidence section of the <a href="/docs/api/customer-disputes/v1/#disputes_get">show dispute details</a> response. The source will be <code>REQUESTED_FROM_SELLER</code> for evidences requested from the merchant while it will be <code>REQUESTED_FROM_BUYER</code> for evidences requested from the customer. For constraints and rules regarding documents, see <a href="/docs/integration/direct/customer-disputes/integration-guide/#documents">documents</a>.<br/>To make this request, specify the evidence in the JSON request body and use the <code>provide-evidence</code> link in the <a href="/docs/api/reference/api-responses/#hateoas-links/">HATEOAS links</a> of the <a href="/docs/api/customer-disputes/v1/#disputes_get">show dispute details</a> response. In case the link is not present in the response, you can't provide evidence for the dispute. For information about dispute reasons, see <a href="/docs/integration/direct/customer-disputes/integration-guide/#dispute-reasons">dispute reasons</a>.
         */
        post: operations["disputes.provide-evidence"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customer/disputes/{id}/appeal": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Appeal dispute
         * @description Appeals a dispute, by ID. To appeal a dispute, use the <code>appeal</code> link in the <a href="/docs/api/reference/api-responses/#hateoas-links/">HATEOAS links</a> from the show dispute details response. If this link does not appear, you cannot appeal the dispute. Submit new evidence as a document or notes in the JSON request body. For constraints and rules regarding documents, see <a href="/docs/integration/direct/customer-disputes/integration-guide/#documents">documents</a>.<br/>To make this request, specify the dispute ID in the URI and specify the evidence in the JSON request body. For information about dispute reasons, see <a href="/docs/integration/direct/customer-disputes/integration-guide/#dispute-reasons">dispute reasons</a>.
         */
        post: operations["disputes.appeal"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customer/disputes/{id}/accept-claim": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Accept claim
         * @description Accepts liability for a claim, by ID. When you accept liability for a claim, the dispute closes in the customerâ€™s favor and PayPal automatically refunds money to the customer from the merchant's account. Allowed accept_claim_type values for the request is available in dispute details <a href="/docs/api/customer-disputes/v1/#definition-allowed_response_options">allowed response options</a> object.
         */
        post: operations["disputes.accept-claim"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customer/disputes/{id}/adjudicate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Settle dispute
         * @description <blockquote><strong>Important:</strong> This method is for sandbox use only.</blockquote> Settles a dispute in either the customer's or merchant's favor. Merchants can make this call in the sandbox to complete end-to-end dispute resolution testing, which mimics the dispute resolution that PayPal agents normally complete. To make this call, the dispute <code>status</code> must be <code>UNDER_REVIEW</code> and <code>adjudicate</code> link  should be available in the <a href="/docs/api/customer-disputes/v1/#disputes_get!c=200&path=links&t=response/">HATEOAS links</a> of the <a href="/docs/api/customer-disputes/v1/#disputes_get">show dispute details</a> response.
         */
        post: operations["disputes.adjudicate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customer/disputes/{id}/require-evidence": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update dispute status
         * @description <blockquote><strong>Important:</strong> This method is for sandbox use only.</blockquote> Updates the status of a dispute, by ID, from <code>UNDER_REVIEW</code> to either:<ul><li><code>WAITING_FOR_BUYER_RESPONSE</code></li><li><code>WAITING_FOR_SELLER_RESPONSE</code></li></ul>This status change enables either the customer or merchant to submit evidence for the dispute. To make this call, the dispute <code>status</code> must be <code>UNDER_REVIEW</code> and <code>require-evidence</code> link  should be available in the <a href="/docs/api/customer-disputes/v1/#disputes_get!c=200&path=links&t=response/">HATEOAS links</a> of the <a href="/docs/api/customer-disputes/v1/#disputes_get">show dispute details</a> response. Specify an <code>action</code> value in the JSON request body to indicate whether the status change enables the customer or merchant to submit evidence:<table><thead><tr align="left"><th>If <code>action</code> is</th><th>The <code>status</code> updates to</th></tr></thead><tbody><tr><td><code>BUYER_EVIDENCE</code></td><td> <code>WAITING_FOR_BUYER_RESPONSE</code></td></tr><tr><td><code>SELLER_EVIDENCE</code></td><td> <code>WAITING_FOR_SELLER_RESPONSE</code></td></tr></tbody></table>.
         */
        post: operations["disputes.require-evidence"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customer/disputes/{id}/escalate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Escalate dispute to claim
         * @description Escalates the dispute, by ID, to a PayPal claim. To make this call, the stage in the dispute lifecycle must be `INQUIRY`.
         */
        post: operations["disputes.escalate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customer/disputes/{id}/send-message": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send message about dispute to other party
         * @description Sends a message about a dispute, by ID, to the other party in the dispute. Merchants and customers can only send messages if the `dispute_life_cycle_stage` value is `INQUIRY`. For constraints and rules regarding documents that can be attached as part of the message, see <a href="/docs/integration/direct/customer-disputes/integration-guide/#documents">documents</a>. To send a message, use the <code>send-message</code> link in the <a href="/docs/api/reference/api-responses/#hateoas-links/">HATEOAS links</a> of the <a href="/docs/api/customer-disputes/v1/#disputes_get">show dispute details</a> response and specify the message in the JSON request body. In case the link is not present in the response you can't send a message on the dispute.
         */
        post: operations["disputes.send-message"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customer/disputes/{id}/make-offer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Make offer to resolve dispute
         * @description Makes an offer to the other party to resolve a dispute, by ID. To make this call, the stage in the dispute lifecycle must be `INQUIRY`. If the customer accepts the offer, PayPal automatically makes a refund. Allowed offer_type values for the request is available in dispute details <a href="/docs/api/customer-disputes/v1/#definition-allowed_response_options">allowed response options</a> object.
         */
        post: operations["disputes.make-offer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customer/disputes/{id}/accept-offer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Accept offer to resolve dispute
         * @description The customer accepts the offer from merchant to resolve a dispute, by ID. PayPal automatically refunds the amount proposed by merchant to the customer.
         */
        post: operations["disputes.accept-offer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customer/disputes/{id}/deny-offer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Deny offer to resolve dispute
         * @description Denies an offer that the merchant proposes for a dispute, by ID.
         */
        post: operations["disputes.deny-offer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customer/disputes/{id}/acknowledge-return-item": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Acknowledge returned item
         * @description Acknowledges that the customer returned an item for a dispute, by ID. A merchant can make this request for disputes with the `MERCHANDISE_OR_SERVICE_NOT_AS_DESCRIBED` reason. Allowed acknowledgement_type values for the request is available in dispute details <a href="/docs/api/customer-disputes/v1/#definition-allowed_response_options">allowed response options</a> object. For constraints and rules regarding documents, see <a href="/docs/integration/direct/customer-disputes/integration-guide/#documents">documents</a>.
         */
        post: operations["disputes.acknowledge-return-item"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/customer/disputes/{id}/provide-supporting-info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Provide supporting information for dispute
         * @description Provides supporting information for a dispute, by ID. A merchant or buyer can make this request for disputes if they find the `provide-supporting-info` link in the HATEOAS links in the list disputes response. The party can provide the supporting information to PayPal to defend themselves only when the `dispute_life_cycle_stage` is `CHARGEBACK`, `PRE_ARBITRATION`, or `ARBITRATION`. They can provide a note that describes their part with details or upload any supporting documents to support their side. For constraints and rules regarding documents, see <a href="/docs/integration/direct/customer-disputes/integration-guide/#documents">documents</a>.<br/>To make this request, specify the dispute ID in the URI and specify the notes in the JSON request body. This method differs from the provide evidence method which supports only multipart request, where PayPal asks the concerned party for evidence.
         */
        post: operations["disputes.provide-supporting-info"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * Error Details
         * @description The error details. Required for client-side `4XX` errors.
         */
        error_details: {
            /** @description The field that caused the error. If this field is in the body, set this value to the field's JSON pointer value. Required for client-side errors. */
            field?: string;
            /** @description The value of the field that caused the error. */
            value?: string;
            location?: components["schemas"]["error_location"];
            /** @description The unique, fine-grained application-level error code. */
            issue: string;
            /** @description The human-readable description for an issue. The description can change over the lifetime of an API, so clients must not depend on this value. */
            description?: string;
        };
        /**
         * @description The location of the field that caused the error. Value is `body`, `path`, or `query`.
         * @default body
         * @enum {string}
         */
        error_location: "body" | "path" | "query";
        /**
         * Link Description
         * @description The request-related [HATEOAS link](/api/rest/responses/#hateoas-links) information.
         */
        error_link_description: {
            /** @description The complete target URL. To make the related call, combine the method with this [URI Template-formatted](https://tools.ietf.org/html/rfc6570) link. For pre-processing, include the `$`, `(`, and `)` characters. The `href` is the key HATEOAS component that links a completed call with a subsequent call. */
            href: string;
            /** @description The [link relation type](https://tools.ietf.org/html/rfc5988#section-4), which serves as an ID for a link that unambiguously describes the semantics of the link. See [Link Relations](https://www.iana.org/assignments/link-relations/link-relations.xhtml). */
            rel: string;
            /**
             * @description The HTTP method required to make the related call.
             * @enum {string}
             */
            method?: "GET" | "POST" | "PUT" | "DELETE" | "PATCH";
        };
        /**
         * Bad Request Error
         * @description Request is not well-formed, syntactically incorrect, or violates schema.
         */
        error_400: {
            /** @enum {string} */
            name?: "INVALID_REQUEST";
            /** @enum {string} */
            message?: "Request is not well-formed, syntactically incorrect, or violates schema.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Unauthorized Error
         * @description Authentication failed due to missing Authorization header, or invalid authentication credentials.
         */
        error_401: {
            /** @enum {string} */
            name?: "AUTHENTICATION_FAILURE";
            /** @enum {string} */
            message?: "Authentication failed due to missing authorization header, or invalid authentication credentials.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Not Authorized Error
         * @description The client is not authorized to access this resource, although it may have valid credentials.
         */
        error_403: {
            /** @enum {string} */
            name?: "NOT_AUTHORIZED";
            /** @enum {string} */
            message?: "Authorization failed due to insufficient permissions.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Not found Error
         * @description The server has not found anything matching the request URI. This either means that the URI is incorrect or the resource is not available.
         */
        error_404: {
            /** @enum {string} */
            name?: "RESOURCE_NOT_FOUND";
            /** @enum {string} */
            message?: "The specified resource does not exist.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Resource Conflict Error
         * @description The server has detected a conflict while processing this request.
         */
        error_409: {
            /** @enum {string} */
            name?: "RESOURCE_CONFLICT";
            /** @enum {string} */
            message?: "The server has detected a conflict while processing this request.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Unsupported Media Type Error
         * @description The server does not support the request payload's media type.
         */
        error_415: {
            /** @enum {string} */
            name?: "UNSUPPORTED_MEDIA_TYPE";
            /** @enum {string} */
            message?: "The server does not support the request payload's media type.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Unprocessable Entity Error
         * @description The requested action cannot be performed and may require interaction with APIs or processes outside of the current request. This is distinct from a 500 response in that there are no systemic problems limiting the API from performing the request.
         */
        error_422: {
            /** @enum {string} */
            name?: "UNPROCESSABLE_ENTITY";
            /** @enum {string} */
            message?: "The requested action could not be performed, semantically incorrect, or failed business validation.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Internal Server Error
         * @description This is either a system or application error, and generally indicates that although the client appeared to provide a correct request, something unexpected has gone wrong on the server.
         * @example {
         *       "name": "INTERNAL_SERVER_ERROR",
         *       "message": "An internal server error occurred.",
         *       "debug_id": "90957fca61718",
         *       "links": [
         *         {
         *           "href": "https://developer.paypal.com/api/orders/v2/#error-INTERNAL_SERVER_ERROR",
         *           "rel": "information_link"
         *         }
         *       ]
         *     }
         */
        error_500: {
            /** @enum {string} */
            name?: "INTERNAL_SERVER_ERROR";
            /** @enum {string} */
            message?: "An internal server error occurred.";
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Service Unavailable Error
         * @description The server is temporarily unable to handle the request, for example, because of planned maintenance or downtime.
         * @example {
         *       "name": "SERVICE_UNAVAILABLE",
         *       "message": "Service Unavailable.",
         *       "debug_id": "90957fca61718",
         *       "information_link": "https://developer.paypal.com/docs/api/orders/v2/#error-SERVICE_UNAVAILABLE"
         *     }
         */
        error_503: {
            /** @enum {string} */
            name?: "SERVICE_UNAVAILABLE";
            /** @enum {string} */
            message?: "Service Unavailable.";
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Error Details
         * @description The error details. Required for client-side `4XX` errors.
         */
        "error_details-2": {
            /** @description The field that caused the error. If this field is in the body, set this value to the field's JSON pointer value. Required for client-side errors. */
            field?: string;
            /** @description The value of the field that caused the error. */
            value?: string;
            /**
             * @description The location of the field that caused the error. Value is `body`, `path`, or `query`.
             * @default body
             */
            location: string;
            /** @description The unique, fine-grained application-level error code. */
            issue: string;
            /** @description The human-readable description for an issue. The description can change over the lifetime of an API, so clients must not depend on this value. */
            description?: string;
        };
        /**
         * Link Description
         * @description The request-related [HATEOAS link](/docs/api/reference/api-responses/#hateoas-links) information.
         */
        link_description: {
            /** @description The complete target URL. To make the related call, combine the method with this [URI Template-formatted](https://tools.ietf.org/html/rfc6570) link. For pre-processing, include the `$`, `(`, and `)` characters. The `href` is the key HATEOAS component that links a completed call with a subsequent call. */
            href: string;
            /** @description The [link relation type](https://tools.ietf.org/html/rfc5988#section-4), which serves as an ID for a link that unambiguously describes the semantics of the link. See [Link Relations](https://www.iana.org/assignments/link-relations/link-relations.xhtml). */
            rel: string;
            /**
             * @description The HTTP method required to make the related call.
             * @enum {string}
             */
            method?: "GET" | "POST" | "PUT" | "DELETE" | "HEAD" | "CONNECT" | "OPTIONS" | "PATCH";
        };
        /**
         * Error
         * @description The error details.
         */
        error: {
            /** @description The human-readable, unique name of the error. */
            name: string;
            /** @description The message that describes the error. */
            message: string;
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id: string;
            /** @description The information link, or URI, that shows detailed information about this error for the developer. */
            readonly information_link?: string;
            /** @description An array of additional details about the error. */
            details?: components["schemas"]["error_details-2"][];
            /** @description An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links). */
            readonly links?: components["schemas"]["link_description"][];
        };
        /**
         * Format: ppaas_date_time_v3
         * @description The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
         */
        date_time: string;
        /**
         * Dispute Reason
         * @description The reason for the item-level dispute. For information about the required information for each dispute reason and associated evidence type, see <a href="/docs/integration/direct/customer-disputes/integration-guide/#dispute-reasons">dispute reasons</a>.
         * @enum {string}
         */
        dispute_reason: "MERCHANDISE_OR_SERVICE_NOT_RECEIVED" | "MERCHANDISE_OR_SERVICE_NOT_AS_DESCRIBED" | "UNAUTHORISED" | "CREDIT_NOT_PROCESSED" | "DUPLICATE_TRANSACTION" | "INCORRECT_AMOUNT" | "PAYMENT_BY_OTHER_MEANS" | "CANCELED_RECURRING_BILLING" | "PROBLEM_WITH_REMITTANCE" | "OTHER";
        /**
         * @description The overall status of the dispute, constant for all the parties involved at anytime during the dispute lifecycle.
         * @enum {string}
         */
        status: "OPEN" | "WAITING_FOR_BUYER_RESPONSE" | "WAITING_FOR_SELLER_RESPONSE" | "UNDER_REVIEW" | "RESOLVED" | "OTHER";
        /**
         * Dispute State
         * @description The user specific state of the dispute, could vary between parties during the dispute lifecycle.
         * @enum {string}
         */
        dispute_state: "OPEN_INQUIRIES" | "REQUIRED_ACTION" | "REQUIRED_OTHER_PARTY_ACTION" | "UNDER_PAYPAL_REVIEW" | "APPEALABLE" | "RESOLVED";
        /**
         * Format: ppaas_common_currency_code_v2
         * @description The [three-character ISO-4217 currency code](/docs/api/reference/currency-codes/) that identifies the currency.
         */
        currency_code: string;
        /**
         * Money
         * @description The currency and amount for a financial transaction, such as a balance or payment due.
         */
        money: {
            currency_code: components["schemas"]["currency_code"];
            /** @description The value, which might be:<ul><li>An integer for currencies like `JPY` that are not typically fractional.</li><li>A decimal fraction for currencies like `TND` that are subdivided into thousandths.</li></ul>For the required number of decimal places for a currency code, see [Currency Codes](/docs/api/reference/currency-codes/). */
            value: string;
        };
        /**
         * @description The Cryptocurrency ticker symbol / code as assigned by liquidity providers (exchanges).
         * @enum {string}
         */
        cryptocurrency_symbol: "BTC" | "ETH" | "BCH" | "LTC";
        /** @description Quantity of a cryptocurrency asset.<br/>This is a decimal number with scale defined for each Cryptocurrency by the founders. For example, <li>Bitcoin(BTC) has 8 as scale,</li><li>Ethereum (ETH) has 18 as scale.</li><br/>PayPal Cryptocurrency platform handles the scale to 8 digits for Bitcoin and its forks or offshoots and Ehereum. */
        cryptocurrency_quantity: string;
        /**
         * Cryptocurrency
         * @description Representation of a specific amount of Cryptocurrency, denoted by its symbol and quantity.
         */
        cryptocurrency: {
            asset_symbol: components["schemas"]["cryptocurrency_symbol"];
            quantity: components["schemas"]["cryptocurrency_quantity"];
        };
        /**
         * @description The stage in the dispute lifecycle.
         * @enum {string}
         */
        dispute_lifecycle_stage: "INQUIRY" | "CHARGEBACK" | "PRE_ARBITRATION" | "ARBITRATION";
        /**
         * @description The channel where the customer created the dispute.
         * @enum {string}
         */
        dispute_channel: "INTERNAL" | "EXTERNAL" | "ALERT";
        /**
         * Dispute Summary Information
         * @description The dispute summary information.
         */
        dispute_info: {
            /** @description The ID of the dispute. */
            readonly dispute_id?: string;
            /** @description The date and time when the dispute was created, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *`yyyy`*-*`MM`*-*`dd`*`T`*`HH`*:*`mm`*:*`ss`*.*`SSS`*`Z`. */
            readonly create_time?: components["schemas"]["date_time"];
            /** @description The date and time when the dispute was last updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *`yyyy`*-*`MM`*-*`dd`*`T`*`HH`*:*`mm`*:*`ss`*.*`SSS`*`Z`. */
            readonly update_time?: components["schemas"]["date_time"];
            reason?: components["schemas"]["dispute_reason"];
            readonly status?: components["schemas"]["status"];
            readonly dispute_state?: components["schemas"]["dispute_state"];
            /** @description The amount in the transaction that the customer originally disputed. Because customers can sometimes dispute only part of the payment, the disputed amount might be different from the total gross or net amount of the original transaction. */
            dispute_amount?: components["schemas"]["money"];
            /** @description The asset in the transaction that the customer disputed. */
            dispute_asset?: components["schemas"]["cryptocurrency"];
            readonly dispute_life_cycle_stage?: components["schemas"]["dispute_lifecycle_stage"];
            readonly dispute_channel?: components["schemas"]["dispute_channel"];
            /** @description The date and time by when the customer must respond to the dispute, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). If the customer does not respond by this date and time, the dispute is closed in the merchant's favor. For example, *`yyyy`*-*`MM`*-*`dd`*`T`*`HH`*:*`mm`*:*`ss`*.*`SSS`*`Z`. */
            readonly buyer_response_due_date?: components["schemas"]["date_time"];
            /** @description The date and time by when the merchant must respond to the dispute, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). If the merchant does not respond by this date and time, the dispute is closed in the customer's favor. For example, *`yyyy`*-*`MM`*-*`dd`*`T`*`HH`*:*`mm`*:*`ss`*.*`SSS`*`Z`. */
            readonly seller_response_due_date?: components["schemas"]["date_time"];
            /** @description An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links/). */
            readonly links?: components["schemas"]["link_description"][];
        };
        /**
         * Dispute Search Response
         * @description An array of disputes. Includes links that enable you to navigate through the response.
         */
        dispute_search: {
            /** @description An array of disputes that match the filter criteria. Sorted in latest to earliest creation time order. */
            items?: components["schemas"]["dispute_info"][];
            /** @description An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links/). */
            readonly links?: components["schemas"]["link_description"][];
        };
        /**
         * Customer
         * @description The details for the customer who funds the payment. For example, the customer's first name, last name, and email address.
         */
        buyer: {
            /** @description The customer's name. */
            name?: string;
        };
        /**
         * Format: ppaas_common_email_address_v2
         * @description The internationalized email address.<blockquote><strong>Note:</strong> Up to 64 characters are allowed before and 255 characters are allowed after the <code>@</code> sign. However, the generally accepted maximum length for an email address is 254 characters. The pattern verifies that an unquoted <code>@</code> sign exists.</blockquote>
         */
        email_address: string;
        /**
         * Merchant
         * @description The details for the merchant who receives the funds and fulfills the order. For example, merchant ID, and contact email address.
         */
        seller: {
            /** @description The email address for the merchant's PayPal account. */
            email?: components["schemas"]["email_address"];
            /** @description The PayPal account ID for the merchant. */
            merchant_id?: string;
            /** @description The name of the merchant. */
            name?: string;
        };
        /**
         * Item Type
         * @description The type of the item which has the issue.
         * @enum {string}
         */
        item_type: "PRODUCT" | "SERVICE" | "BOOKING" | "DIGITAL_DOWNLOAD";
        item_product_details: unknown;
        item_service_details: unknown;
        item_booking_details: unknown;
        item_digital_download_details: unknown;
        item_cancellation_details: unknown;
        item_agreed_refund_details: unknown;
        /**
         * Item Information
         * @description The information for a purchased item in a disputed transaction.
         */
        item_info: {
            /** @description The item ID. If the merchant provides multiple pieces of evidence and the transaction has multiple item IDs, the merchant can use this value to associate a piece of evidence with an item ID. */
            item_id?: string;
            /** @description The item name. */
            item_name?: string;
            /** @description The item description. */
            item_description?: string;
            /** @description The count of the item in the dispute. Must be a whole number. */
            item_quantity?: string;
            /** @description The ID of the transaction in the partner system. The partner transaction ID is returned at an item level because the partner might show different transactions for different items in the cart. */
            partner_transaction_id?: string;
            reason?: components["schemas"]["dispute_reason"];
            /** @description The amount of the item in the dispute. */
            readonly dispute_amount?: components["schemas"]["money"];
            /** @description Any notes provided with the item. */
            notes?: string;
            item_type?: components["schemas"]["item_type"];
            product_details?: components["schemas"]["item_product_details"];
            service_details?: components["schemas"]["item_service_details"];
            booking_details?: components["schemas"]["item_booking_details"];
            digital_download_details?: components["schemas"]["item_digital_download_details"];
            cancellation_details?: components["schemas"]["item_cancellation_details"];
            agreed_refund_details?: components["schemas"]["item_agreed_refund_details"];
        };
        payment_processor: unknown;
        /**
         * Transaction Information
         * @description The information about the disputed transaction.
         */
        transaction_info: {
            /** @description The ID, as seen by the customer, for this transaction. */
            buyer_transaction_id?: string;
            /** @description The ID, as seen by the merchant, for this transaction. */
            seller_transaction_id?: string;
            /** @description The ID, as seen by the partner, for this transaction. */
            reference_id?: string;
            /** @description The date and time when the transaction was created, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *`yyyy`*-*`MM`*-*`dd`*`T`*`HH`*:*`mm`*:*`ss`*.*`SSS`*`Z`. */
            create_time?: components["schemas"]["date_time"];
            /**
             * @description The transaction status.
             * @enum {string}
             */
            transaction_status?: "COMPLETED" | "UNCLAIMED" | "DENIED" | "FAILED" | "HELD" | "PENDING" | "PARTIALLY_REFUNDED" | "REFUNDED" | "REVERSED" | "CANCELLED";
            /** @description The gross amount of the transaction. */
            gross_amount?: components["schemas"]["money"];
            /** @description The gross asset of the transaction. */
            gross_asset?: components["schemas"]["cryptocurrency"];
            /** @description The ID of the invoice for the payment. */
            invoice_number?: string;
            /** @description A free-text field that is entered by the merchant during checkout. */
            custom?: string;
            buyer?: components["schemas"]["buyer"];
            seller?: components["schemas"]["seller"];
            /** @description An array of items that were purchased as part of the transaction. */
            readonly items?: components["schemas"]["item_info"][];
            payment_processor?: components["schemas"]["payment_processor"];
        };
        /**
         * Fee Policy
         * @description Policy that determines whether the fee needs to be charged, retained or returned while moving the money as part of dispute process.
         */
        fee_policy: Record<string, never>;
        /**
         * Dispute Outcome
         * @description The outcome of a dispute.
         */
        dispute_outcome: {
            /**
             * @description The outcome of a resolved dispute.
             * @enum {string}
             */
            outcome_code?: "RESOLVED_BUYER_FAVOUR" | "RESOLVED_SELLER_FAVOUR" | "RESOLVED_WITH_PAYOUT" | "CANCELED_BY_BUYER" | "ACCEPTED" | "DENIED" | "NONE";
            /** @description The amount that either the merchant or PayPal refunds the customer. */
            amount_refunded?: components["schemas"]["money"];
            /** @description The asset that either the merchant or PayPal refunds the customer. */
            asset_refunded?: components["schemas"]["cryptocurrency"];
        };
        /**
         * @description The type of adjudication.
         * @enum {string}
         */
        adjudication_type: "DENY_BUYER" | "PAYOUT_TO_BUYER" | "PAYOUT_TO_SELLER" | "RECOVER_FROM_SELLER";
        /**
         * @description The reason for the adjudication type.
         * @enum {string}
         */
        adjudication_reason: "AMOUNT_DIFFERENCE_EXPECTED_DUE_TO_FEES" | "BILLING_AGREEMENT_CHANGE_DISCLOSED" | "BILLING_AGREEMENT_CHANGE_NOT_DISCLOSED" | "BILLING_AGREEMENT_DATE_CHANGE_DISCLOSED" | "BILLING_AGREEMENT_DATE_CHANGE_NOT_DISCLOSED" | "BUYER_ATTEMPTED_RETURN" | "BUYER_BILLED_ONLY_ONCE" | "BUYER_CANCELLED_CASE" | "BUYER_CANCELLED_SERVICE" | "BUYER_FAILED_TO_DESCRIBE_ISSUE" | "BUYER_HAS_POSSESSION_OF_THE_MERCHANDISE_OR_SERVICE" | "BUYER_MADE_NO_ATTEMPT_TO_RESOLVE_WITH_SELLER" | "BUYER_NOT_IN_POSSESSION_OF_ITEM_TO_RETURN" | "BUYER_PROVIDED_CREDIT_RECEIPT" | "BUYER_RECEIVED_DUPLICATE_REFUND" | "CANCELLED_PER_TERMS_OF_BILLING_AGREEMENT" | "CARD_NOT_STOLEN" | "CARD_NOT_STOLEN_BEFORE_AUTH" | "CUSTOMER_RECOGNIZES_TRANSACTION" | "DECISION_BASED_ON_AVAILABLE_INFORMATION" | "DELIVERY_AFTER_EXPECTED_DELIVERY_DATE" | "DELIVERY_DUE_WITHIN_EXPECTED_DELIVERY_DATE" | "DELIVERY_OR_SERVICE_REFUSED" | "DOCUMENTATION_MATCHES_AMOUNT_CHARGED" | "DOCUMENTATION_MATCHES_AMOUNT_IN_PAYPAL_ACCOUNT" | "DUPLICATE_ADD_FUNDS" | "EFFORTLESS_SELLER_PROTECTION" | "IN_PERSON_DELIVERY" | "INELIGIBLE_BUYER_PROTECTION_POLICY" | "INELIGIBLE_SELLER_PROTECTION_POLICY" | "INQUIRY_OFFER_ITEM_REPLACED" | "INQUIRY_OFFER_PARTIAL_REFUND" | "INQUIRY_OFFER_REFUND_WITH_ITEM_RETURN" | "INQUIRY_OFFER_REFUND_WITH_REPLACEMENT" | "INVALID_APPEAL_REASON" | "INVALID_CHARGEBACK_SELLER_FAVOUR" | "INVALID_DELIVERY_PROOF" | "INVALID_DELIVERY_PROOF_SIGNATURE" | "INVALID_DOCUMENTATION" | "INVALID_PROOF_OF_SHIPMENT" | "INVALID_REFUND_PROOF" | "INVALID_RETURN_DELIVERY_NO_SIGNATURE_PROOF" | "INVALID_RETURN_DELIVERY_PROOF" | "INVALID_TRACKING" | "ITEM_ALTERED_REPAIRED" | "ITEM_NOT_AS_ADVERTISED" | "ITEM_NOT_AS_DESCRIBED" | "ITEM_NOT_DAMAGED" | "ITEM_NOT_DELIVERED" | "ITEM_NOT_RETURNED_TO_SELLER" | "ITEM_NOT_SHIPPED" | "ITEM_OF_DIFFERENT_QUALITY_OR_QUANTITY" | "ITEM_OUT_OF_STOCK_AND_NOT_DELIVERED" | "ITEM_RETURNED_TO_SELLER" | "ITEM_SERVICE_MISREPRESENTED" | "ITEM_SERVICE_NOT_MISREPRESENTED" | "ITEM_SERVICE_RECEIVED_BY_BUYER" | "ITEM_SOLD_AS_DESCRIBED" | "ITEM_VALUE_UNAFFECTED" | "MULTIPLE_APPEALS_WITH_SAME_REASON" | "NO_DOCUMENTATION_FROM_BUYER" | "NO_DOCUMENTATION_SUPPORTING_DUE_OF_CREDIT" | "NO_PROOF_OF_DELIVERY" | "NO_PROOF_OF_DELIVERY_INTANGIBLE" | "NO_PROTECTION_FOR_DIGITAL_GOODS_SERVICE" | "NO_RESPONSE_FROM_BUYER" | "NO_RESPONSE_FROM_BUYER_FOR_ADDITIONAL_INFO_REQUEST" | "NO_SELLER_RESPONSE" | "NO_SELLER_RESPONSE_FOR_ADDITIONAL_INFO_REQUEST" | "NO_VALID_SHIPMENT_PROOF" | "NOT_A_BILLING_ERROR" | "NOT_AN_UNAUTHORIZED_TRANSACTION" | "NOT_DUPLICATE_FUNDS_ADDED_ONCE" | "NOT_DUPLICATE_FUNDS_WITHDRAWN_ONCE" | "NOT_SHIPPED_TO_CORRECT_ADDRESS" | "PARTIAL_REFUND_ISSUED_FOR_MISSING_ITEMS" | "PARTIAL_REFUND_OFFER_ACCEPTED" | "PAYMENT_REVERSED_ALREADY" | "POS_SUBMITTED_INSTEAD_OF_POD" | "PREAUTH_INSTALLMENT_DUE" | "PROOF_OF_BILLING_AFTER_CANCELLATION_ACCEPTED" | "PROOF_OF_DUPLICATE_DENIED_OR_INSUFFICIENT" | "PROOF_OF_INCORRECT_TRANSACTION_AMOUNT_ACCEPTED" | "PROOF_OF_PAID_BY_OTHER_MEANS_NOT_SUBMITTED" | "PROOF_OF_TRACKING_NOT_SUBMITTED" | "PROTECTED_BY_PAYPAL" | "REPRESENTED_BY_PAYPAL" | "SELLER_ACCEPTED_MULTIPLE_PAYMENTS" | "SELLER_AGREED_REFUND_WITHOUT_RETURN" | "SELLER_AGREED_TO_ISSUE_CREDIT" | "SELLER_ISSUED_CREDIT_TO_BUYER" | "SELLER_ISSUED_REFUND" | "SELLER_NOT_REACHABLE" | "SELLER_RECEIVED_PAYMENT_TWICE_OR_FOR_REPLACEMENT" | "SELLER_REFUSED_REFUND" | "SELLER_REFUSED_RETURN" | "SELLER_SURCHARGED_BUYER" | "SERVICE_NOT_COMPLETED_AS_AGREED" | "SHIPPING_COMPANY_WONT_SHIP" | "TRACKING_PROOF_NOT_ENOUGH" | "TRANSACTION_AUTHORIZED_BY_CARDHOLDER" | "TRANSACTION_CANCELLED_AFTER_AUTHORIZATION_DATE" | "TRANSACTION_CANCELLED_BEFORE_SHIPMENT_SERVICE_DATE" | "TRANSACTION_MATCHES_BUYER_SPENDING_PATTERN" | "TRANSACTION_PROCESSED_CORRECTLY" | "TRUSTED_BUYER_PAYOUT" | "UNUSED_SHIPPING_LABEL" | "VALID_PROOF_OF_DELIVERY" | "VALID_PROOF_OF_DELIVERY_WITH_SIGNATURE" | "VALID_PROOF_OF_REFUND" | "VALID_PROOF_SUPPORTING_CLAIM" | "VALID_RETURN_DELIVERY_PROOF" | "VALID_RETURN_DELIVERY_PROOF_WITH_SIGNATURE" | "VALID_SHIPMENT_PROOF" | "VALUE_AFFECTED_SIGNIFICANTLY" | "PROTECTION_POLICY_APPLIES";
        /**
         * Adjudication
         * @description The Adjudication details for the dispute.
         */
        adjudication: {
            /** @description The type of adjudication. */
            type: components["schemas"]["adjudication_type"];
            /** @description The date and time when the adjudication was done, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). */
            adjudication_time: components["schemas"]["date_time"];
            /** @description The reason for the adjudication type. */
            reason?: components["schemas"]["adjudication_reason"];
            /** @description The dispute life cycle stage during the adjudication. */
            dispute_life_cycle_stage?: components["schemas"]["dispute_lifecycle_stage"];
        };
        /**
         * @description The reason for the money movement.
         * @enum {string}
         */
        money_movement_reason: "DISPUTE_SETTLEMENT_FEE" | "DISPUTE_SETTLEMENT" | "DISPUTE_FEE" | "CHARGEBACK_FEE";
        /**
         * Money movement
         * @description The Money movement details with party.
         */
        money_movement: {
            /**
             * @description The affected party in the money movement.
             * @enum {string}
             */
            affected_party?: "SELLER" | "BUYER" | "PAYMENT_PROCESSOR";
            /** @description The amount transferred as part of the money movement. */
            amount?: components["schemas"]["money"];
            /** @description The asset transferred as part of the money movement. */
            asset?: components["schemas"]["cryptocurrency"];
            /** @description The date and time when the money movement was initiated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). */
            initiated_time?: components["schemas"]["date_time"];
            /**
             * @description The type of the money movement.
             * @enum {string}
             */
            type?: "DEBIT" | "CREDIT";
            /** @description The reason for the money movement. */
            reason?: components["schemas"]["money_movement_reason"];
        };
        /**
         * Document
         * @description An uploaded document as a binary object that supports a dispute.
         */
        document: {
            /** @description The document name. */
            name?: string;
            /**
             * Format: uri
             * @description The downloadable URL for the document for which the client has access.<br/><br/><blockquote><strong>Note:</strong> Document download may require some configuration setup and available as a limited release at this time. For more information, reach out to your PayPal account manager.</blockquote>.
             */
            readonly url?: string;
        };
        /**
         * Message
         * @description A customer- or merchant-posted message for the dispute.
         */
        message: {
            /**
             * @description Indicates whether the customer, merchant, or dispute arbiter posted the message.
             * @enum {string}
             */
            readonly posted_by?: "BUYER" | "SELLER" | "ARBITER";
            /** @description The date and time when the message was posted, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). */
            readonly time_posted?: components["schemas"]["date_time"];
            /** @description The message text. */
            content?: string;
            /** @description An array of metadata for the documents which contains any additional info about the message posted. */
            readonly documents?: components["schemas"]["document"][];
        };
        /**
         * Merchant Contacted Outcome
         * @description The outcome when the customer has contacted the merchant.
         * @enum {string}
         */
        merchant_contacted_outcome: "NO_RESPONSE" | "FIXED" | "NOT_FIXED";
        /**
         * Merchant Contacted Method
         * @description The method used to contact the merchant.
         * @enum {string}
         */
        merchant_contacted_mode: "WEBSITE" | "PHONE" | "EMAIL" | "WRITTEN" | "IN_PERSON";
        /**
         * Duplicate Transaction
         * @description The duplicate transaction details.
         */
        duplicate_transaction: {
            /** @description If `true`, indicates that a duplicate transaction was received. */
            received_duplicate?: boolean;
            /** @description The transaction details for the original transaction, when the dispute reason is `DUPLICATE_TRANSACTION`. Currently, contains only the date and amount. */
            original_transaction?: components["schemas"]["transaction_info"];
        };
        /**
         * Incorrect Transaction Amount
         * @description The incorrect transaction amount details.
         */
        incorrect_transaction_amount: {
            correct_transaction_amount?: components["schemas"]["money"];
            /** @description The correct asset quantity of the transaction. */
            correct_transaction_asset?: components["schemas"]["cryptocurrency"];
            /** @description The date and time when the customer created the transaction, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). */
            correct_transaction_time?: components["schemas"]["date_time"];
        };
        /**
         * Payment by Other Means
         * @description The payment by other means details.
         */
        payment_by_other_means: {
            /** @description If `true`, indicates that a charge was made that is different from the original charge. */
            charge_different_from_original?: boolean;
            /** @description If `true`, indicates that a duplicate transaction was received. */
            received_duplicate?: boolean;
            /**
             * @description The payment method.
             * @enum {string}
             */
            payment_method?: "CASH" | "CREDIT_CARD" | "CHECK" | "PAYPAL" | "DEBIT_CARD" | "GIFT_CARD" | "BANK_TRANSFER";
            /** @description Last 2-4 characters of the payment instrument. For payment_method CHECK, payment_instrument_suffix entered must be of minimum length 2-4 characters. For payment_method CREDIT_CARD, DEBIT_CARD, GIFT_CARD, BANK_TRANSFER, payment_instrument_suffix entered must be of length 4. */
            payment_instrument_suffix?: string;
        };
        /**
         * Cancellation Details
         * @description The cancellation details.
         */
        cancellation_details: {
            /** @description The date and time of the cancellation, in [Internet date and time format](http://tools.ietf.org/html/rfc3339#section-5.6). */
            cancellation_date?: components["schemas"]["date_time"];
            /** @description The cancellation number. */
            cancellation_number?: string;
            /** @description Indicates whether the dispute was canceled. */
            cancelled?: boolean;
            /**
             * @description Indicates the mode used for order cancellation.
             * @enum {string}
             */
            cancellation_mode?: "CANCELLED_PAYPAL_BILLING_AGREEMENT" | "WEBSITE" | "PHONE" | "EMAIL" | "WRITTEN" | "IN_PERSON";
        };
        /**
         * Return Details
         * @description The return details for the product.
         */
        return_details: {
            /** @description The date and time when the product was returned, [Internet date and time format](http://tools.ietf.org/html/rfc3339#section-5.6). */
            return_time?: components["schemas"]["date_time"];
            /**
             * @description The method that the customer used to return the product.
             * @enum {string}
             */
            mode?: "SHIPPED" | "IN_PERSON";
            /** @description Indicates whether customer has the return receipt. */
            receipt?: boolean;
            /** @description The confirmation number for the item return. */
            return_confirmation_number?: string;
            /** @description If `true`, indicates that the item was returned but the seller refused to accept the return and if `false`, indicates the item was not attempted to return. */
            returned?: boolean;
        };
        /**
         * Product Details
         * @description The product information.
         */
        product_details: {
            /** @description The product description. */
            description?: string;
            /**
             * @description Indicates whether the product was, or was not, received or returned.
             * @enum {string}
             */
            product_received?: "YES" | "NO" | "RETURNED";
            /** @description The date and time when product was delivered. */
            product_received_time?: components["schemas"]["date_time"];
            /** @description The expected delivery date and time of the product. */
            expected_delivery_date?: components["schemas"]["date_time"];
            /** @description An array of sub-reasons for the product issue. */
            sub_reasons?: ("DAMAGED" | "DIFFERENT" | "MISSING_PARTS" | "OTHER")[];
            /**
             * Format: uri
             * @description The URL where the customer purchased the product.
             */
            purchase_url?: string;
            return_details?: components["schemas"]["return_details"];
        };
        /**
         * Service Details
         * @description The service details.
         */
        service_details: {
            /** @description The service description. */
            description?: string;
            /**
             * @description Indicates whether the service was started or cancelled.
             * @enum {string}
             */
            service_started?: "YES" | "NO" | "CANCELLED";
            /** @description The customer specified note about the service usage. */
            note?: string;
            /** @description An array of sub-reasons for the service issue. */
            sub_reasons?: ("DAMAGED" | "DIFFERENT" | "INCOMPLETE" | "OTHER")[];
            /**
             * Format: uri
             * @description The URL of the merchant or marketplace site where the customer purchased the service.
             */
            purchase_url?: string;
        };
        /**
         * Agreed Refund Details
         * @description Details of Agreed Refund between customer and merchant.
         */
        agreed_refund_details: {
            /** @description Indicates whether merchant has agreed to refund the buyer or not. */
            merchant_agreed_refund?: boolean;
            /** @description The date and time proposed by merchant to provide the refund, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). */
            merchant_agreed_refund_time?: components["schemas"]["date_time"];
        };
        /**
         * Credit Not Processed
         * @description The credit not processed details.
         */
        credit_not_processed: {
            /**
             * @description The issue type.
             * @enum {string}
             */
            issue_type?: "PRODUCT" | "SERVICE";
            expected_refund?: components["schemas"]["money"];
            cancellation_details?: components["schemas"]["cancellation_details"];
            product_details?: components["schemas"]["product_details"];
            service_details?: components["schemas"]["service_details"];
            agreed_refund_details?: components["schemas"]["agreed_refund_details"];
        };
        /**
         * Canceled Recurring Billing
         * @description The recurring billing canceled details.
         */
        canceled_recurring_billing: {
            expected_refund?: components["schemas"]["money"];
            cancellation_details?: components["schemas"]["cancellation_details"];
        };
        /**
         * Billing Disputes Properties
         * @description The billing issue details.
         */
        billing_disputes_properties: {
            duplicate_transaction?: components["schemas"]["duplicate_transaction"];
            incorrect_transaction_amount?: components["schemas"]["incorrect_transaction_amount"];
            payment_by_other_means?: components["schemas"]["payment_by_other_means"];
            credit_not_processed?: components["schemas"]["credit_not_processed"];
            canceled_recurring_billing?: components["schemas"]["canceled_recurring_billing"];
        };
        /**
         * Format: ppaas_common_country_code_v2
         * @description The [two-character ISO 3166-1 code](/docs/api/reference/country-codes/) that identifies the country or region.<blockquote><strong>Note:</strong> The country code for Great Britain is <code>GB</code> and not <code>UK</code> as used in the top-level domain names for that country. Use the `C2` country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.</blockquote>
         */
        country_code: string;
        /**
         * Portable Postal Address (Medium-Grained)
         * @description The portable international postal address. Maps to [AddressValidationMetadata](https://github.com/googlei18n/libaddressinput/wiki/AddressValidationMetadata) and HTML 5.1 [Autofilling form controls: the autocomplete attribute](https://www.w3.org/TR/html51/sec-forms.html#autofilling-form-controls-the-autocomplete-attribute).
         */
        address_portable: {
            /** @description The first line of the address. For example, number or street. For example, `173 Drury Lane`. Required for data entry and compliance and risk checks. Must contain the full address. */
            address_line_1?: string;
            /** @description The second line of the address. For example, suite or apartment number. */
            address_line_2?: string;
            /** @description The third line of the address, if needed. For example, a street complement for Brazil, direction text, such as `next to Walmart`, or a landmark in an Indian address. */
            address_line_3?: string;
            /** @description The neighborhood, ward, or district. Smaller than `admin_area_level_3` or `sub_locality`. Value is:<ul><li>The postal sorting code for Guernsey and many French territories, such as French Guiana.</li><li>The fine-grained administrative levels in China.</li></ul> */
            admin_area_4?: string;
            /** @description A sub-locality, suburb, neighborhood, or district. Smaller than `admin_area_level_2`. Value is:<ul><li>Brazil. Suburb, bairro, or neighborhood.</li><li>India. Sub-locality or district. Street name information is not always available but a sub-locality or district can be a very small area.</li></ul> */
            admin_area_3?: string;
            /** @description A city, town, or village. Smaller than `admin_area_level_1`. */
            admin_area_2?: string;
            /** @description The highest level sub-division in a country, which is usually a province, state, or ISO-3166-2 subdivision. Format for postal delivery. For example, `CA` and not `California`. Value, by country, is:<ul><li>UK. A county.</li><li>US. A state.</li><li>Canada. A province.</li><li>Japan. A prefecture.</li><li>Switzerland. A kanton.</li></ul> */
            admin_area_1?: string;
            /** @description The postal code, which is the zip code or equivalent. Typically required for countries with a postal code or an equivalent. See [postal code](https://en.wikipedia.org/wiki/Postal_code). */
            postal_code?: string;
            country_code: components["schemas"]["country_code"];
            /**
             * Address Details
             * @description The non-portable additional address details that are sometimes needed for compliance, risk, or other scenarios where fine-grain address information might be needed. Not portable with common third party and open source. Redundant with core fields.<br/>For example, `address_portable.address_line_1` is usually a combination of `address_details.street_number`, `street_name`, and `street_type`.
             */
            address_details?: {
                /** @description The street number. */
                street_number?: string;
                /** @description The street name. Just `Drury` in `Drury Lane`. */
                street_name?: string;
                /** @description The street type. For example, avenue, boulevard, road, or expressway. */
                street_type?: string;
                /** @description The delivery service. Post office box, bag number, or post office name. */
                delivery_service?: string;
                /** @description A named locations that represents the premise. Usually a building name or number or collection of buildings with a common name or number. For example, <code>Craven House</code>. */
                building_name?: string;
                /** @description The first-order entity below a named building or location that represents the sub-premises. Usually a single building within a collection of buildings with a common name. Can be a flat, story, floor, room, or apartment. */
                sub_building?: string;
            };
        };
        /**
         * Merchandise Dispute Properties
         * @description The customer-provided merchandise issue details for the dispute.
         */
        merchandize_dispute_properties: {
            /**
             * @description The issue type.
             * @enum {string}
             */
            issue_type?: "PRODUCT" | "SERVICE";
            product_details?: components["schemas"]["product_details"];
            service_details?: components["schemas"]["service_details"];
            cancellation_details?: components["schemas"]["cancellation_details"];
            /** @description The return address for the item. Required when the customer must return an item to the merchant for the <a href="/docs/integration/direct/customer-disputes/integration-guide/#merchandise_or_service_not_as_described"><code>MERCHANDISE_OR_SERVICE_NOT_AS_DESCRIBED</code></a> dispute reason. */
            return_shipping_address?: components["schemas"]["address_portable"];
        };
        /**
         * Extensions
         * @description The extended properties for the dispute. Includes additional information for a dispute category, such as billing disputes, the original transaction ID, and the correct amount.
         */
        extensions: {
            /** @description Indicates that the merchant was contacted. */
            merchant_contacted?: boolean;
            merchant_contacted_outcome?: components["schemas"]["merchant_contacted_outcome"];
            /** @description The date and time when merchant was contacted. */
            merchant_contacted_time?: components["schemas"]["date_time"];
            /** @description The method used to contact the merchant. */
            merchant_contacted_mode?: components["schemas"]["merchant_contacted_mode"];
            /** @description The date and time when the buyer contacted the partner to file a dispute, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *`yyyy`*-*`MM`*-*`dd`*`T`*`HH`*:*`mm`*:*`ss`*.*`SSS`*`Z`. */
            buyer_contacted_time?: components["schemas"]["date_time"];
            /** @description The channel through which the buyer contacted the partner to file a dispute. Partners that allow buyers to create dispute from multiple channels can use this field to help identify which channel was used for each individual dispute. */
            buyer_contacted_channel?: string;
            billing_dispute_properties?: components["schemas"]["billing_disputes_properties"];
            merchandize_dispute_properties?: components["schemas"]["merchandize_dispute_properties"];
        };
        /**
         * Tracking Information
         * @description The tracking information.
         */
        tracking_info: {
            /**
             * @description The name of the shipment carrier for the transaction for this dispute.
             * @enum {string}
             */
            carrier_name: "UPS" | "USPS" | "FEDEX" | "AIRBORNE_EXPRESS" | "DHL" | "AIRSURE" | "ROYAL_MAIL" | "PARCELFORCE" | "SWIFTAIR" | "OTHER" | "UK_PARCELFORCE" | "UK_ROYALMAIL_SPECIAL" | "UK_ROYALMAIL_RECORDED" | "UK_ROYALMAIL_INT_SIGNED" | "UK_ROYALMAIL_AIRSURE" | "UK_UPS" | "UK_FEDEX" | "UK_AIRBORNE_EXPRESS" | "UK_DHL" | "UK_OTHER" | "UK_CANNOT_PROV_TRACK" | "UK_CANNOT_PROVIDE_TRACKING" | "CA_CANADA_POST" | "CA_PUROLATOR" | "CA_CANPAR" | "CA_LOOMIS" | "CA_TNT" | "TNT" | "CA_OTHER" | "CA_CANNOT_PROV_TRACK" | "DE_DP_DHL_WITHIN_EUROPE" | "DE_DP_DHL_T_AND_T_EXPRESS" | "DE_DHL_DP_INTL_SHIPMENTS" | "CA_CANNOT_PROVIDE_TRACKING" | "DE_GLS" | " DE_DPD_DELISTACK" | "DE_HERMES" | "DE_UPS" | "DE_FEDEX" | "DE_TNT" | "DE_OTHER" | "FR_CHRONOPOST" | "FR_COLIPOSTE" | "FR_DHL" | "FR_UPS" | "FR_FEDEX" | "FR_TNT" | "FR_GLS" | "FR_OTHER" | "IT_POSTE_ITALIA" | "IT_DHL" | "IT_UPS" | "IT_FEDEX" | "IT_TNT" | "IT_GLS" | "IT_OTHER" | "AU_AUSTRALIA_POST_EP_PLAT" | "AU_AUSTRALIA_POST_EPARCEL" | "AU_AUSTRALIA_POST_EMS" | "AU_DHL" | "AU_STAR_TRACK_EXPRESS" | "AU_UPS" | "AU_FEDEX" | "AU_TNT" | "AU_TOLL_IPEC" | "AU_OTHER" | "FR_SUIVI" | "IT_EBOOST_SDA" | "ES_CORREOS_DE_ESPANA" | "ES_DHL" | "ES_UPS" | "ES_FEDEX" | "ES_TNT" | "ES_OTHER" | "AT_AUSTRIAN_POST_EMS" | "AT_AUSTRIAN_POST_PPRIME" | "BE_CHRONOPOST" | "BE_TAXIPOST" | "CH_SWISS_POST_EXPRES" | "CH_SWISS_POST_PRIORITY" | "CN_CHINA_POST" | "HK_HONGKONG_POST" | "IE_AN_POST_SDS_EMS" | "IE_AN_POST_SDS_PRIORITY" | "IE_AN_POST_REGISTERED" | "IE_AN_POST_SWIFTPOST" | "IN_INDIAPOST" | "JP_JAPANPOST" | "KR_KOREA_POST" | "NL_TPG" | "SG_SINGPOST" | "TW_CHUNGHWA_POST" | "CN_CHINA_POST_EMS" | "CN_FEDEX" | "CN_TNT" | "CN_UPS" | "CN_OTHER" | "NL_TNT" | "NL_DHL" | "NL_UPS" | "NL_FEDEX" | "NL_KIALA" | "BE_KIALA" | "PL_POCZTA_POLSKA" | "PL_POCZTEX" | "PL_GLS" | "PL_MASTERLINK" | "PL_TNT" | "PL_DHL" | "PL_UPS" | "PL_FEDEX" | "JP_SAGAWA_KYUU_BIN" | "JP_NITTSU_PELICAN_BIN" | "JP_KURO_NEKO_YAMATO_UNYUU" | "JP_TNT" | "JP_DHL" | "JP_UPS" | "JP_FEDEX" | "NL_PICKUP" | "NL_INTANGIBLE" | "NL_ABC_MAIL" | "HK_FOUR_PX_EXPRESS" | "HK_FLYT_EXPRESS" | "US_ASCENDIA" | "US_ENSENDA" | "US_GLOBEGISTICS" | "US_ONTRAC" | "RRDONNELLEY" | "ASENDIA_UK" | "UK_COLLECTPLUS" | "UK_DPD" | "UK_HERMESWORLD" | "UK_INTERLINK_EXPRESS" | "UK_TNT" | "UK_UK_MAIL" | "UK_YODEL" | "BUYLOGIC" | "CN_EMS" | "CHINA_POST" | "CNEXPS" | "CPACKET" | "CUCKOOEXPRESS" | "CN_EC" | "CN_EMPS" | "DE_ASENDIA" | "UK_DELTEC" | "DE_DEUTSCHE" | "DE_DPD" | "RABEN_GROUP" | "GLOBAL_TNT" | "ADSONE" | "AU_AU_POST" | "BONDSCOURIERS" | "COURIERS_PLEASE" | "DTDC_AU" | "AU_FASTWAY" | "HUNTER_EXPRESS" | "SENDLE" | "AUS_TOLL" | "TOLL" | "UBI_LOGISTICS" | "OMNIPARCEL" | "QUANTIUM" | "CN_SF_EXPRESS" | "SEKOLOGISTICS" | "HK_TAQBIN" | "GB_APC" | "CA_CANPAR_COURIER" | "GLOBAL_ESTES" | "CA_GREYHOUND" | "PUROLATOR" | "US_RL" | "IT_BRT" | "DMM_NETWORK" | "IT_FERCAM" | "HERMES_IT" | "IT_POSTE_ITALIANE" | "IT_SDA" | "IT_SGT" | "GLOBAL_SKYNET" | "FR_BERT" | "FR_COLIS" | "FR_GEODIS" | "FR_LAPOSTE" | "FR_TELIWAY" | "DPD_POLAND" | "INPOST_PACZKOMATY" | "POL_POCZTA" | "POL_SIODEMKA" | "ESP_CORREOS" | "ES_CORREOS" | "ESP_NACEX" | "ESP_ASM" | "ESP_REDUR" | "CBL_LOGISTICA" | "EKART" | "IND_DELHIVERY" | "IND_BLUEDART" | "IND_DTDC" | "IND_PROFESSIONAL_COURIERS" | "IND_REDEXPRESS" | "IND_XPRESSBEES" | "IND_DOTZOT" | "THA_KERRY" | "SENDIT" | "ACOMMERCE" | "NINJAVAN_THAI" | "NIM_EXPRESS" | "THA_THAILAND_POST" | "THA_DYNAMIC_LOGISTICS" | "ALPHAFAST" | "FASTRAK_TH" | "EPARCEL_KR" | "CJ_KOREA_THAI" | "RINCOS" | "KOR_KOREA_POST" | "KOR_CJ" | "KOR_ECARGO" | "SREKOREA" | "ROCKETPARCEL" | "BG_BULGARIAN_POST" | "JPN_JAPAN_POST" | "JPN_YAMATO" | "JPN_SAGAWA" | "TUR_PTT" | "AUT_AUSTRIAN_POST" | "AU_AUSTRIAN_POST" | "RUSSIAN_POST" | "BEL_DHL" | "FR_MONDIAL" | "EU_BPOST" | "LANDMARK_GLOBAL" | "IDN_POS" | "IDN_POS_INT" | "IDN_JNE" | "IDN_PANDU" | "RPX" | "IDN_TIKI" | "IDN_LION_PARCEL" | "NINJAVAN_ID" | "IDN_WAHANA" | "IDN_FIRST_LOGISTICS" | "UK_AN_POST" | "DPD" | "UK_FASTWAY" | "UK_NIGHTLINE" | "WISELOADS" | "GR_ELTA" | "GRC_ACS" | "GR_GENIKI" | "NINJAVAN_PHILIPPINES" | "PHL_XEND_EXPRESS" | "PHL_LBC" | "PHL_JAMEXPRESS" | "PHL_AIRSPEED" | "PHL_RAF" | "DIRECTLOG" | "BRA_CORREIOS" | "NLD_DHL" | "NLD_POSTNL" | "NLD_GLS" | "NLD_TRANSMISSION" | "CORREOS_DE_MEXICO" | "MEX_ESTAFETA" | "MEX_SENDA" | "MEX_REDPACK" | "MEX_AEROFLASH" | "NATIONWIDE_MY" | "MYS_MYS_POST" | "MYS_TAQBIN" | "MYS_SKYNET" | "MYS_CITYLINK" | "MYS_AIRPAK" | "NINJAVAN_MY" | "KANGAROO_MY" | "VNM_VIETNAM_POST" | "VNPOST_EMS" | "PRT_INT_SEUR" | "PRT_CTT" | "PRT_CHRONOPOST" | "PRT_SEUR" | "ADICIONAL" | "LTU_LIETUVOS" | "DPEX" | "LWE_HK" | "SG_SG_POST" | "SG_TAQBIN" | "SG_NINJAVAN" | "SG_ZALORA" | "JET_SHIP" | "SG_PARCELPOST" | "CHE_SWISS_POST" | "ASENDIA_HK" | "HUN_MAGYAR" | "POSTNORD_LOGISTICS" | "SWE_DIRECTLINK" | "SWE_POSTNORD" | "SWE_DB" | "CZE_CESKA" | "NZ_NZ_POST" | "NZ_COURIER_POST" | "FASTWAY_NZ" | "TW_TAIWAN_POST" | "SPREADEL" | "ARE_EMIRATES_POST" | "AXL" | "CYP_CYPRUS_POST" | "HRV_HRVATSKA" | "NOR_POSTEN" | "RAM" | "THECOURIERGUY" | "ZA_FASTWAY" | "DPE_EXPRESS" | "POSTI" | "MATKAHUOLTO" | "GLOBAL_DHL" | "ARG_CORREO" | "ARG_OCA" | "POST_SERBIA" | "BH_POSTA" | "CORREOS_CHILE" | "APR_72" | "CORREOS_DE_COSTA_RICA" | "POSTUR_IS" | "SPEEDEXCOURIER" | "ROU_POSTA" | "UKR_NOVA" | "UKR_POSHTA" | "NGA_NIPOST" | "NG_COURIERPLUS" | "ESHOPWORLD" | "WEBINTERPRET" | "HERMES" | "ABC_MAIL" | "ARAMEX" | "YANWEN" | "INTERNATIONAL_BRIDGE" | "SFC_LOGISTICS" | "BQC_EXPRESS" | "ONE_WORLD" | "IT_REGISTER_MAIL" | "WINIT" | "CONTINENTAL" | "EFS" | "PANTOS" | "RELAIS_COLIS" | "US_DHL_EXPRESS" | "US_DHL_PARCEL" | "US_DHL_ECOMMERCE" | "US_DHL_GLOBALFORWARDING" | "UK_DHL_EXPRESS" | "UK_DHL_PARCEL" | "UK_DHL_GLOBALFORWARDING" | "CN_DHL_EXPRESS" | "CN_DHL_ECOMMERCE" | "CN_DHL_GLOBALFORWARDING" | "DE_DHL_EXPRESS" | "DE_DHL_PARCEL" | "DE_DHL_PACKET" | "DE_DHL_ECOMMERCE" | "DE_DHL_GLOBALFORWARDING" | "DE_DHL_DEUTSCHEPOST" | "AU_DHL_EXPRESS" | "AU_DHL_ECOMMERCE" | "AU_DHL_GLOBALFORWARDING" | "HK_DHL_EXPRESS" | "HK_DHL_ECOMMERCE" | "HK_DHL_GLOBALFORWARDING" | "CA_DHL_EXPRESS" | "CA_DHL_ECOMMERCE" | "CA_DHL_GLOBALFORWARDING" | "IT_DHL_EXPRESS" | "IT_DHL_ECOMMERCE" | "IT_DHL_GLOBALFORWARDING" | "FR_DHL_EXPRESS" | "FR_DHL_PARCEL" | "FR_DHL_GLOBALFORWARDING" | "PL_DHL_EXPRESS" | "PL_DHL_PARCEL" | "PL_DHL_GLOBALFORWARDING" | "ABC_PACKAGE" | "AN_POST" | "APC_OVERNIGHT" | "ASM_ES" | "AUPOST_CN" | "ACOMMMERCE" | "ADICIONAL_PT" | "AIR_21" | "AIRBORNE_EXPRESS_UK" | "AIRPAK_MY" | "AIRSPEED" | "ASENDIA_DE" | "ASENDIA_US" | "AUSTRALIA_POST" | "TOLL_AU" | "AUSTRIAN_POST_EXPRESS" | "AUSTRIAN_POST" | "B_TWO_C_EUROPE" | "BERT" | "BPOST" | "BRT_IT" | "BLUEDART" | "BONDS_COURIERS" | "BPOST_INT" | "BULGARIAN_POST" | "CJ_LOGISTICS" | "CJ_INT_MY" | "CJ_MY" | "CJ_TH" | "CANADA_POST" | "CANPAR" | "CESKA_CZ" | "CHRONOPOST_FR" | "CHRONOPOST_PT" | "CHUNGHWA_POST" | "CITYLINK_MY" | "COLIPOSTE" | "COLIS" | "COLLECTPLUS" | "CORREOS_AG" | "CORREOS_BR" | "CORREOS_CL" | "CORREOS_CR" | "CORREOS_MX" | "CORREOS_ES" | "CORREOS_EXPRESS" | "COURIERPLUS" | "COURIER_POST" | "CYPRUS_POST_CYP" | "DBSCHENKER_SE" | "DHL_ES" | "DHL_ACTIVE_TRACING" | "DHL_AU" | "DHL_BENELUX" | "DHL_DEUTSCHE_POST" | "DHL_FR" | "DHL_GLOBAL_ECOMMERCE" | "DHL_HK" | "DHL_IT" | "DHL_JP" | "DHL_NL" | "DHL_PACKET" | "DHL_PARCEL_NL" | "DHL_PARCEL_ES" | "DHL_PL" | "DHL_SG" | "DHL_UK" | "DHL_GLOBAL_MAIL_ASIA" | "DHL_GLOBAL_MAIL" | "DHL_AT" | "DPD_DELISTRACK" | "DPD_FR" | "DPD_DE" | "DPD_HK" | "DPD_IR" | "DPD_LOCAL_REF" | "DPD_LOCAL" | "DPD_PL" | "DPD_RO" | "DPD_RU" | "DPD_UK" | "DTDC_EXPRESS" | "DTDC_IN" | "DAWN_WING" | "DELHIVERY_IN" | "DELTEC_DE" | "DELTEC_UK" | "DEUTSCHE_DE" | "DIRECTLINK_SE" | "DIRECTLOG_BR" | "DOTZOT" | "EC_CN" | "ELTA_GR" | "EMPS_CN" | "EMS_CN" | "ECARGO" | "EMIRATES_POST" | "ENSENDA" | "ESTAFETA" | "ESTES" | "FERCAM_IT" | "FLYT_EXPRESS" | "FASTRACK" | "FASTWAY_US" | "FASTWAY_ZA" | "FASTWAY_UK" | "FASTWAY_AU" | "FIRST_LOGISITCS" | "FOUR_PX_EXPRESS" | "GEODIS" | "GLS_CZ" | "GLS_FR" | "GLS_DE" | "GLS_IT" | "GLS_NL" | "GLS_ES" | "GLS" | "ACS_GR" | "GENIKI_GR" | "GLOBEGISTICS" | "GREYHOUND" | "HERMES_DE" | "HERMESWORLD_UK" | "HK_POST" | "HRVATSKA_HR" | "HUAHAN_EXPRESS" | "IMX" | "ITIS" | "INDIA_POST" | "INTERLINK" | "INT_SEUR" | "INT_SUER" | "ISRAEL_POST" | "JNE_IDN" | "JAMEXPRESS_PH" | "JAPAN_POST" | "JP_POST" | "JETSHIP_MY" | "JETSHIP_SG" | "KERRY_EXPRESS_VN" | "KERRY_EXPRESS_HK" | "KERRY_EXPRESS_TH" | "KIALA" | "KOREA_POST" | "CJ_KR" | "LAPOSTE" | "LBC_PH" | "LIETUVOS_LT" | "LION_PARCEL" | "LOGISTICSWORLDWIDE_HK" | "LOGISTICSWORLDWIDE_KR" | "LOGISTICSWORLDWIDE_MY" | "LOOMIS" | "MONDIAL" | "MAGYAR_HU" | "MALAYSIA_POST" | "MASTERLINK" | "AEROFLASH" | "REDPACK" | "SENDA_MX" | "MONDIAL_BE" | "MYHERMES" | "NACEX_ES" | "NATIONWIDE" | "NZ_POST" | "NIPOST_NG" | "NIGHTLINE_UK" | "NINJAVAN_PH" | "NINJAVAN_SG" | "NOVA_POSHTA_INT" | "NOVA_POSHTA" | "OCA_AR" | "ONTRAC" | "PTT_POST" | "PANDU" | "PARCELPOST_SG" | "POCZTA_POLSKA" | "POCZTEX" | "CTT_PT" | "SEUR_PT" | "POS_ID" | "POS_INT" | "POSTNL_INT_3_S" | "POSTNL" | "POSTNL_INT" | "POSTNORD_LOGISTICS_DK" | "POSTNORD_LOGISTICS_SE" | "POSTNORD_LOGISTICS_GLOBAL" | "POSTA_RO" | "POSTE_ITALIANE" | "POSTEN_NORGE" | "PROFESSIONAL_COURIERS" | "RAF_PH" | "RL_US" | "RPD_2_MAN" | "RPX_ID" | "REDEXPRESS" | "REDUR_ES" | "REGISTER_MAIL_IT" | "RELAIS_COLIS_FR" | "ROCKET_PARCEL" | "SDA_IT" | "SF_EXPRESS" | "SFC_EXPRESS" | "SGT_IT" | "SRE_KOREA" | "SAGAWA" | "SAGAWA_JP" | "POST_SERBIA_CS" | "SINGPOST" | "SIODEMKA" | "SKYNET_WORLDWIDE" | "SKYNET_MY" | "SKYNET_UAE" | "SKYNET_UK" | "SEUR_ES" | "STARTRACK_EXPRESS" | "STARTRACK" | "SWISS_POST" | "TNT_AU" | "TNT_CN" | "TNT_CLICK_IT" | "TNT_FR" | "TNT_DE" | "TNT_IT" | "TNT_JP" | "TNT_NL" | "TNT_PL" | "TNT_ES" | "TNT_UK" | "TPG" | "TAIWAN_POST_TW" | "TAQBIN_HK" | "TAQBIN_MY" | "TAQBIN_SG" | "TAXIPOST" | "TELIWAY" | "THAILAND_POST" | "THE_COURIER_GUY" | "TIKI_ID" | "TOLL_IPEC" | "TWO_GO" | "TRANSMISSION" | "UK_MAIL" | "UPS_MI" | "VIETNAM_POST" | "WAHANA_ID" | "XEND_EXPRESS_PH" | "XPRESSBEES" | "YAMATO" | "YANWEN_CN" | "YODEL" | "UPS_CANADA" | "UPS_MAIL_INNOVATIONS" | "DE_DELTEC" | "DE_INTERNATIONALSEUR" | "FR_DPD" | "FR_IMX" | "IT_IMX" | "AU_DTDC" | "AU_SENDLE" | "AU_SKYNET" | "ES_GLS" | "ES_INTERNATIONALSEUR" | "ES_IMX" | "CN_HUAHANEXPRESS" | "LOCAL_PICKUP" | "HK_DPEX" | "HK_KERRYEXPRESS" | "HK_LOGISTICSWORLDWIDEEXPRESS" | "HK_RPX" | "HK_SPREADEL" | "IN_SPREADEL" | "TH_CJ" | "KR_LOGISTICSWORLDWIDE" | "AT_DHL" | "BE_IMX" | "MY_LOGISTICSWORLDWIDE" | "MY_JETSHIP" | "SG_DHL" | "SG_SPREADEL" | "POSTAROMANA" | "US_PUROLATOR" | "US_FASTWAY" | "CHRONOPOST" | "CORREOS_DE_ESPANA" | "DEUTSCHE_POST_DHL" | "EBOOST_SDA" | "HONGKONG_POST" | "INTANGIBLE_DIGITAL_SERVICES" | "LA_POSTE" | "LA_POSTE_SUIVI" | "NEKO_YAMATO_UNYUU" | "NITTSU_PELICAN_BIN" | "POSTE_ITALIA" | "SAGAWA_KYUU_BIN" | "STAR_TRACK_EXPRESS" | "US_DTDC" | "US_STARTRACK" | "ISR_ISRAEL_POST" | "BE_MONDIAL" | "B_2_CEUROPE" | "PHL_2_GO" | "PHL_AIR_21" | "PT_SPANISH_SEUR" | "ES_SPANISH_SEUR" | "SG_DPEX" | "CH_IMX" | "DHLG" | "RUSTON" | "MIKROPAKKET" | "XPOST" | "PAN_ASIA" | "PARCELONE" | "SPEEDEE" | "VENIPAK" | "CROSHOT" | "SHREENANDANCOURIER" | "EPST_GLBL" | "NEWGISTICS" | "POST_SLOVENIA" | "JERSEY_POST" | "WMG" | "BOMBINOEXP" | "XQ_EXPRESS" | "FURDECO" | "LEGION_EXPRESS" | "YDH_EXPRESS" | "LHT_EXPRESS" | "SOUTH_AFRICAN_POST_OFFICE" | "GRUPO" | "SPOTON" | "DIMERCO" | "INTERPARCEL_UK" | "ABCUSTOM" | "IND_DELIVREE" | "GLOBAL_ABF" | "CN_BESTEXPRESS" | "DX_SFTP" | "PICKUPP_MYS" | "XPERT_DELIVERY" | "FMX" | "HELLMANN" | "DHL_REFR" | "DHL_HK" | "SHIP_IT_ASIA" | "KERRY_ECOMMERCE" | "GOJEK" | "FRETERAPIDO" | "YODEL_INTNL" | "CFL_LOGISTICS" | "PITNEY_BOWES" | "ZA_SPECIALISED_FREIGHT" | "JANCO" | "XPRESSEN_DK" | "YTO" | "RPD2MAN" | "SEUR_SP_API" | "DELIVERYONTIME" | "WISE_EXPRESS" | "JINSUNG" | "JTEXPRESS_VN" | "CHUKOU1" | "TRANS_KARGO" | "FEDEX_INTL_MLSERV" | "SWISHIP_DE" | "IVOY_WEBHOOK" | "AIRMEE_WEBHOOK" | "VAMOX" | "FIRSTMILE" | "AMS_GRP" | "FASTWAY_IR" | "HH_EXP" | "HRPARCEL" | "MYS_MYPOST_ONLINE" | "GESWL" | "BLUESTAR" | "TIPSA" | "CDEK_TR" | "KGMHUB" | "INTEXPRESS" | "DESCARTES" | "OVERSE_EXP" | "ONECLICK" | "ROADRUNNER_FREIGHT" | "GLS_CROTIA" | "TOURLINE" | "MRW_FTP" | "BH_WORLDWIDE" | "BLUEX" | "DYLT" | "OCS" | "YINGNUO_LOGISTICS" | "SIN_GLBL" | "TUFFNELLS_REFERENCE" | "CJPACKET" | "MILKMAN" | "FIEGE_NL" | "ASIGNA" | "ONEWORLDEXPRESS" | "LTIANEXP" | "KWE_GLOBAL" | "CTC_EXPRESS" | "LAO_POST" | "EU_IMX" | "GLS_SLOV" | "AMAZON" | "MORE_LINK" | "JX" | "MYS_EMS" | "EASY_MAIL" | "ADUIEPYLE" | "GB_PANTHER" | "SG_DETRACK" | "EXPRESSSALE" | "DICOM" | "MATDESPATCH" | "TRUNKRS_WEBHOOK" | "WESTBANK_COURIER" | "MBW" | "KHM_CAMBODIA_POST" | "FEDEX_CROSSBORDER" | "JANIO" | "SINOTRANS" | "BRT_IT_PARCELID" | "A1POST" | "DHL_SUPPLY_CHAIN" | "TAZMANIAN_FREIGHT" | "TOPYOU" | "PALEXPRESS" | "SAIA_FREIGHT" | "CN_WEDO" | "FULFILLME" | "SG_QXPRESS" | "UPS_REFERENCE" | "NHANS_SOLUTIONS" | "CARIBOU" | "LOCUS_WEBHOOK" | "DSV" | "CN_GOFLY" | "COORDINADORA" | "P2P_TRC" | "ANDREANI" | "DIRECTPARCELS" | "DOORA" | "FEDEX_POLAND" | "INTERPARCEL_NZ" | "XDP_UK_REFERENCE" | "ETOMARS" | "CN_JCEX" | "IND_ECOM" | "FAR_INTERNATIONAL" | "ESP_ENVIALIA" | "IDEXPRESS" | "GANGBAO" | "SMSA_EXPRESS" | "NEWAY" | "DEX_I" | "DESIGNERTRANSPORT_WEBHOOK" | "BUDBEE_WEBHOOK" | "GLS_SLOVEN" | "PARCELLED_IN" | "COPA_COURIER" | "GSI_EXPRESS" | "CON_WAY" | "BROUWER_TRANSPORT" | "TOLL_NZ" | "CPEX" | "ECHO" | "FEDEX_FR" | "XDE_WEBHOOK" | "TOLOS" | "BORDEREXPRESS" | "GIAO_HANG" | "MAILPLUS_JPN" | "GEODIS_ESPACE" | "TNT_UK_REFR" | "DOORDASH_WEBHOOK" | "KEC" | "CJ_HK_INTERNATIONAL" | "HELTHJEM" | "ZA_COURIERIT" | "SFB2C" | "FREIGHTQUOTE" | "FR_EXAPAQ" | "LANDMARK_GLOBAL_REFERENCE" | "PARCEL2GO" | "DELNEXT" | "TCK_EXPRESS" | "ENDEAVOUR_DELIVERY" | "NANJINGWOYUAN" | "HEPPNER_FR" | "PICKRR" | "FONSEN" | "APC_OVERNIGHT_CONNUM" | "STAR_TRACK_NEXT_FLIGHT" | "UPS_FREIGHT" | "DAJIN" | "POSTA_PLUS" | "CEVA" | "ORANGE_DS" | "ANSERX" | "JS_EXPRESS" | "PADTF" | "GAC" | "EZSHIP" | "GEIS" | "SYPOST" | "AMAZON_SHIP_MCF" | "SF_EX" | "YUSEN" | "ESP_MRW" | "BRING" | "PAGO" | "AO_COURIER" | "GBA" | "DIAMOND_EUROGISTICS" | "NEWEGGEXPRESS" | "LALAMOVE" | "SPEEDCOURIERS_GR" | "CORPORATECOURIERS_WEBHOOK" | "FORRUN" | "PICKUP" | "BOND" | "ECMS" | "INTELIPOST" | "SK_POSTA" | "FLASHEXPRESS" | "FETCHR_WEBHOOK" | "CN_STO" | "SEKO_SFTP" | "THEDELIVERYGROUP" | "CELLO_SQUARE" | "HOME_DELIVERY_SOLUTIONS" | "DPD_HGRY" | "KERRYTTC_VN" | "TARRIVE" | "JOYING_BOX" | "COLLIVERY" | "TOTAL_EXPRESS" | "ZJS_EXPRESS" | "STARKEN" | "MAINFREIGHT" | "IND_FIRSTFLIGHT" | "BE_BPOST" | "DEMANDSHIP" | "CN_DPEX" | "ACSWORLDWIDE" | "LOGISTERS" | "GOGLOBALPOST" | "AMSTAN" | "OKAYPARCEL" | "I_DIKA" | "ENVIALIA_REFERENCE" | "PAACK_WEBHOOK" | "GRAB_WEBHOOK" | "PARCELPOINT" | "ICUMULUS" | "FDSEXPRESS" | "DAIGLOBALTRACK" | "CNDEXPRESS" | "GLOBAL_IPARCEL" | "AMAZON_FBA_SWISHIP" | "WYNGS" | "YURTICI_KARGO" | "CN_PAYPAL_PACKAGE" | "PARCEL_2_POST" | "ZYLLEM" | "VIA_EXPRESS" | "WIZMO" | "TIGFREIGHT" | "PIL_LOGISTICS" | "ZTO_EXPRESS" | "HEPPNER" | "GENERAL_OVERNIGHT" | "HAPPY2POINT" | "ARCO_SPEDIZIONI" | "CHITCHATS" | "IML" | "SMOOTH" | "INTEL_VALLEY" | "CLE_LOGISTICS" | "FIEGE" | "MX_CARGO" | "ZIINGFINALMILE" | "TCS" | "DAYTON_FREIGHT" | "ROADBULL" | "YODEL_DIR" | "STONE3PL" | "PARCELPAL_WEBHOOK" | "DHL_ECOMERCE_ASA" | "SIMPLYPOST" | "KY_EXPRESS" | "SHENZHEN" | "UC_EXPRE" | "US_LASERSHIP" | "DIDADI" | "DYNALOGIC" | "DBSCHENKER_B2B" | "MXE" | "PFCEXPRESS" | "WHISTL" | "CAE_DELIVERS" | "WEPOST" | "ALLIEDEXPRESS" | "SHIPPIT" | "DDEXPRESS" | "ARAMEX_AU" | "TFM" | "BNEED" | "M_XPRESS" | "HK_TGX" | "LATVIJAS_PASTS" | "HDB_BOX" | "VIAEUROPE" | "CORREO_UY" | "CLEVY_LINKS" | "IBEONE" | "J_NET" | "RCL" | "6LS" | "CGS_EXPRESS" | "BLR_BELPOST" | "BIRDSYSTEM" | "DOBROPOST" | "SAP_EXPRESS" | "WEASHIP" | "SONICTL" | "KWT" | "AFLLOG_FTP" | "IND_SAFEEXPRESS" | "TOPHATTEREXPRESS" | "SEINO" | "MGLOBAL" | "SZENDEX" | "AVERITT" | "DBSCHENKER_SV" | "LEADER" | "AO_DEUTSCHLAND" | "2EBOX" | "EU_FLEET_SOLUTIONS" | "SG_SPEEDPOST" | "PCFCORP" | "AERONET" | "LINKBRIDGE" | "DE_DEUTSCHE_POST_DHL_WITHIN_EUROPE_TRACKNET" | "PRIMAMULTICIPTA" | "ISR_POST_DOMESTIC" | "COUREX" | "ZAJIL_EXPRESS" | "BESTWAYPARCEL" | "COLLECTCO" | "AEX" | "JTEXPRESS" | "FEDEX_UK" | "USHIP" | "ROUTIFIC_WEBHOOK" | "GLOBAL_EXPRESS" | "BRT_IT_SENDER_REF" | "GLOBAVEND" | "PIXSELL" | "SHIPTOR" | "CDEK" | "VNM_VIETTELPOST" | "PHL_AIR21" | "PALLET_NETWORK" | "CJ_CENTURY" | "UK_XDP" | "GSO" | "VIWO" | "SKYBOX" | "PAPER_EXPRESS" | "KERRYTJ" | "NTLOGISTICS_VN" | "SDH_SCM" | "PALLETWAYS" | "NOX_NACHTEXPRESS" | "ZINC" | "DPE_SOUTH_AFRC" | "LOGISTIKA" | "CELERITAS" | "PRESSIODE" | "SHREE_MARUTI" | "PARCELINKLOGISTICS" | "EFEX" | "LOTTE" | "LONESTAR" | "GB_NORSK" | "APRISAEXPRESS" | "BEL_RS" | "OSM_WORLDWIDE" | "SAILPOST" | "MAILAMERICAS" | "WESTGATE_GL" | "DTD_EXPR" | "ALFATREX" | "THABIT_LOGISTICS" | "PROMEDDELIVERY" | "PAQUETEXPRESS" | "NEWZEALAND_COURIERS" | "LIEFERY" | "JOOM_LOGIS" | "STRECK_TRANSPORT" | "HCT_LOGISTICS" | "ZA_FASTWAY" | "CARRY_FLAP" | "PONY_EXPRESS" | "US_OLD_DOMINION" | "ANICAM_BOX" | "ALWAYS_EXPRESS" | "WANBEXPRESS" | "AUS_STARTRACK" | "GBS_BROKER" | "STALLIONEXPRESS" | "RAIDEREX" | "ALLJOY" | "SHOPFANS" | "KYUNGDONG_PARCEL" | "CHAMPION_LOGISTICS" | "PICKUPP_SGP" | "DEALERSEND" | "MORNING_EXPRESS" | "NACEX" | "THENILE_WEBHOOK" | "JOCOM" | "HOLISOL" | "LBCEXPRESS_FTP" | "CSE" | "TFORCE_FINALMILE" | "KURASI" | "GEMWORLDWIDE" | "SHIP_GATE" | "USF_REDDAWAY" | "SHIPTER" | "NATIONAL_SAMEDAY" | "APG" | "CN_BOXC" | "YUNEXPRESS" | "INTEGRA2_FTP" | "CAINIAO" | "ECOSCOOTING" | "DMS_MATRIX" | "MAINWAY" | "ASENDIA_USA" | "PAPERFLY" | "HOUNDEXPRESS" | "3JMSLOGISTICS" | "EP_BOX" | "BOX_BERRY" | "LICCARDI_EXPRESS" | "PLUS_LOG_UK" | "FULFILLA" | "SKY_POSTAL" | "ASE" | "CNWANGTONG" | "PITTOHIO" | "MAIL_PLUS" | "XPO_LOGISTICS" | "WNDIRECT" | "CLOUDWISH_ASIA" | "ZELERIS" | "MARA_XPRESS" | "GIO_EXPRESS" | "OCS_WORLDWIDE" | "DESTINY" | "ARK_LOGISTICS" | "DE_DPD_DELISTRACK" | "COMET_TECH" | "DHL_PARCEL_RU" | "AQUILINE" | "PILOT_FREIGHT" | "TNT_REFR" | "QWINTRY" | "DANSKE_FRAGT" | "SHREE_ANJANI_COURIER" | "CARRIERS" | "AIR_CANADA_GLOBAL" | "PRESIDENT_TRANS" | "STEPFORWARDFS" | "ESHIPPING" | "SHREETIRUPATI" | "HX_EXPRESS" | "INDOPAKET" | "CN_17POST" | "K1_EXPRESS" | "CJ_GLS" | "MYS_GDEX" | "NATIONEX" | "CN_EQUICK" | "ANJUN" | "VIRTRANSPORT" | "FARGOOD" | "SMG_EXPRESS" | "RZYEXPRESS" | "SEFL" | "HIPSHIPPER" | "HDB" | "RPXLOGISTICS" | "MIKROPAKKET_BE" | "KUEHNE" | "IT_NEXIVE" | "PTS" | "ETS_EXPRESS" | "SWISS_POST_FTP" | "COLIS_PRIVE" | "FASTRK_SERV" | "4_72" | "US_YRC" | "CN_YUNDA" | "POSTNL_INTL_3S" | "AAA_COOPER" | "ELIAN_POST" | "CUBYN" | "SAU_SAUDI_POST" | "360LION" | "ABXEXPRESS_MY" | "NINJAVAN_WB" | "ESP_PACKLINK" | "IND_JAYONEXPRESS" | "GB_ARROW" | "ZES_EXPRESS" | "IND_GOJAVAS" | "ZEPTO_EXPRESS" | "SKYNET_ZA" | "KPOST" | "ZEEK_2_DOOR" | "DHL_FREIGHT" | "BLUECARE" | "BLINKLASTMILE" | "POSTA_UKR" | "LOGISTYX_TRANSGROUP" | "JINDOUYUN" | "CHROBINSON" | "TRACKON" | "CN_POST56" | "GB_TUFFNELLS" | "COURANT_PLUS" | "SCUDEX_EXPRESS" | "SHIPENTEGRA" | "TRUMPCARD" | "CHOIR_EXP" | "ETOTAL" | "COPE" | "SFPLUS_WEBHOOK" | "IND_GATI" | "HERMES_2MANN_HANDLING" | "CN_WISHPOST" | "GLOBALTRANZ" | "HKD" | "UDS" | "BJSHOMEDELIVERY" | "YAKIT" | "LEXSHIP" | "OMNIVA" | "SUTTON" | "COSTMETICSNOW" | "PANTHER_REFERENCE" | "SFCSERVICE" | "PFLOGISTICS" | "LTL" | "LOOMIS_EXPRESS" | "PARKNPARCEL" | "SPRING_GDS" | "GLS_ITALY" | "ECEXPRESS" | "LINE" | "INTERPARCEL_AU" | "GEL_EXPRESS" | "AGILITY" | "XL_EXPRESS" | "ADERONLINE" | "DIRECTCOURIERS" | "PLANZER" | "NOX_NIGHT_TIME_EXPRESS" | "SENDING" | "HUODULL";
            /** @description The name of carrier in free-form text for unavailable carriers. This field is mandatory when <code>carrier_name</code> is <code>OTHER</code>. */
            carrier_name_other?: string;
            /**
             * Format: uri
             * @description The URL to track the dispute-related transaction shipment.
             */
            tracking_url?: string;
            /** @description The number to track the dispute-related transaction shipment. */
            tracking_number: string;
        };
        /**
         * Evidence Information
         * @description The evidence-related information.
         */
        evidence_info: {
            /** @description An array of relevant tracking information for the transaction involved in this dispute. */
            tracking_info?: components["schemas"]["tracking_info"][];
            /** @description An array of refund IDs for the transaction involved in this dispute. */
            refund_ids?: string[];
        };
        /**
         * Evidence Extensions
         * @description The extended properties for a evidence. Includes additional information such as the action for which the evidence was requested/submitted, and whether the evidence is mandatory.
         */
        action_info: {
            /**
             * @description The action for which the evidence was requested or submitted.
             * @enum {string}
             */
            action?: "ACKNOWLEDGE_RETURN_ITEM" | "ACCEPT_CLAIM" | "PROVIDE_EVIDENCE" | "APPEAL" | "CANCEL" | "CHANGE_REASON" | "ESCALATE";
            /** @description The response option for the corresponding action. Possible values:<ul><li><a href="/docs/api/customer-disputes/v1/#definition-acknowledgement_type">Acknowledgement Types</a></li><li><a href="/docs/api/customer-disputes/v1/#definition-response-accept_claim_type">Accept Claim types</a></li></ul>. */
            response_option?: string;
            /** @description Indicates whether the evidence is mandatory for the corresponding action and response option. */
            mandatory?: boolean;
        };
        /**
         * Evidence
         * @description A merchant- or customer-submitted evidence document. evidence_info is expected for PROOF_OF_FULFILLMENT,PROOF_OF_REFUND and PROOF_OF_RETURN evidence types. documents and notes can be given for rest of the evidence types.
         */
        evidence: {
            /**
             * @description The evidence type.
             * @enum {string}
             */
            evidence_type?: "PROOF_OF_FULFILLMENT" | "PROOF_OF_REFUND" | "PROOF_OF_DELIVERY_SIGNATURE" | "PROOF_OF_RECEIPT_COPY" | "RETURN_POLICY" | "BILLING_AGREEMENT" | "PROOF_OF_RESHIPMENT" | "ITEM_DESCRIPTION" | "POLICE_REPORT" | "AFFIDAVIT" | "PAID_WITH_OTHER_METHOD" | "COPY_OF_CONTRACT" | "TERMINAL_ATM_RECEIPT" | "PRICE_DIFFERENCE_REASON" | "SOURCE_CONVERSION_RATE" | "BANK_STATEMENT" | "CREDIT_DUE_REASON" | "REQUEST_CREDIT_RECEIPT" | "PROOF_OF_RETURN" | "CREATE" | "CHANGE_REASON" | "PROOF_OF_REFUND_OUTSIDE_PAYPAL" | "RECEIPT_OF_MERCHANDISE" | "CUSTOMS_DOCUMENT" | "CUSTOMS_FEE_RECEIPT" | "INFORMATION_ON_RESOLUTION" | "ADDITIONAL_INFORMATION_OF_ITEM" | "DETAILS_OF_PURCHASE" | "PROOF_OF_SIGNIFICANT_DIFFERENCE" | "PROOF_OF_SOFTWARE_OR_SERVICE_NOT_AS_DESCRIBED" | "PROOF_OF_CONFISCATION" | "PROOF_OF_DAMAGE" | "COPY_OF_LAW_ENFORCEMENT_AGENCY_REPORT" | "ADDITIONAL_PROOF_OF_SHIPMENT" | "PROOF_OF_DENIAL_BY_CARRIER" | "THIRDPARTY_PROOF_FOR_DAMAGE_OR_SIGNIFICANT_DIFFERENCE" | "VALID_SUPPORTING_DOCUMENT" | "LEGIBLE_SUPPORTING_DOCUMENT" | "RETURN_TRACKING_INFORMATION" | "DELIVERY_RECEIPT" | "PROOF_OF_INSTORE_RECEIPT" | "ADDITIONAL_TRACKING_INFORMATION" | "PROOF_OF_SHIPMENT_POSTAGE" | "ONLINE_TRACKING_INFORMATION" | "PROOF_OF_INSTORE_REFUND" | "PROOF_FOR_SOFTWARE_OR_SERVICE_DELIVERED" | "RETURN_ADDRESS_FOR_SHIPPING" | "COPY_OF_THE_EPARCEL_MANIFEST" | "COPY_OF_SHIPPING_MANIFEST" | "APPEAL_AFFIDAVIT" | "RECEIPT_OF_REPLACEMENT" | "COPY_OF_DRIVERS_LICENSE" | "ACCOUNT_CHANGE_INFORMATION" | "DELIVERY_ADDRESS" | "CONFIRMATION_OF_RESOLUTION" | "MERCHANT_RESPONSE" | "PERMISSION_DESCRIPTION" | "STATUS_OF_MERCHANDISE" | "LOST_CARD_DETAILS" | "LAST_VALID_TRANSACTION_DETAILS" | "ADDITIONAL_PROOF_OF_RETURN" | "DECLARATION" | "PROOF_OF_MISSING_ITEMS" | "PROOF_OF_EMPTY_PACKAGE_OR_DIFFERENT_ITEM" | "PROOF_OF_ITEM_NOT_RECEIVED" | "ORDER_DETAILS" | "LISTING_URL" | "SHIPPING_INSURANCE" | "BUYER_RESPONSE" | "PHOTOS_OF_SHIPPED_ITEM" | "OTHER";
            evidence_info?: components["schemas"]["evidence_info"];
            /** @description An array of evidence documents. */
            documents?: components["schemas"]["document"][];
            /** @description Any evidence-related notes. */
            notes?: string;
            /**
             * @description The source of the evidence.
             * @enum {string}
             */
            readonly source?: "REQUESTED_FROM_BUYER" | "REQUESTED_FROM_SELLER" | "SUBMITTED_BY_BUYER" | "SUBMITTED_BY_SELLER" | "SUBMITTED_BY_PARTNER";
            /** @description The date and time when the evidence was received, in [Internet date and time format](http://tools.ietf.org/html/rfc3339#section-5.6). */
            readonly date?: components["schemas"]["date_time"];
            /** @description The item ID. If the merchant provides multiple pieces of evidence and the transaction has multiple item IDs, the merchant can use this value to associate a piece of evidence with an item ID. */
            item_id?: string;
            /** @description The item type for which the evidence is requested or submitted. */
            readonly item_type?: components["schemas"]["item_type"];
            /** @description The action details for the information. Includes additional information such as the action for which the evidence was requested/submitted, and whether the evidence is mandatory for the corresponding action. */
            readonly action_info?: components["schemas"]["action_info"];
            /** @description The dispute life cycle stage for the evidence. */
            readonly dispute_life_cycle_stage?: components["schemas"]["dispute_lifecycle_stage"];
        };
        /**
         * Offer Type
         * @description The merchant-proposed offer type for the dispute.
         * @enum {string}
         */
        offer_type: "REFUND" | "REFUND_WITH_RETURN" | "REFUND_WITH_REPLACEMENT" | "REPLACEMENT_WITHOUT_REFUND";
        /**
         * Offer History
         * @description The offer history.
         */
        offer_history: {
            /** @description The date and time when the event occurred, in [Internet date and time format](http://tools.ietf.org/html/rfc3339#section-5.6). */
            offer_time?: components["schemas"]["date_time"];
            /**
             * @description The event-related actor.
             * @enum {string}
             */
            actor?: "BUYER" | "SELLER";
            /**
             * @description The type of the history event.
             * @enum {string}
             */
            event_type?: "PROPOSED" | "ACCEPTED" | "DENIED";
            offer_type?: components["schemas"]["offer_type"];
            /** @description The offer amount. */
            offer_amount?: components["schemas"]["money"];
            /** @description The user submitted notes. */
            readonly notes?: string;
            /** @description The dispute life cycle stage during the offer event. */
            readonly dispute_life_cycle_stage?: components["schemas"]["dispute_lifecycle_stage"];
        };
        /**
         * Offer
         * @description The merchant-proposed offer for a dispute.
         */
        offer: {
            /** @description The customer-requested refund for this dispute. */
            buyer_requested_amount?: components["schemas"]["money"];
            /** @description The merchant-offered refund for this dispute. */
            seller_offered_amount?: components["schemas"]["money"];
            offer_type?: components["schemas"]["offer_type"];
            /** @description An array of history information for an offer. */
            history?: components["schemas"]["offer_history"][];
        };
        /**
         * Refund Details
         * @description The refund details.
         */
        refund_details: {
            /** @description The maximum refundable amount. */
            allowed_refund_amount?: components["schemas"]["money"];
        };
        /**
         * Contact Details
         * @description The contact details that a merchant provides to the customer to use to share their evidence documents.
         */
        communication_details: {
            /** @description The email address that is provided by the merchant where the customer can share the evidences. */
            email?: components["schemas"]["email_address"];
            /** @description The merchant provided notes that are visible to both the customer and PayPal. */
            note?: string;
            /** @description The date and time when the contact details were posted, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). */
            readonly time_posted?: components["schemas"]["date_time"];
        };
        /**
         * Supporting Info
         * @description A merchant- or customer-submitted supporting information.
         */
        supporting_info: {
            /** @description Any supporting notes. */
            readonly notes?: string;
            /** @description An array of metadata for the documents which were uploaded as supporting information for the dispute. */
            readonly documents?: components["schemas"]["document"][];
            /**
             * @description The source of the Information.
             * @enum {string}
             */
            readonly source?: "SUBMITTED_BY_BUYER" | "SUBMITTED_BY_SELLER" | "SUBMITTED_BY_PARTNER";
            /** @description The date and time when the information was received, in [Internet date and time format](http://tools.ietf.org/html/rfc3339#section-5.6). */
            readonly provided_time?: components["schemas"]["date_time"];
            /** @description The dispute life cycle stage for the supporting info. */
            readonly dispute_life_cycle_stage?: components["schemas"]["dispute_lifecycle_stage"];
        };
        /**
         * Allowed Acknowledgement Type
         * @description The type of acknowledgement allowed for the merchant after the customer has returned the item. The merchant can update whether the item was received and is as expected or if the item was not received.
         * @enum {string}
         */
        acknowledgement_type: "ITEM_RECEIVED" | "ITEM_NOT_RECEIVED" | "DAMAGED" | "EMPTY_PACKAGE_OR_DIFFERENT" | "MISSING_ITEMS";
        /**
         * Acknowledge Return Item Response Options
         * @description The allowed response options when the seller acknowledges that the buyer has returned an item for the dispute.
         */
        acknowledge_return_item_response_options: {
            /** @description The types of response when the merchant acknowledges a returned item. */
            acknowledgement_types?: components["schemas"]["acknowledgement_type"][];
        };
        /**
         * Accept Claim Type
         * @description The refund type proposed by the merchant for the dispute.
         * @enum {string}
         */
        accept_claim_type: "REFUND" | "REFUND_WITH_RETURN" | "PARTIAL_REFUND" | "REFUND_WITH_RETURN_SHIPMENT_LABEL";
        /**
         * Accept Claim Response Options
         * @description The allowed response options when the merchant is accepting the claim.
         */
        accept_claim_response_options: {
            /** @description The types of refund the merchant can provide the customer. */
            accept_claim_types?: components["schemas"]["accept_claim_type"][];
        };
        /**
         * Make Offer Response Options
         * @description The allowed response options when the merchant makes offer to the customer.
         */
        make_offer_response_options: {
            /** @description The types of offer the merchant can offer the customer. */
            offer_types?: components["schemas"]["offer_type"][];
        };
        /**
         * Allowed Response Options
         * @description The allowed response options for the buyer/seller update actions.
         */
        allowed_response_options: {
            acknowledge_return_item?: components["schemas"]["acknowledge_return_item_response_options"];
            accept_claim?: components["schemas"]["accept_claim_response_options"];
            make_offer?: components["schemas"]["make_offer_response_options"];
        };
        /**
         * Dispute Details
         * @description The dispute details.
         */
        dispute: {
            /** @description The ID of the dispute. */
            readonly dispute_id?: string;
            /** @description The date and time when the dispute was created, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *`yyyy`*-*`MM`*-*`dd`*`T`*`HH`*:*`mm`*:*`ss`*.*`SSS`*`Z`. */
            readonly create_time?: components["schemas"]["date_time"];
            /** @description The date and time when the dispute was last updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *`yyyy`*-*`MM`*-*`dd`*`T`*`HH`*:*`mm`*:*`ss`*.*`SSS`*`Z`. */
            readonly update_time?: components["schemas"]["date_time"];
            /** @description An array of transactions for which disputes were created. */
            disputed_transactions?: components["schemas"]["transaction_info"][];
            reason?: components["schemas"]["dispute_reason"];
            readonly status?: components["schemas"]["status"];
            /** @description The amount in the transaction that the customer originally disputed. Because customers can sometimes dispute only part of the payment, the disputed amount might be different from the total gross or net amount of the original transaction. */
            dispute_amount?: components["schemas"]["money"];
            /** @description The asset in the transaction that the customer disputed. */
            dispute_asset?: components["schemas"]["cryptocurrency"];
            /** @description Policy that determines whether the fee needs to be charged, retained or returned while moving the money as part of dispute process. */
            readonly fee_policy?: components["schemas"]["fee_policy"];
            /** @description The code that identifies the reason for the credit card chargeback. Each card issuer follows their own standards for defining reason type, code, and its format. For more details about the external reason code, see the card issue site. Available for only unbranded transactions. */
            external_reason_code?: string;
            readonly dispute_outcome?: components["schemas"]["dispute_outcome"];
            /** @description The Teammate Adjudication details for the dispute. */
            adjudications?: components["schemas"]["adjudication"][];
            /** @description The Money movement details for the dispute. */
            money_movements?: components["schemas"]["money_movement"][];
            readonly dispute_life_cycle_stage?: components["schemas"]["dispute_lifecycle_stage"];
            dispute_channel?: components["schemas"]["dispute_channel"];
            /** @description An array of customer- or merchant-posted messages for the dispute. */
            messages?: components["schemas"]["message"][];
            extensions?: components["schemas"]["extensions"];
            /** @description An array of evidence documents. */
            evidences?: components["schemas"]["evidence"][];
            /** @description The date and time by when the customer must respond to the dispute, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). If the customer does not respond by this date and time, the dispute is closed in the merchant's favor. For example, *`yyyy`*-*`MM`*-*`dd`*`T`*`HH`*:*`mm`*:*`ss`*.*`SSS`*`Z`. */
            readonly buyer_response_due_date?: components["schemas"]["date_time"];
            /** @description The date and time by when the merchant must respond to the dispute, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). If the merchant does not respond by this date and time, the dispute is closed in the customer's favor. For example, *`yyyy`*-*`MM`*-*`dd`*`T`*`HH`*:*`mm`*:*`ss`*.*`SSS`*`Z`. */
            readonly seller_response_due_date?: components["schemas"]["date_time"];
            readonly offer?: components["schemas"]["offer"];
            readonly refund_details?: components["schemas"]["refund_details"];
            communication_details?: components["schemas"]["communication_details"];
            /** @description An array of all the supporting information that are associated to this dispute. */
            readonly supporting_info?: components["schemas"]["supporting_info"][];
            readonly allowed_response_options?: components["schemas"]["allowed_response_options"];
            /** @description An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links/). */
            readonly links?: components["schemas"]["link_description"][];
        };
        /**
         * Patch
         * @description The JSON patch object to apply partial updates to resources.
         */
        patch: {
            /**
             * @description The operation.
             * @enum {string}
             */
            op: "add" | "remove" | "replace" | "move" | "copy" | "test";
            /** @description The <a href="https://tools.ietf.org/html/rfc6901">JSON Pointer</a> to the target document location at which to complete the operation. */
            path?: string;
            /**
             * Patch Value
             * @description The value to apply. The <code>remove</code> operation does not require a value.
             */
            value?: unknown;
            /** @description The <a href="https://tools.ietf.org/html/rfc6901">JSON Pointer</a> to the target document location from which to move the value. Required for the <code>move</code> operation. */
            from?: string;
        };
        /**
         * Patch Request
         * @description An array of JSON patch objects to apply partial updates to resources.
         */
        patch_request: components["schemas"]["patch"][];
        /**
         * Subsequent Action
         * @description The subsequent action.
         */
        subsequent_action: {
            /** @description An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links/). */
            readonly links?: components["schemas"]["link_description"][];
        };
        /**
         * Settle Request
         * @description A request to settle a dispute in either the customer's or merchant's favor.
         */
        adjudicate: {
            /**
             * @description The outcome of the adjudication.
             * @enum {string}
             */
            adjudication_outcome: "BUYER_FAVOR" | "SELLER_FAVOR";
        };
        /**
         * Require Evidence Request
         * @description Sandbox only. Updates the state of a dispute, by ID, to either <code>WAITING_FOR_BUYER_RESPONSE</code> or <code>WAITING_FOR_SELLER_RESPONSE</code>. This state change enables either the customer or merchant to submit evidence for the dispute. Specify an <code>action</code> value in the JSON request body to indicate whether the state change enables the customer or merchant to submit evidence.
         */
        require_evidence: {
            /**
             * @description The action. Indicates whether the state change enables the customer or merchant to submit evidence.
             * @enum {string}
             */
            action: "BUYER_EVIDENCE" | "SELLER_EVIDENCE";
        };
        buyer_escalation_reason: unknown;
        /**
         * Escalate Claim Request
         * @description A merchant request to escalate a dispute, by ID, to a PayPal claim.
         */
        escalate: {
            /** @description The notes about the escalation of the dispute to a claim. */
            note: string;
            buyer_escalation_reason?: components["schemas"]["buyer_escalation_reason"];
        };
        /**
         * Make Offer Request
         * @description A merchant request to make an offer to resolve a dispute.
         */
        make_offer: {
            /** @description The merchant's notes about the offer. */
            note: string;
            /** @description The amount proposed to resolve the dispute. */
            offer_amount?: components["schemas"]["money"];
            /** @description The return address for the item. Required when the customer must return an item to the merchant for the <code>MERCHANDISE_OR_SERVICE_NOT_AS_DESCRIBED</code> dispute reason, especially if the refund amount is less than the dispute amount. */
            return_shipping_address?: components["schemas"]["address_portable"];
            /** @description The merchant-provided ID of the invoice for the refund. This optional value maps the refund to an invoice ID in the merchant's system. */
            invoice_id?: string;
            offer_type: components["schemas"]["offer_type"];
        };
        /**
         * Accept Offer Request
         * @description A customer request to accept the offer made by the merchant.
         */
        accept_offer: {
            /** @description The customer notes about accepting of offer. PayPal can but the merchant cannot view these notes. */
            note?: string;
        };
        /**
         * Deny Offer Request
         * @description A customer request to deny the offer made by the merchant.
         */
        deny_offer: {
            /** @description The customer notes about the denial of offer. PayPal can but the merchant cannot view these notes. */
            note: string;
        };
    };
    responses: never;
    parameters: {
        /**
         * @deprecated
         * @description Filters the disputes in the response by a creation date and time. The start time must be within the last 180 days. Value is in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *`yyyy`*-*`MM`*-*`dd`*`T`*`HH`*:*`mm`*:*`ss`*.*`SSS`*`Z`.<br/><br/>You can specify either but not both the `start_time` and `disputed_transaction_id` query parameters.
         */
        start_time: string;
        /** @description Filters the disputes in the response by a transaction, by ID.<br/><br/>You can specify either but not both the `start_time` and `disputed_transaction_id` query parameter. */
        disputed_transaction_id: string;
        /** @description Limits the number of disputes in the response to this value. */
        page_size: number;
        /**
         * @deprecated
         * @description The token that describes the next page of results to fetch. The <a href="/docs/api/customer-disputes/v1/#disputes_list">list disputes</a> call returns this token in the HATEOAS links in the response.
         */
        next_page_token: string;
        /**
         * @description Filters the disputes in the response by a state. Separate multiple values with a comma (`,`). When you specify more than one dispute_state, the response lists disputes that belong to any of the specified dispute_state.
         * @enum {unknown}
         */
        dispute_state: string;
        /** @description The date and time when the dispute was last updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *`yyyy`*-*`MM`*-*`dd`*`T`*`HH`*:*`mm`*:*`ss`*.*`SSS`*`Z`. update_time_before must be within the last 180 days and the default is the current time. */
        update_time_before: string;
        /** @description The date and time when the dispute was last updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *`yyyy`*-*`MM`*-*`dd`*`T`*`HH`*:*`mm`*:*`ss`*.*`SSS`*`Z`. update_time_after must be within the last 180 days and the default is the maximum time (180 days) supported. */
        update_time_after: string;
        /** @description The ID of the dispute for which to provide the supporting information. */
        id: string;
    };
    requestBodies: {
        evidences: {
            content: {
                "multipart/form-data": {
                    /**
                     * Format: binary
                     * @description A file with evidence.
                     */
                    "evidence-file"?: string;
                };
            };
        };
    };
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "disputes.list": {
        parameters: {
            query?: {
                /**
                 * @deprecated
                 * @description Filters the disputes in the response by a creation date and time. The start time must be within the last 180 days. Value is in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *`yyyy`*-*`MM`*-*`dd`*`T`*`HH`*:*`mm`*:*`ss`*.*`SSS`*`Z`.<br/><br/>You can specify either but not both the `start_time` and `disputed_transaction_id` query parameters.
                 */
                start_time?: components["parameters"]["start_time"];
                /** @description Filters the disputes in the response by a transaction, by ID.<br/><br/>You can specify either but not both the `start_time` and `disputed_transaction_id` query parameter. */
                disputed_transaction_id?: components["parameters"]["disputed_transaction_id"];
                /** @description Limits the number of disputes in the response to this value. */
                page_size?: components["parameters"]["page_size"];
                /**
                 * @deprecated
                 * @description The token that describes the next page of results to fetch. The <a href="/docs/api/customer-disputes/v1/#disputes_list">list disputes</a> call returns this token in the HATEOAS links in the response.
                 */
                next_page_token?: components["parameters"]["next_page_token"];
                /**
                 * @description Filters the disputes in the response by a state. Separate multiple values with a comma (`,`). When you specify more than one dispute_state, the response lists disputes that belong to any of the specified dispute_state.
                 * @enum {unknown}
                 */
                dispute_state?: components["parameters"]["dispute_state"];
                /** @description The date and time when the dispute was last updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *`yyyy`*-*`MM`*-*`dd`*`T`*`HH`*:*`mm`*:*`ss`*.*`SSS`*`Z`. update_time_before must be within the last 180 days and the default is the current time. */
                update_time_before?: components["parameters"]["update_time_before"];
                /** @description The date and time when the dispute was last updated, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *`yyyy`*-*`MM`*-*`dd`*`T`*`HH`*:*`mm`*:*`ss`*.*`SSS`*`Z`. update_time_after must be within the last 180 days and the default is the maximum time (180 days) supported. */
                update_time_after?: components["parameters"]["update_time_after"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP <code>200 OK</code> status code and a JSON response body that lists disputes with a full or summary set of details. Default is a summary set of details, which shows the <code>dispute_id</code>, <code>reason</code>, <code>status</code>, <code>dispute_amount</code>, <code>create_time</code>, and <code>update_time</code> fields for each dispute. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["dispute_search"];
                };
            };
            /** @description The request failed due to a validation error. The request returns the HTTP `400 Bad Request` status code. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "disputes.get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the dispute for which to provide the supporting information. */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that shows dispute details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["dispute"];
                };
            };
            /** @description An internal server error occurred. The request returns the HTTP `500 Internal Server Error` status code. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "disputes.patch": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the dispute for which to provide the supporting information. */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["patch_request"];
                "multipart/related": components["schemas"]["patch_request"];
                "multipart/form-data": components["schemas"]["patch_request"];
                "multipart/mixed": components["schemas"]["patch_request"];
            };
        };
        responses: {
            /** @description A successfully accepted request returns the HTTP `202 Accepted` status code and a JSON response body that includes a [HATEOAS link](/docs/api/reference/api-responses/#hateoas-links) to the ID of the request. The Clients can choose webhook option as well to receive dispute update notification. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["subsequent_action"];
                };
            };
            /** @description A successful request returns the HTTP `204 No Content` status code with no JSON response body. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The request failed due to a validation error. The request returns the HTTP `400 Bad Request` status code. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description The requested action could not be completed. The request returns the HTTP `422 Unprocessable Entity` status code. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description An internal server error occurred. The request returns the HTTP `500 Internal Server Error` status code. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "disputes.provide-evidence": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the dispute for which to provide the supporting information. */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["evidences"];
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that includes a link to the dispute. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["subsequent_action"];
                };
            };
            /** @description The request failed due to a validation error. The request returns the HTTP `400 Bad Request` status code. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "disputes.appeal": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the dispute for which to provide the supporting information. */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["evidences"];
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that includes a link to the dispute. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["subsequent_action"];
                };
            };
            /** @description The request failed due to a validation error. The request returns the HTTP `400 Bad Request` status code. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "disputes.accept-claim": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the dispute for which to provide the supporting information. */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /**
                     * Format: binary
                     * @description A file with evidence.
                     */
                    "accept-claim-document"?: string;
                };
            };
        };
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that includes a link to the dispute. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["subsequent_action"];
                };
            };
            /** @description The request failed due to a validation error. The request returns the HTTP `400 Bad Request` status code. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "disputes.adjudicate": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the dispute for which to provide the supporting information. */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["adjudicate"];
                "multipart/related": components["schemas"]["adjudicate"];
                "multipart/form-data": components["schemas"]["adjudicate"];
                "multipart/mixed": components["schemas"]["adjudicate"];
            };
        };
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that includes a link to the dispute. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["subsequent_action"];
                };
            };
            /** @description The request failed due to a validation error. The request returns the HTTP `400 Bad Request` status code. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description The requested action could not be completed. The request returns the HTTP `422 Unprocessable Entity` status code. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description An internal server error occurred. The request returns the HTTP `500 Internal Server Error` status code. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "disputes.require-evidence": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the dispute for which to provide the supporting information. */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["require_evidence"];
                "multipart/related": components["schemas"]["require_evidence"];
                "multipart/form-data": components["schemas"]["require_evidence"];
                "multipart/mixed": components["schemas"]["require_evidence"];
            };
        };
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that includes a link to the dispute. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["subsequent_action"];
                };
            };
            /** @description The request failed due to a validation error. The request returns the HTTP `400 Bad Request` status code. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description The requested action could not be completed. The request returns the HTTP `422 Unprocessable Entity` status code. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description An internal server error occurred. The request returns the HTTP `500 Internal Server Error` status code. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "disputes.escalate": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the dispute for which to provide the supporting information. */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["escalate"];
                "multipart/related": components["schemas"]["escalate"];
                "multipart/form-data": components["schemas"]["escalate"];
                "multipart/mixed": components["schemas"]["escalate"];
            };
        };
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that includes a link to the dispute. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["subsequent_action"];
                };
            };
            /** @description The request failed due to a validation error. The request returns the HTTP `400 Bad Request` status code. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description The requested action could not be completed. The request returns the HTTP `422 Unprocessable Entity` status code. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description An internal server error occurred. The request returns the HTTP `500 Internal Server Error` status code. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "disputes.send-message": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the dispute for which to provide the supporting information. */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /**
                     * Format: binary
                     * @description A file that contains any additional info about the message posted.
                     */
                    message_document?: string;
                };
            };
        };
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that includes a link to the dispute. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["subsequent_action"];
                };
            };
            /** @description The request failed due to a validation error. The request returns the HTTP `400 Bad Request` status code. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description The requested action could not be completed. The request returns the HTTP `422 Unprocessable Entity` status code. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description An internal server error occurred. The request returns the HTTP `500 Internal Server Error` status code. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "disputes.make-offer": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the dispute for which to provide the supporting information. */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["make_offer"];
                "multipart/related": components["schemas"]["make_offer"];
                "multipart/form-data": components["schemas"]["make_offer"];
                "multipart/mixed": components["schemas"]["make_offer"];
            };
        };
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that includes a link to the dispute. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["subsequent_action"];
                };
            };
            /** @description The request failed due to a validation error. The request returns the HTTP `400 Bad Request` status code. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description The requested action could not be completed. The request returns the HTTP `422 Unprocessable Entity` status code. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description An internal server error occurred. The request returns the HTTP `500 Internal Server Error` status code. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "disputes.accept-offer": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the dispute for which to provide the supporting information. */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["accept_offer"];
                "multipart/related": components["schemas"]["accept_offer"];
                "multipart/form-data": components["schemas"]["accept_offer"];
                "multipart/mixed": components["schemas"]["accept_offer"];
            };
        };
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that includes a link to the dispute. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["subsequent_action"];
                };
            };
            /** @description A successfully accepted request returns the HTTP `202 Accepted` status code and a JSON response body that includes a [HATEOAS link](/docs/api/reference/api-responses/#hateoas-links) to the ID of the request. The request returns `202 Accepted` status in case money movement for the offer is delayed due to some internal reasons. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["subsequent_action"];
                };
            };
            /** @description The request failed due to a validation error. The request returns the HTTP `400 Bad Request` status code. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description The requested action could not be completed. The request returns the HTTP `422 Unprocessable Entity` status code. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description An internal server error occurred. The request returns the HTTP `500 Internal Server Error` status code. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "disputes.deny-offer": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the dispute for which to provide the supporting information. */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["deny_offer"];
                "multipart/related": components["schemas"]["deny_offer"];
                "multipart/form-data": components["schemas"]["deny_offer"];
                "multipart/mixed": components["schemas"]["deny_offer"];
            };
        };
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that includes a link to the dispute. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["subsequent_action"];
                };
            };
            /** @description The request failed due to a validation error. The request returns the HTTP `400 Bad Request` status code. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description The requested action could not be completed. The request returns the HTTP `422 Unprocessable Entity` status code. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description An internal server error occurred. The request returns the HTTP `500 Internal Server Error` status code. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "disputes.acknowledge-return-item": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the dispute for which to provide the supporting information. */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /**
                     * Format: binary
                     * @description A file with evidence.
                     */
                    acknowledgement_document?: string;
                };
            };
        };
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that includes a link to the dispute. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["subsequent_action"];
                };
            };
            /** @description The request failed due to a validation error. The request returns the HTTP `400 Bad Request` status code. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description The requested action could not be completed. The request returns the HTTP `422 Unprocessable Entity` status code. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description An internal server error occurred. The request returns the HTTP `500 Internal Server Error` status code. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "disputes.provide-supporting-info": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the dispute for which to provide the supporting information. */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /**
                     * Format: binary
                     * @description A file with evidence.
                     */
                    "supporting document"?: string;
                };
            };
        };
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that includes a link to the dispute. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["subsequent_action"];
                };
            };
            /** @description The request failed due to a validation error. The request returns the HTTP `400 Bad Request` status code. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description The request failed due to the dispute is not available. The request returns the HTTP `404 Not Found` status code. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description The requested action could not be completed. The request returns the HTTP `422 Unprocessable Entity` status code. */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description An internal server error occurred. The request returns the HTTP `500 Internal Server Error` status code. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
}
