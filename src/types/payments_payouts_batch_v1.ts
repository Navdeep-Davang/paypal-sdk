/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/payments/payouts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create batch payout
         * @description Creates a batch payout. In the JSON request body, pass a `sender_batch_header` and an `items` array. The `sender_batch_header` defines how to handle the payout. The `items` array defines the payout items.<br/>You can make payouts to one or more recipients.<blockquote><strong>Notes:</strong> <ul><li><p>PayPal does not process duplicate payouts. If you specify a <code>sender_batch_id</code> that was used in the last 30 days, the API rejects the request with an error message that shows the duplicate <code>sender_batch_id</code> and includes a HATEOAS link to the original payout with the same <code>sender_batch_id</code>.</p><p>If you receive an HTTP <code>5<i>nn</i></code> status code, you can safely retry the request with the same <code>sender_batch_id</code>.</p></li><li><p>The Payouts API does not support build notation (BN) codes. In a future Payouts release, you can optionally provide BN codes in the <code>PayPal-Partner-Attribution-Id</code> request header.</p><p>For information about the <code>PayPal-Partner-Attribution-Id</code> header, see <a href="/api/rest/requests/#http-request-headers">HTTP request headers</a>. To learn about or request a BN code, contact your partner manager or see <a href="https://www.paypal.com/us/webapps/mpp/partner-program">PayPal Partner Program</a>.</p></li></ul></blockquote>
         */
        post: operations["payouts.post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payments/payouts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show payout batch details
         * @description Shows the latest status of a batch payout. Includes the transaction status and other data for individual payout items.
         */
        get: operations["payouts.get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payments/payouts-item/{payout_item_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show payout item details
         * @description Shows details for a payout item, by ID. A <code>payout_item_id</code> helps you identify denied payments. If a payment is denied, you can use the <code>payout_item_id</code> to identify the payment even if it lacks a <code>transaction_id</code>.
         */
        get: operations["payouts-item.get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/payments/payouts-item/{payout_item_id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel unclaimed payout item
         * @description Cancels an unclaimed payout item, by ID. If no one claims the unclaimed item within 30 days, the API automatically returns the funds to the sender. Use this call to cancel the unclaimed item before the automatic 30-day refund. You can cancel payout items with a <code>transaction_status</code> of <code>UNCLAIMED</code>.
         */
        post: operations["payouts-item.cancel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * Error Details
         * @description The error details. Required for client-side `4XX` errors.
         */
        error_details: {
            /** @description The field that caused the error. If this field is in the body, set this value to the field's JSON pointer value. Required for client-side errors. */
            field?: string;
            /** @description The value of the field that caused the error. */
            value?: string;
            location?: components["schemas"]["error_location"];
            /** @description The unique, fine-grained application-level error code. */
            issue: string;
            /** @description The human-readable description for an issue. The description can change over the lifetime of an API, so clients must not depend on this value. */
            description?: string;
        };
        /**
         * @description The location of the field that caused the error. Value is `body`, `path`, or `query`.
         * @default body
         * @enum {string}
         */
        error_location: "body" | "path" | "query";
        /**
         * Link Description
         * @description The request-related [HATEOAS link](/api/rest/responses/#hateoas-links) information.
         */
        error_link_description: {
            /** @description The complete target URL. To make the related call, combine the method with this [URI Template-formatted](https://tools.ietf.org/html/rfc6570) link. For pre-processing, include the `$`, `(`, and `)` characters. The `href` is the key HATEOAS component that links a completed call with a subsequent call. */
            href: string;
            /** @description The [link relation type](https://tools.ietf.org/html/rfc5988#section-4), which serves as an ID for a link that unambiguously describes the semantics of the link. See [Link Relations](https://www.iana.org/assignments/link-relations/link-relations.xhtml). */
            rel: string;
            /**
             * @description The HTTP method required to make the related call.
             * @enum {string}
             */
            method?: "GET" | "POST" | "PUT" | "DELETE" | "PATCH";
        };
        /**
         * Bad Request Error
         * @description Request is not well-formed, syntactically incorrect, or violates schema.
         */
        error_400: {
            /** @enum {string} */
            name?: "INVALID_REQUEST";
            /** @enum {string} */
            message?: "Request is not well-formed, syntactically incorrect, or violates schema.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Unauthorized Error
         * @description Authentication failed due to missing Authorization header, or invalid authentication credentials.
         */
        error_401: {
            /** @enum {string} */
            name?: "AUTHENTICATION_FAILURE";
            /** @enum {string} */
            message?: "Authentication failed due to missing authorization header, or invalid authentication credentials.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Not Authorized Error
         * @description The client is not authorized to access this resource, although it may have valid credentials.
         */
        error_403: {
            /** @enum {string} */
            name?: "NOT_AUTHORIZED";
            /** @enum {string} */
            message?: "Authorization failed due to insufficient permissions.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Not found Error
         * @description The server has not found anything matching the request URI. This either means that the URI is incorrect or the resource is not available.
         */
        error_404: {
            /** @enum {string} */
            name?: "RESOURCE_NOT_FOUND";
            /** @enum {string} */
            message?: "The specified resource does not exist.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Resource Conflict Error
         * @description The server has detected a conflict while processing this request.
         */
        error_409: {
            /** @enum {string} */
            name?: "RESOURCE_CONFLICT";
            /** @enum {string} */
            message?: "The server has detected a conflict while processing this request.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Unsupported Media Type Error
         * @description The server does not support the request payload's media type.
         */
        error_415: {
            /** @enum {string} */
            name?: "UNSUPPORTED_MEDIA_TYPE";
            /** @enum {string} */
            message?: "The server does not support the request payload's media type.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Unprocessable Entity Error
         * @description The requested action cannot be performed and may require interaction with APIs or processes outside of the current request. This is distinct from a 500 response in that there are no systemic problems limiting the API from performing the request.
         */
        error_422: {
            /** @enum {string} */
            name?: "UNPROCESSABLE_ENTITY";
            /** @enum {string} */
            message?: "The requested action could not be performed, semantically incorrect, or failed business validation.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Internal Server Error
         * @description This is either a system or application error, and generally indicates that although the client appeared to provide a correct request, something unexpected has gone wrong on the server.
         * @example {
         *       "name": "INTERNAL_SERVER_ERROR",
         *       "message": "An internal server error occurred.",
         *       "debug_id": "90957fca61718",
         *       "links": [
         *         {
         *           "href": "https://developer.paypal.com/api/orders/v2/#error-INTERNAL_SERVER_ERROR",
         *           "rel": "information_link"
         *         }
         *       ]
         *     }
         */
        error_500: {
            /** @enum {string} */
            name?: "INTERNAL_SERVER_ERROR";
            /** @enum {string} */
            message?: "An internal server error occurred.";
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Service Unavailable Error
         * @description The server is temporarily unable to handle the request, for example, because of planned maintenance or downtime.
         * @example {
         *       "name": "SERVICE_UNAVAILABLE",
         *       "message": "Service Unavailable.",
         *       "debug_id": "90957fca61718",
         *       "information_link": "https://developer.paypal.com/docs/api/orders/v2/#error-SERVICE_UNAVAILABLE"
         *     }
         */
        error_503: {
            /** @enum {string} */
            name?: "SERVICE_UNAVAILABLE";
            /** @enum {string} */
            message?: "Service Unavailable.";
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Sender Batch Header
         * @description The sender-provided payout header for a payout request.
         */
        sender_batch_header: {
            /** @description A sender-specified ID number. Tracks the payout in an accounting system.<blockquote><strong>Note:</strong> <p>PayPal does not process duplicate payouts. If you specify a <code>sender_batch_id</code> that was used in the last 30 days, the API rejects the request with an error message that shows the duplicate <code>sender_batch_id</code> and includes a HATEOAS link to the original payout with the same <code>sender_batch_id</code>.</p><p>If you receive an HTTP <code>5<i>nn</i></code> status code, you can safely retry the request with the same <code>sender_batch_id</code>. The API completes a payment only once for a <code>sender_batch_id</code> that is used within 30 days.</p></blockquote> */
            sender_batch_id?: string;
            /** @description The ID type that identifies the recipient of the payment. For example, <code>EMAIL</code>. */
            recipient_type?: string;
            /** @description The subject line for the email that PayPal sends when payment for a payout item completes. The subject line is the same for all recipients. Value is an alphanumeric string of up to 255 single-byte characters. */
            email_subject?: string;
            /** @description The email message that PayPal sends when the payout item completes. The message is the same for all recipients. */
            email_message?: string;
            /** @description The payouts and item-level notes are concatenated in the email. The maximum combined length of the notes is 1000 characters. */
            note?: string;
        };
        /**
         * Currency
         * @description The currency and amount for a financial transaction, such as a balance or payment due.
         */
        currency: {
            /** @description The [three-character ISO-4217 currency code](/docs/integration/direct/rest/currency-codes/). */
            currency: string;
            /** @description The value, which might be:<ul><li>An integer for currencies like `JPY` that are not typically fractional.</li><li>A decimal fraction for currencies like `TND` that are subdivided into thousandths.</li></ul>For the required number of decimal places for a currency code, see [Currency codes - ISO 4217](https://www.iso.org/iso-4217-currency-codes.html). */
            value: string;
        };
        /**
         * Phone
         * @description The phone number in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en).
         */
        phone: {
            /** @description The country calling code (CC), in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en). The combined length of the CC and the national number must not be greater than 15 digits. The national number consists of a national destination code (NDC) and subscriber number (SN). */
            country_code: string;
            /** @description The national number, in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en). The combined length of the country calling code (CC) and the national number must not be greater than 15 digits. The national number consists of a national destination code (NDC) and subscriber number (SN). */
            national_number: string;
            /** @description The extension number. */
            extension_number?: string;
        };
        /**
         * Alternate Notification Method
         * @description Captures additional notification modes to reach out to the receiver regarding this payment.
         */
        alternate_notification_method: {
            /** @description The mobile phone number of the receiver. */
            phone?: components["schemas"]["phone"];
        };
        /**
         * Format: ppaas_common_language_v3
         * @description The [language tag](https://tools.ietf.org/html/bcp47#section-2) for the language in which to localize the error-related strings, such as messages, issues, and suggested actions. The tag is made up of the [ISO 639-2 language code](https://www.loc.gov/standards/iso639-2/php/code_list.php), the optional [ISO-15924 script tag](https://www.unicode.org/iso15924/codelists.html), and the [ISO-3166 alpha-2 country code](/docs/integration/direct/rest/country-codes/).
         */
        language: string;
        /**
         * Application Context
         * @description Metadata for Venmo transactions.
         */
        application_context: {
            /**
             * @description This attribute controls the privacy of a payout transaction in recipient’s feed. PUBLIC, FRIENDS_ONLY & PRIVATE are the values that can be used. PUBLIC - The payment displays on the recipient's public Venmo feed. FRIENDS_ONLY - The payment displays only to the recipient's Venmo friends. PRIVATE - The payment displays only on the recipient's personal feed. Defaults to `PRIVATE` if left blank.
             * @default PRIVATE
             */
            social_feed_privacy: string;
            /**
             * Format: uri
             * @deprecated
             * @description Link to a Holler sticker. For Venmo recipients, the sticker displays with the payout message. The maximum URL length is 151.
             */
            holler_url?: string;
            /**
             * Format: uri
             * @description Link to a logo that displays as the sender's profile image in the recipient's Venmo feed. Used to add or update the business profile image. Max image size: 1024 x 1024 pixels. The image should be square and maximum URL length is 2000.
             */
            logo_url?: string;
        };
        /**
         * Purpose
         * @description The purpose of the transaction.
         * @enum {string}
         */
        purpose_enum: "AWARDS" | "PRIZES" | "DONATIONS" | "GOODS" | "SERVICES" | "REBATES" | "CASHBACK" | "DISCOUNTS" | "NON_GOODS_OR_SERVICES";
        /**
         * Payout Item
         * @description The sender-created payout to a recipient.
         */
        payout_item: {
            /** @description The recipient type. Value is:<ul><li><p><code>EMAIL</code>. The unencrypted email. Value is a string of up to 127 single-byte characters.</p></li><li><p><code>PHONE</code>. The unencrypted phone number.</p><blockquote><strong>Note:</strong> The PayPal sandbox does not support the <code>PHONE</code> recipient type.</blockquote></li><li><p><code>PAYPAL_ID</code>. The encrypted PayPal account number.</p></li><li><p><code>USER_HANDLE</code>. User handle (or) Username associated with Venmo account.</p></li></ul><br/>If the <code>sender_batch_header</code> includes the <code>recipient_type</code> attribute, payout items use the <code>recipient_type</code> of the <code>sender_batch_header</code>, unless a payout item has its own <code>recipient_type</code> attribute. If the <code>sender_batch_header</code> omits the <code>recipient_type</code> attribute, each payout item must include its own <code>recipient_type</code> value. */
            recipient_type?: string;
            /** @description The currency and amount to pay the receiver. */
            amount: components["schemas"]["currency"];
            /** @description The sender-specified note for notifications. Supports up to 4000 ASCII characters and 1000 non-ASCII characters. */
            note?: string;
            /** @description The receiver of the payment. Corresponds to the `recipient_type` value in the request. Max value of up to 127 single-byte characters. */
            receiver: string;
            /** @description The sender-specified ID number. Tracks the payout in an accounting system. */
            sender_item_id?: string;
            /**
             * @description The recipient wallet.
             * @default PAYPAL
             */
            recipient_wallet: string;
            /** @description Captures additional notification modes to reach out to the receiver regarding this payment. */
            alternate_notification_method?: components["schemas"]["alternate_notification_method"];
            /** @description The language in which to show the payout recipient's email message. Used only when the recipient does not have a PayPal account. If you omit the language or provide invalid language and the recipient does not have a PayPal account, the email message is sent in the language of the merchant's PayPal account. */
            notification_language?: components["schemas"]["language"];
            /** @description Metadata for accepting additional information from merchants to Venmo. */
            application_context?: components["schemas"]["application_context"];
            /** @description The purpose of the transaction. */
            purpose?: components["schemas"]["purpose_enum"];
        };
        /**
         * Create Payout Request
         * @description The create payout request.
         */
        create_payout_request: {
            /** @description The sender-provided payout header for a payout request. */
            sender_batch_header: components["schemas"]["sender_batch_header"];
            /** @description An array of individual payout items. */
            items: components["schemas"]["payout_item"][];
        };
        /**
         * Error Details
         * @description The error details. Required for client-side `4XX` errors.
         */
        "error_details-2": {
            /** @description The field that caused the error. If this field is in the body, set this value to the field's JSON pointer value. Required for client-side errors. */
            field?: string;
            /** @description The value of the field that caused the error. */
            value?: string;
            /**
             * @description The location of the field that caused the error. Value is `body`, `path`, or `query`.
             * @default body
             */
            location: string;
            /** @description The unique, fine-grained application-level error code. */
            issue: string;
            /** @description The human-readable description for an issue. The description can change over the lifetime of an API, so clients must not depend on this value. */
            description?: string;
        };
        /**
         * Link Description
         * @description The request-related [HATEOAS link](/docs/api/reference/api-responses/#hateoas-links) information.
         */
        link_description: {
            /** @description The complete target URL. To make the related call, combine the method with this [URI Template-formatted](https://tools.ietf.org/html/rfc6570) link. For pre-processing, include the `$`, `(`, and `)` characters. The `href` is the key HATEOAS component that links a completed call with a subsequent call. */
            href: string;
            /** @description The [link relation type](https://tools.ietf.org/html/rfc5988#section-4), which serves as an ID for a link that unambiguously describes the semantics of the link. See [Link Relations](https://www.iana.org/assignments/link-relations/link-relations.xhtml). */
            rel: string;
            /**
             * @description The HTTP method required to make the related call.
             * @enum {string}
             */
            method?: "GET" | "POST" | "PUT" | "DELETE" | "HEAD" | "CONNECT" | "OPTIONS" | "PATCH";
        };
        /**
         * Error
         * @description The error details.
         */
        error: {
            /** @description The human-readable, unique name of the error. */
            name: string;
            /** @description The message that describes the error. */
            message: string;
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id: string;
            /** @description The information link, or URI, that shows detailed information about this error for the developer. */
            readonly information_link?: string;
            /** @description An array of additional details about the error. */
            details?: components["schemas"]["error_details-2"][];
            /** @description An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links). */
            readonly links?: components["schemas"]["link_description"][];
        };
        /**
         * Batch status
         * @description The payouts status.
         * @enum {string}
         */
        batch_enum: "DENIED" | "PENDING" | "PROCESSING" | "SUCCESS" | "CANCELED";
        /**
         * Recipient type
         * @description The ID type that identifies the payment receiver.
         * @enum {string}
         */
        recipient_enum: "EMAIL" | "PHONE" | "PAYPAL_ID";
        /**
         * Payout Sender Batch Header
         * @description The sender-provided header for a payout request.
         */
        payout_sender_batch_header: {
            /** @description The sender-specified ID number. Tracks the payout in an accounting system.<blockquote><strong>Note:</strong> <p>PayPal does not process duplicate payouts. If you specify a <code>sender_batch_id</code> that was used in the last 30 days, the API rejects the request with an error message that shows the duplicate <code>sender_batch_id</code> and includes a HATEOAS link to the original payout with the same <code>sender_batch_id</code>.</p><p>If you receive an HTTP <code>5<i>nn</i></code> status code, you can safely retry the request with the same <code>sender_batch_id</code>. The API completes a payment only once for a <code>sender_batch_id</code> that is used within 30 days.</p></blockquote> */
            sender_batch_id?: string;
            recipient_type?: components["schemas"]["recipient_enum"];
            /** @description The subject line for the email that PayPal sends when payment for a payout item completes. The subject line is the same for all recipients. Value is an alphanumeric string with a maximum length of 255 single-byte characters. */
            email_subject?: string;
            /** @description The email message that PayPal sends when the payout item completes. The message is the same for all recipients. */
            email_message?: string;
        };
        /**
         * Payout Header
         * @description The payout header that is returned in response to a payout header request. Shows details for an entire payout request.
         */
        payout_header: {
            /** @description The PayPal-generated ID for a payout. */
            payout_batch_id: string;
            /** @description The PayPal-generated payout status. If the payout passes preliminary checks, the status is `PENDING`. */
            batch_status: components["schemas"]["batch_enum"];
            /**
             * Format: date-time
             * @description The date and time when processing for the payout began, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
             */
            time_created?: string;
            /** @description The original payout header, as provided by the payment sender. */
            sender_batch_header: components["schemas"]["payout_sender_batch_header"];
        };
        /**
         * Create Payout Response
         * @description The create payout response.
         */
        payout: {
            /** @description The payout header. */
            batch_header?: components["schemas"]["payout_header"];
            /** @description An array of request-related [HATEOAS links](/api/rest/responses/#hateoas-links). */
            readonly links?: components["schemas"]["link_description"][];
        };
        /**
         * Funding source
         * @description Identifies a funding source type.
         * @enum {string}
         */
        funding_source: "BALANCE";
        /**
         * Payout Batch Header
         * @description The payout header that is returned in response to a payout header request. Shows details for an entire payout request.
         */
        payout_batch_header: {
            /** @description The PayPal-generated ID for a payout. */
            payout_batch_id: string;
            /** @description The PayPal-generated payout status. If the payout passes preliminary checks, the status is `PENDING`. */
            batch_status: components["schemas"]["batch_enum"];
            /**
             * Format: date-time
             * @description The date and time when processing for the payout began, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
             */
            time_created?: string;
            /**
             * Format: date-time
             * @description The date and time when processing for the payout was completed, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
             */
            time_completed?: string;
            /**
             * Format: date-time
             * @description The date and time when the payout was closed, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). A payout is considered closed when all items in a batch are processed and the available balance from the temporary hold is released.
             */
            time_closed?: string;
            /** @description The original payout header, as provided by the payment sender. */
            sender_batch_header: components["schemas"]["payout_sender_batch_header"];
            /** @description The ID to differentiate a PayPal balance-funded transaction from a PayPal treasury-funded transaction. */
            funding_source?: components["schemas"]["funding_source"];
            /** @description The currency and total amount requested for the payouts. */
            amount?: components["schemas"]["currency"];
            /** @description The currency and amount of the total estimate for the applicable payouts fees. Initially, the fee is `0`. The fee is populated after the payout moves to the `PROCESSING` state. */
            fees?: components["schemas"]["currency"];
        };
        /**
         * Transaction status
         * @description The item transaction status.<blockquote><strong>Note:</strong> For <code>POST/v1/payments/payouts-item/{payout_item_id}/cancel</code>, the only possible <code>transaction_status</code> value is <code>RETURNED</code>.</blockquote>
         * @enum {string}
         */
        transaction_enum: "SUCCESS" | "FAILED" | "PENDING" | "UNCLAIMED" | "RETURNED" | "ONHOLD" | "BLOCKED" | "REFUNDED" | "REVERSED";
        /**
         * Name
         * @description The name of the party.
         */
        name: {
            /** @description The prefix, or title, to the party's name. */
            prefix?: string;
            /** @description When the party is a person, the party's given, or first, name. */
            given_name?: string;
            /** @description When the party is a person, the party's surname or family name. Also known as the last name. Required when the party is a person. Use also to store multiple surnames including the matronymic, or mother's, surname. */
            surname?: string;
            /** @description When the party is a person, the party's middle name. Use also to store multiple middle names including the patronymic, or father's, middle name. */
            middle_name?: string;
            /** @description The suffix for the party's name. */
            suffix?: string;
            /** @description DEPRECATED. The party's alternate name. Can be a business name, nickname, or any other name that cannot be split into first, last name. Required when the party is a business. */
            alternate_full_name?: string;
            /** @description When the party is a person, the party's full name. */
            full_name?: string;
        };
        /**
         * Recipient wallet
         * @description The wallet where the recipient receives the payout. Payouts to Venmo recipients require a 'note' string and a US mobile phone number.
         * @default PAYPAL
         * @enum {string}
         */
        recipient_wallet_enum: "PAYPAL" | "VENMO" | "RECIPIENT_SELECTED";
        /**
         * Payout Item Detail
         * @description The details for a sender-created payout to a single recipient.
         */
        payout_item_detail: {
            recipient_type?: components["schemas"]["recipient_enum"];
            /** @description The currency and amount of payout item. Might be an integer for currencies like `JPY` that are not typically fractional or a decimal fraction for currencies like `TND` that are subdivided into thousandths. For the required number of decimal places for a currency code, see [Currency codes - ISO 4217](https://www.iso.org/iso-4217-currency-codes.html). */
            amount: components["schemas"]["currency"];
            /** @description The sender-specified note for notifications. Supports up to 4000 ASCII characters and 1000 non-ASCII characters. */
            note?: string;
            /** @description The receiver of the payment. Corresponds to the `recipient_type` value in the request. */
            receiver: string;
            /** @description A sender-specified ID number. Tracks the payout in an accounting system. */
            sender_item_id?: string;
            /** @description The name of the recipient where money is credited. For `UNCLAIMED` payments, the recipient name is populated after the payment is claimed. */
            recipient_name?: components["schemas"]["name"];
            /** @description The recipient wallet. */
            recipient_wallet?: components["schemas"]["recipient_wallet_enum"];
            /** @description The purpose of the transaction. */
            purpose?: components["schemas"]["purpose_enum"];
        };
        /**
         * Currency conversion resource
         * @description The currency conversion resource.
         */
        payout_currency_conversion: {
            /** @description The amount that is converted from. */
            from_amount?: components["schemas"]["currency"];
            /** @description The amount that is converted to. */
            to_amount?: components["schemas"]["currency"];
            /** @description The exchange rate that is applied for this payout. */
            exchange_rate?: string;
        };
        /**
         * Payout Item
         * @description The payout item status and other details.
         */
        payout_batch_items: {
            /** @description The ID for the payout item. Viewable when you show details for a payout. */
            payout_item_id: string;
            /** @description The PayPal-generated ID for the transaction. */
            transaction_id?: string;
            /** @description The unique PayPal-generated common ID created to link sender side and receiver side transaction. Used for tracking. */
            activity_id?: string;
            transaction_status?: components["schemas"]["transaction_enum"];
            /** @description The fee, in U.S. dollars. */
            payout_item_fee?: components["schemas"]["currency"];
            /** @description The PayPal-generated ID for the payout. */
            payout_batch_id: string;
            /** @description The sender-provided information for the payout item. */
            payout_item: components["schemas"]["payout_item_detail"];
            /** @description The currency conversion applicable for this payout item. */
            currency_conversion?: components["schemas"]["payout_currency_conversion"];
            /**
             * Format: date-time
             * @description The date and time when this item was last processed, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
             */
            time_processed?: string;
            errors?: components["schemas"]["error"];
            /** @description An array of request-related [HATEOAS links](/api/rest/responses/#hateoas-links). */
            readonly links?: components["schemas"]["link_description"][];
        };
        /**
         * Payout Batch
         * @description The PayPal-generated batch status.
         */
        payout_batch: {
            /** @description The total number of items in the full result list. */
            total_items?: number;
            /** @description The total number of pages. */
            total_pages?: number;
            /** @description A payout header. Includes the generated payout status. */
            batch_header?: components["schemas"]["payout_batch_header"];
            /** @description An array of individual items. */
            items?: components["schemas"]["payout_batch_items"][];
            /** @description An array of request-related [HATEOAS links](/api/rest/responses/#hateoas-links). */
            readonly links?: components["schemas"]["link_description"][];
        };
        /**
         * Payout Item
         * @description The payout item status and other details. A <code>payout_item_id</code> helps you identify denied payments. If a payment is denied, you can use the <code>payout_item_id</code> to identify the payment even if it lacks a <code>transaction_id</code>.
         */
        "payout_item-2": {
            /** @description The ID for the payout item. Visible when you show details for a payout. */
            payout_item_id: string;
            /** @description The PayPal-generated ID for the transaction. */
            transaction_id?: string;
            /** @description The unique PayPal-generated common ID that links the sender- and receiver-side transactions. Used for tracking. */
            activity_id?: string;
            transaction_status?: components["schemas"]["transaction_enum"];
            /** @description The estimate for the payout fee. Initially, the fee is `0`. The fee is populated after the item moves to the `PENDING` state */
            payout_item_fee?: components["schemas"]["currency"];
            /** @description The PayPal-generated ID for the payout batch. */
            payout_batch_id: string;
            /** @description A sender-specified ID. Tracks the payout in an accounting system. Should be unique within 30 days. */
            sender_batch_id?: string;
            /** @description The sender-provided information for the payout item. */
            payout_item: components["schemas"]["payout_item_detail"];
            /** @description The currency conversion applicable for this payout item. */
            currency_conversion?: components["schemas"]["payout_currency_conversion"];
            /**
             * Format: date-time
             * @description The date and time when this item was last processed, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
             */
            time_processed?: string;
            /** @description The error details. */
            errors?: components["schemas"]["error"];
            /** @description An array of request-related [HATEOAS links](/api/rest/responses/#hateoas-links). */
            readonly links?: components["schemas"]["link_description"][];
        };
    };
    responses: never;
    parameters: {
        /** @description The server stores keys for 30 days. */
        paypal_request_id: string;
        /** @description The ID of the payout for which to show details. */
        id: string;
        /** @description Shows details for only the specified fields. */
        fields: string;
        /** @description A non-zero integer representing the page of the results. */
        page: number;
        /** @description The maximum number of results to return at one time. Value is a non-negative, non-zero integer. If the user chooses pagination, the maximum page is `1000`. */
        page_size: number;
        /** @description Indicates whether to show the total items and total pages count in the response. */
        total_required: boolean;
        /** @description The ID of the payout item to cancel. */
        payout_item_id: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "payouts.post": {
        parameters: {
            query?: never;
            header?: {
                /** @description The server stores keys for 30 days. */
                "PayPal-Request-Id"?: components["parameters"]["paypal_request_id"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["create_payout_request"];
            };
        };
        responses: {
            /** @description A successful request returns the HTTP <code>201 Created</code> status code and a JSON response body that shows the ID for the payout and payout details. To show payout status, use the <code>payout_batch_id</code> value that appears in the response. If the initial scan that checks for syntax errors, missing or duplicated keywords, and more succeeds, the <code>batch_status</code> is <code>PENDING</code>. The initial scan checks for syntax errors and missing or duplicated keywords. The API does not immediately validate some payout item values, such as the receiver phone numbers. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["payout"];
                };
            };
            /** @description Request is not well-formed, syntactically incorrect, or violates schema. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Authorization failed due to insufficient permissions. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description An internal server error has occurred. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "payouts.get": {
        parameters: {
            query?: {
                /** @description Shows details for only the specified fields. */
                fields?: components["parameters"]["fields"];
                /** @description A non-zero integer representing the page of the results. */
                page?: components["parameters"]["page"];
                /** @description The maximum number of results to return at one time. Value is a non-negative, non-zero integer. If the user chooses pagination, the maximum page is `1000`. */
                page_size?: components["parameters"]["page_size"];
                /** @description Indicates whether to show the total items and total pages count in the response. */
                total_required?: components["parameters"]["total_required"];
            };
            header?: never;
            path: {
                /** @description The ID of the payout for which to show details. */
                id: components["parameters"]["id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that shows batch payout details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["payout_batch"];
                };
            };
            /** @description Resource Not Found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description An internal server error has occurred. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "payouts-item.get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the payout item to cancel. */
                payout_item_id: components["parameters"]["payout_item_id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP <code>200 OK</code> status code and a JSON response body with a <code>payout_item_details</code> object, which contains data about a payout item including the transaction status. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["payout_item-2"];
                };
            };
            /** @description Resource Not Found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description An internal server error has occurred. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "payouts-item.cancel": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the payout item to cancel. */
                payout_item_id: components["parameters"]["payout_item_id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code with a JSON response body that shows payout item details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["payout_item-2"];
                };
            };
            /** @description Request is not well-formed, syntactically incorrect, or violates schema. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Resource Not Found. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description An internal server error has occurred. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
}
