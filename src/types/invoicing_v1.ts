/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/invoicing/invoices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List invoices
         * @description <blockquote><strong>Deprecation notice:</strong> The <code>/v1/invoices</code> endpoint is deprecated. Use the <code>/v2/invoices</code> endpoint instead. For details, see <a href="/docs/invoicing/basic-integration/">PayPal Invoicing Basic Integration</a>.</blockquote>Lists invoices. To filter the invoices that appear in the response, you can specify one or more optional query parameters.
         */
        get: operations["invoice.get_all"];
        put?: never;
        /**
         * Create draft invoice
         * @description <blockquote><strong>Deprecation notice:</strong> The <code>/v1/invoices</code> endpoint is deprecated. Use the <code>/v2/invoices</code> endpoint instead. For details, see <a href="/docs/invoicing/basic-integration/">PayPal Invoicing Basic Integration</a>.</blockquote>Creates a draft invoice. To move the invoice from a draft to payable state, you must <a href="/docs/api/invoicing/v1/#invoices_send">send the invoice</a>.<br/><br/>In the JSON request body, include invoice details including merchant information. The <code>invoice</code> object must include an <code>items</code> array.<blockquote><strong>Note:</strong> The merchant that you specify in an invoice must have a PayPal account in good standing.</blockquote>.
         */
        post: operations["invoice.create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invoicing/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Search for invoices
         * @description <blockquote><strong>Deprecation notice:</strong> The <code>/v1/invoices</code> endpoint is deprecated. Use the <code>/v2/invoices</code> endpoint instead. For details, see <a href="/docs/invoicing/basic-integration/">PayPal Invoicing Basic Integration</a>.</blockquote>Searches for invoices that match search criteria. If you pass multiple criteria, the response lists invoices that match all criteria.
         */
        post: operations["invoice.search"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invoicing/invoices/{invoice_id}/send": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send invoice
         * @description <blockquote><strong>Deprecation notice:</strong> The <code>/v1/invoices</code> endpoint is deprecated. Use the <code>/v2/invoices</code> endpoint instead. For details, see <a href="/docs/invoicing/basic-integration/">PayPal Invoicing Basic Integration</a>.</blockquote>Sends an invoice, by ID, to a customer. To suppress the merchant's email notification, set the `notify_merchant` query parameter to `false`.<blockquote><strong>Note:</strong> After you send an invoice, you cannot resend it.</blockquote>
         */
        post: operations["invoice.send"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invoicing/invoices/{invoice_id}/schedule": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Schedule invoice
         * @description <blockquote><strong>Deprecation notice:</strong> The <code>/v1/invoices</code> endpoint is deprecated. Use the <code>/v2/invoices</code> endpoint instead. For details, see <a href="/docs/invoicing/basic-integration/">PayPal Invoicing Basic Integration</a>.</blockquote>Schedules an invoice, by ID, to send on a future date. At 07:00 on that date in the preferred time zone of the merchant's PayPal account profile, PayPal emails an invoice notification to the merchant and the customer, adds an online payment button to the customerâ€™s view of the invoice, and updates the invoice status to <code>SENT</code>.<blockquote><strong>Note:</strong> To change the scheduled date, adjust the invoice date and <a href="/docs/api/invoicing/v1/#invoices_update">update invoice</a>. To send the invoice immediately, update the invoice date to today or to a date in the past.</blockquote>
         */
        post: operations["invoice.schedule"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invoicing/invoices/{invoice_id}/remind": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send invoice reminder
         * @description <blockquote><strong>Deprecation notice:</strong> The <code>/v1/invoices</code> endpoint is deprecated. Use the <code>/v2/invoices</code> endpoint instead. For details, see <a href="/docs/invoicing/basic-integration/">PayPal Invoicing Basic Integration</a>.</blockquote>Sends a reminder to the payer about an invoice, by ID. In the JSON request body, include a `notification` object that defines the subject of the reminder and other details.
         */
        post: operations["invoice.remind"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invoicing/invoices/{invoice_id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel sent invoice
         * @description <blockquote><strong>Deprecation notice:</strong> The <code>/v1/invoices</code> endpoint is deprecated. Use the <code>/v2/invoices</code> endpoint instead. For details, see <a href="/docs/invoicing/basic-integration/">PayPal Invoicing Basic Integration</a>.</blockquote>Cancels a sent invoice, by ID, and, optionally, sends a notification about the cancellation to the payer, merchant, and CC: emails.
         */
        post: operations["invoice.cancel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invoicing/invoices/{invoice_id}/record-payment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Mark invoice as paid
         * @description <blockquote><strong>Deprecation notice:</strong> The <code>/v1/invoices</code> endpoint is deprecated. Use the <code>/v2/invoices</code> endpoint instead. For details, see <a href="/docs/invoicing/basic-integration/">PayPal Invoicing Basic Integration</a>.</blockquote>Marks the status of an invoice, by ID, as paid.
         */
        post: operations["invoice.record-payment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invoicing/invoices/{invoice_id}/record-refund": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Mark invoice as refunded
         * @description <blockquote><strong>Deprecation notice:</strong> The <code>/v1/invoices</code> endpoint is deprecated. Use the <code>/v2/invoices</code> endpoint instead. For details, see <a href="/docs/invoicing/basic-integration/">PayPal Invoicing Basic Integration</a>.</blockquote>Marks the status of an invoice, by ID, as refunded.
         */
        post: operations["invoice.record-refund"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invoicing/invoices/{invoice_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show invoice details
         * @description <blockquote><strong>Deprecation notice:</strong> The <code>/v1/invoices</code> endpoint is deprecated. Use the <code>/v2/invoices</code> endpoint instead. For details, see <a href="/docs/invoicing/basic-integration/">PayPal Invoicing Basic Integration</a>.</blockquote>Shows details for an invoice, by ID.
         */
        get: operations["invoice.get"];
        /**
         * Update invoice
         * @description <blockquote><strong>Deprecation notice:</strong> The <code>/v1/invoices</code> endpoint is deprecated. Use the <code>/v2/invoices</code> endpoint instead. For details, see <a href="/docs/invoicing/basic-integration/">PayPal Invoicing Basic Integration</a>.</blockquote>Fully updates an invoice, by ID. In the JSON request body, include a complete `invoice` object. This call does not support partial updates.
         */
        put: operations["invoice.update"];
        post?: never;
        /**
         * Delete draft invoice
         * @description <blockquote><strong>Deprecation notice:</strong> The <code>/v1/invoices</code> endpoint is deprecated. Use the <code>/v2/invoices</code> endpoint instead. For details, see <a href="/docs/invoicing/basic-integration/">PayPal Invoicing Basic Integration</a>.</blockquote>Deletes invoices in the <code>DRAFT</code> or <code>SCHEDULED</code> state, by ID. For invoices that have already been sent, you can <a href="/docs/api/invoicing/v1/#invoices_cancel">cancel the invoice</a>. After you delete a draft or scheduled invoice, you can no longer use it or show its details. However, you can reuse its invoice number.
         */
        delete: operations["invoice.delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invoicing/invoices/{invoice_id}/payment-records/{transaction_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete external payment
         * @description <blockquote><strong>Deprecation notice:</strong> The <code>/v1/invoices</code> endpoint is deprecated. Use the <code>/v2/invoices</code> endpoint instead. For details, see <a href="/docs/invoicing/basic-integration/">PayPal Invoicing Basic Integration</a>.</blockquote>Deletes an external payment, by invoice ID and transaction ID.
         */
        delete: operations["invoice.delete_external_payment"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invoicing/invoices/{invoice_id}/refund-records/{transaction_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete external refund
         * @description <blockquote><strong>Deprecation notice:</strong> The <code>/v1/invoices</code> endpoint is deprecated. Use the <code>/v2/invoices</code> endpoint instead. For details, see <a href="/docs/invoicing/basic-integration/">PayPal Invoicing Basic Integration</a>.</blockquote>Deletes an external refund, by invoice ID and transaction ID.
         */
        delete: operations["invoice.delete_external_refund"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invoicing/invoices/{invoice_id}/qr-code": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Generate QR code
         * @description <blockquote><strong>Deprecation notice:</strong> The <code>/v1/invoices</code> endpoint is deprecated. Use the <code>/v2/invoices</code> endpoint instead. For details, see <a href="/docs/invoicing/basic-integration/">PayPal Invoicing Basic Integration</a>.</blockquote>Generates a QR code for an invoice, by ID. The QR code is a PNG image in <a href="https://www.base64encode.org/">Base64-encoded</a> format that corresponds to the invoice ID. You can generate a QR code for an invoice and add it to a paper or PDF invoice. When customers use their mobile devices to scan the QR code, they are redirected to the PayPal mobile payment flow where they can view the invoice and pay online with PayPal or a credit card. Before you get a QR code, you must <a href="#invoices_create">create an invoice</a> and <a href="#invoices_send">send an invoice</a> to move the invoice from a draft to payable state. Do not include an email address if you do not want the invoice emailed.
         */
        get: operations["invoice.qr_code"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invoicing/invoices/next-invoice-number": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate invoice number
         * @description <blockquote><strong>Deprecation notice:</strong> The <code>/v1/invoices</code> endpoint is deprecated. Use the <code>/v2/invoices</code> endpoint instead. For details, see <a href="/docs/invoicing/basic-integration/">PayPal Invoicing Basic Integration</a>.</blockquote>Generates the next invoice number that is available to the merchant. The next invoice number uses the prefix and suffix from the last invoice number and increments the number by one. For example, the next invoice number after `INVOICE-1234` is `INVOICE-1235`.
         */
        post: operations["invoice.next_invoice_number"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invoicing/templates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List templates
         * @description <blockquote><strong>Deprecation notice:</strong> The <code>/v1/invoices</code> endpoint is deprecated. Use the <code>/v2/invoices</code> endpoint instead. For details, see <a href="/docs/invoicing/basic-integration/">PayPal Invoicing Basic Integration</a>.</blockquote>Lists merchant-created templates with associated details. The associated details include the email addresses, postal addresses, and phone numbers from the user's PayPal profile.<br/>The user can select which values to show in the business information section of their template.
         */
        get: operations["template.get_templates"];
        put?: never;
        /**
         * Create template
         * @description <blockquote><strong>Deprecation notice:</strong> The <code>/v1/invoices</code> endpoint is deprecated. Use the <code>/v2/invoices</code> endpoint instead. For details, see <a href="/docs/invoicing/basic-integration/">PayPal Invoicing Basic Integration</a>.</blockquote>Creates an invoice template. You can use details from this template to create an invoice. You can create up to 50 templates.<blockquote><strong>Note:</strong> Every merchant starts with three PayPal system templates that are optimized for the unit type billed. The template includes `Quantity`, `Hours`, and `Amount`.</blockquote>
         */
        post: operations["template.create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/invoicing/templates/{template_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show template details
         * @description <blockquote><strong>Deprecation notice:</strong> The <code>/v1/invoices</code> endpoint is deprecated. Use the <code>/v2/invoices</code> endpoint instead. For details, see <a href="/docs/invoicing/basic-integration/">PayPal Invoicing Basic Integration</a>.</blockquote>Shows details for a template, by ID.
         */
        get: operations["template.get"];
        /**
         * Update template
         * @description <blockquote><strong>Deprecation notice:</strong> The <code>/v1/invoices</code> endpoint is deprecated. Use the <code>/v2/invoices</code> endpoint instead. For details, see <a href="/docs/invoicing/basic-integration/">PayPal Invoicing Basic Integration</a>.</blockquote>Updates a template, by ID. In the JSON request body, specify a complete `template` object. The update method does not support partial updates.
         */
        put: operations["template.update"];
        post?: never;
        /**
         * Delete template
         * @description Deletes a template, by ID.
         */
        delete: operations["template.delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * Error Details
         * @description The error details. Required for client-side `4XX` errors.
         */
        error_details: {
            /** @description The field that caused the error. If this field is in the body, set this value to the field's JSON pointer value. Required for client-side errors. */
            field?: string;
            /** @description The value of the field that caused the error. */
            value?: string;
            /**
             * @description The location of the field that caused the error. Value is `body`, `path`, or `query`.
             * @default body
             */
            location: string;
            /** @description The unique, fine-grained application-level error code. */
            issue: string;
            /** @description The human-readable description for an issue. The description can change over the lifetime of an API, so clients must not depend on this value. */
            description?: string;
        };
        /** @description The default error response. */
        error_default: components["schemas"]["error_400"] | components["schemas"]["error_401"] | components["schemas"]["error_403"] | components["schemas"]["error_404"] | components["schemas"]["error_409"] | components["schemas"]["error_415"] | components["schemas"]["error_422"] | components["schemas"]["error_500"] | components["schemas"]["error_503"];
        /**
         * Link Description
         * @description The request-related [HATEOAS link](/api/rest/responses/#hateoas-links) information.
         */
        error_link_description: {
            /** @description The complete target URL. To make the related call, combine the method with this [URI Template-formatted](https://tools.ietf.org/html/rfc6570) link. For pre-processing, include the `$`, `(`, and `)` characters. The `href` is the key HATEOAS component that links a completed call with a subsequent call. */
            href: string;
            /** @description The [link relation type](https://tools.ietf.org/html/rfc5988#section-4), which serves as an ID for a link that unambiguously describes the semantics of the link. See [Link Relations](https://www.iana.org/assignments/link-relations/link-relations.xhtml). */
            rel: string;
            /**
             * @description The HTTP method required to make the related call.
             * @enum {string}
             */
            method?: "CONNECT" | "DELETE" | "GET" | "HEAD" | "OPTIONS" | "PATCH" | "POST" | "PUT";
        };
        /**
         * Bad Request Error
         * @description Request is not well-formed, syntactically incorrect, or violates schema.
         */
        error_400: {
            /** @enum {string} */
            name?: "INVALID_REQUEST";
            /** @enum {string} */
            message?: "Request is not well-formed, syntactically incorrect, or violates schema.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Unauthorized Error
         * @description Authentication failed due to missing Authorization header, or invalid authentication credentials.
         */
        error_401: {
            /** @enum {string} */
            name?: "AUTHENTICATION_FAILURE";
            /** @enum {string} */
            message?: "Authentication failed due to missing authorization header, or invalid authentication credentials.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Not Authorized Error
         * @description The client is not authorized to access this resource, although it may have valid credentials.
         */
        error_403: {
            /** @enum {string} */
            name?: "NOT_AUTHORIZED";
            /** @enum {string} */
            message?: "Authorization failed due to insufficient permissions.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Not found Error
         * @description The server has not found anything matching the request URI. This either means that the URI is incorrect or the resource is not available.
         */
        error_404: {
            /** @enum {string} */
            name?: "RESOURCE_NOT_FOUND";
            /** @enum {string} */
            message?: "The specified resource does not exist.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Resource Conflict Error
         * @description The server has detected a conflict while processing this request.
         */
        error_409: {
            /** @enum {string} */
            name?: "RESOURCE_CONFLICT";
            /** @enum {string} */
            message?: "The server has detected a conflict while processing this request.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Unsupported Media Type Error
         * @description The server does not support the request payload's media type.
         */
        error_415: {
            /** @enum {string} */
            name?: "UNSUPPORTED_MEDIA_TYPE";
            /** @enum {string} */
            message?: "The server does not support the request payload's media type.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Unprocessable Entity Error
         * @description The requested action cannot be performed and may require interaction with APIs or processes outside of the current request. This is distinct from a 500 response in that there are no systemic problems limiting the API from performing the request.
         */
        error_422: {
            /** @enum {string} */
            name?: "UNPROCESSABLE_ENTITY";
            /** @enum {string} */
            message?: "The requested action could not be performed, semantically incorrect, or failed business validation.";
            details?: components["schemas"]["error_details"][];
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Internal Server Error
         * @description This is either a system or application error, and generally indicates that although the client appeared to provide a correct request, something unexpected has gone wrong on the server.
         * @example {
         *       "name": "INTERNAL_SERVER_ERROR",
         *       "message": "An internal server error occurred.",
         *       "debug_id": "90957fca61718",
         *       "links": [
         *         {
         *           "href": "https://developer.paypal.com/api/orders/v2/#error-INTERNAL_SERVER_ERROR",
         *           "rel": "information_link"
         *         }
         *       ]
         *     }
         */
        error_500: {
            /** @enum {string} */
            name?: "INTERNAL_SERVER_ERROR";
            /** @enum {string} */
            message?: "An internal server error occurred.";
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Service Unavailable Error
         * @description The server is temporarily unable to handle the request, for example, because of planned maintenance or downtime.
         * @example {
         *       "name": "SERVICE_UNAVAILABLE",
         *       "message": "Service Unavailable.",
         *       "debug_id": "90957fca61718",
         *       "information_link": "https://developer.paypal.com/docs/api/orders/v2/#error-SERVICE_UNAVAILABLE"
         *     }
         */
        error_503: {
            /** @enum {string} */
            name?: "SERVICE_UNAVAILABLE";
            /** @enum {string} */
            message?: "Service Unavailable.";
            /** @description The PayPal internal ID. Used for correlation purposes. */
            debug_id?: string;
            /** @description An array of request-related [HATEOAS links](https://en.wikipedia.org/wiki/HATEOAS). */
            links?: components["schemas"]["error_link_description"][];
        };
        /**
         * Error Details
         * @description The error details. Required for client-side `4XX` errors.
         */
        "error_details-2": {
            /** @description The name of the field that caused the error. */
            field: string;
            /** @description The reason for the error. */
            issue: string;
        };
        /**
         * Error
         * @description The error information.
         */
        error: {
            /** @description The human-readable, unique name of the error. */
            readonly name: string;
            /** @description The PayPal internal ID. Used for correlation purposes. */
            readonly debug_id?: string;
            /** @description The message that describes the error. */
            readonly message: string;
            /** @description The URI to detailed information related to this error for the developer. */
            readonly information_link: string;
            /** @description An array of additional details for the error. */
            readonly details?: components["schemas"]["error_details-2"][];
        };
        /**
         * Address
         * @description The address, which is either a billing address or shipping address in a payment.
         */
        address: {
            /** @description The first line of the address. For example, number or street. */
            line1: string;
            /** @description The second line of the address. For example, suite or apartment number. */
            line2?: string;
            /** @description The city name. */
            city: string;
            /** @description The [two-character ISO 3166-1 code](/docs/integration/direct/rest/country-codes/) that identifies the country or region.<blockquote><strong>Note:</strong> The country code for Great Britain is `GB` and not `UK` as is used in that country's top-level domain names. Use the `C2` country code for China worldwide for comparable uncontrolled price (CUP) method, bank card, and cross-border transactions.</blockquote> */
            country_code: string;
            /** @description The postal code, which is the zip code or equivalent. Typically required for countries with a postal code or an equivalent. See [postal code](https://en.wikipedia.org/wiki/Postal_code). */
            postal_code?: string;
            /** @description The [code](/docs/integration/direct/rest/state-codes/) for a US state or the equivalent for other countries. Required for transactions if the address is in one of these countries: [Argentina](/docs/integration/direct/rest/state-codes/#argentina), [Brazil](/docs/integration/direct/rest/state-codes/#brazil), [Canada](/docs/integration/direct/rest/state-codes/#canada), [China](/docs/integration/direct/rest/state-codes/#china), [India](/docs/integration/direct/rest/state-codes/#india), [Italy](/docs/integration/direct/rest/state-codes/#italy), [Japan](/docs/integration/direct/rest/state-codes/#japan), [Mexico](/docs/integration/direct/rest/state-codes/#mexico), [Thailand](/docs/integration/direct/rest/state-codes/#thailand), or [United States](/docs/integration/direct/rest/state-codes/#usa). Maximum length is 40 single-byte characters. */
            state?: string;
            /**
             * Format: phone
             * @description The phone number, in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en).
             */
            phone?: string;
        };
        /**
         * Phone
         * @description The phone number.
         */
        phone: {
            /** @description The country code portion of the phone number, in [E.164 format](https://www.itu.int/rec/T-REC-E.164-201011-I). */
            country_code?: string;
            /** @description The in-country phone number, in [E.164 format](https://www.itu.int/rec/T-REC-E.164-201011-I). */
            national_number?: string;
        };
        /**
         * Merchant Information
         * @description The merchant business information that appears on the invoice.
         */
        "merchant-info": {
            /**
             * Format: email
             * @description The merchant email address. This email must be listed in the merchant's PayPal profile.<br/>If you omit this value, notifications are sent from and to the primary email address but do not appear on the invoice.
             */
            email?: string;
            /** @description The merchant's business name. */
            business_name?: string;
            /** @description The merchant's first name. */
            first_name?: string;
            /** @description The merchant's last name. */
            last_name?: string;
            /** @description The merchant's address. */
            address?: components["schemas"]["address"];
            /** @description The merchant's phone number. */
            phone?: components["schemas"]["phone"];
            /** @description The merchant's fax number. */
            fax?: components["schemas"]["phone"];
            /**
             * Format: uri
             * @description The merchant's website.
             */
            website?: string;
            /** @description The merchant's tax ID. */
            tax_id?: string;
            /** @description Any additional information, such as business hours. */
            additional_info?: string;
        };
        /**
         * Billing Information
         * @description The billing information for the invoice recipient.
         */
        "billing-info": {
            /**
             * Format: email
             * @description The invoice recipient email address. If you omit this value, the invoice is payable and a notification email is not sent.
             */
            email?: string;
            /** @description The invoice recipient's phone number. */
            phone?: components["schemas"]["phone"];
            /** @description The invoice recipient's first name. */
            first_name?: string;
            /** @description The invoice recipient's last name. */
            last_name?: string;
            /** @description The invoice recipient's business name. */
            business_name?: string;
            /** @description The invoice recipient's billing address. */
            address?: components["schemas"]["address"];
            /**
             * @description The language in which the invoice recipient's email appears. Used only when the recipient does not have a PayPal account.<br/>If you omit the language and the recipient does not have a PayPal account, the email is sent in the language of the merchant's PayPal account.
             * @enum {string}
             */
            language?: "da_DK" | "de_DE" | "en_AU" | "en_GB" | "en_US" | "es_ES" | "es_XC" | "fr_CA" | "fr_FR" | "fr_XC" | "he_IL" | "id_ID" | "it_IT" | "ja_JP" | "nl_NL" | "no_NO" | "pl_PL" | "pt_BR" | "pt_PT" | "ru_RU" | "sv_SE" | "th_TH" | "tr_TR" | "zh_CN" | "zh_HK" | "zh_TW" | "zh_XC";
            /** @description Any additional information about the recipient. */
            additional_info?: string;
        };
        /**
         * Shipping Information
         * @description The shipping information for the invoice recipient.
         */
        "shipping-info": {
            /** @description The first name of the recipient at the shipping address. */
            first_name?: string;
            /** @description The last name of the recipient at the shipping address. */
            last_name?: string;
            /** @description The business name of the recipient at the shipping address. */
            business_name?: string;
            /** @description The shipping address. */
            address?: components["schemas"]["address"];
        };
        /**
         * Participant
         * @description The participant information.
         */
        participant: {
            /**
             * Format: email
             * @description The email address of the person who receives a copy of the invoice.
             */
            email: string;
        };
        /**
         * Currency
         * @description The currency and amount for a financial transaction, such as a balance or payment due.
         */
        currency: {
            /** @description The [three-character ISO-4217 currency code](/docs/integration/direct/rest/currency-codes/). */
            currency: string;
            /** @description The value, which might be:<ul><li>An integer for currencies like `JPY` that are not typically fractional.</li><li>A decimal fraction for currencies like `TND` that are subdivided into thousandths.</li></ul>For the required number of decimal places for a currency code, see [Currency codes - ISO 4217](https://www.iso.org/iso-4217-currency-codes.html). */
            value: string;
        };
        /**
         * Tax
         * @description The tax information.
         */
        tax: {
            /** @description The tax name. */
            name: string;
            /** @description The tax rate. Value is from `0` to `100`. Supports up to five decimal places. */
            percent: number;
            /** @description The currency and amount of the calculated tax. */
            readonly amount?: components["schemas"]["currency"];
        };
        /**
         * Discount
         * @description The discount as a percent or an amount value. For example, to specify 10%, enter `10`. Alternatively, to specify an amount of 5, enter `5`.
         */
        discount: {
            /** @description The discount as a percentage value. Value is from `0` to `100`. Supports up to five decimal places. */
            percent?: number;
            /** @description The currency and amount of the invoice-level discount. Value is from `0` to `1000000`. Supports up to two decimal places. */
            amount?: components["schemas"]["currency"];
        };
        /**
         * Invoice Item
         * @description The invoice line item information.
         */
        "invoice-item": {
            /** @description The item name. */
            name: string;
            /** @description The item description. */
            description?: string;
            /** @description The item quantity. Value is from `-10000` to `10000`. Supports up to five decimal places. */
            quantity: number;
            /** @description The currency and amount of the item unit price. Value is from `-1000000` to `1000000`. Supports up to two decimal places. */
            unit_price: components["schemas"]["currency"];
            tax?: components["schemas"]["tax"];
            /**
             * Format: date
             * @description The date when the item or service was provided, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *yyyy*-*MM*-*dd* *z*.
             */
            date?: string;
            /** @description The item discount, as a percent or an amount value. */
            discount?: components["schemas"]["discount"];
            /**
             * @description The unit of measure for the invoiced item. For `AMOUNT` the `unit_price` and `quantity` are not shown on the invoice.<blockquote><strong>Note:</strong> If your specify different `unit_of_measure` values for the same invoice, the invoice uses the first value.</blockquote>
             * @enum {string}
             */
            unit_of_measure?: "QUANTITY" | "HOURS" | "AMOUNT";
        };
        /**
         * Payment Term
         * @description The payment term of the invoice. If you specify `term_type`, you cannot specify `due_date`, and vice versa.
         */
        "payment-term": {
            /**
             * @description The term when the invoice payment is due.
             * @enum {string}
             */
            term_type?: "DUE_ON_RECEIPT" | "DUE_ON_DATE_SPECIFIED" | "NET_10" | "NET_15" | "NET_30" | "NET_45" | "NET_60" | "NET_90" | "NO_DUE_DATE";
            /**
             * Format: date
             * @description The date when the invoice payment is due, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *yyyy*-*MM*-*dd* *z*.
             */
            due_date?: string;
        };
        /**
         * Shipping Cost
         * @description The shipping cost, as a percent or amount value.
         */
        "shipping-cost": {
            /** @description The currency and amount of the shipping charge. Value is from `0` to `1000000`. Supports up to two decimal places. */
            amount?: components["schemas"]["currency"];
            /** @description The tax percentage on the shipping amount. */
            tax?: components["schemas"]["tax"];
        };
        /**
         * Custom Amount
         * @description The custom amount to apply to an invoice. If you include a label, you must include a custom amount.
         */
        "custom-amount": {
            /** @description The custom amount label. */
            label?: string;
            /** @description The currency and amount of the custom value. Value is from `-1000000` to `1000000`. Supports up to two decimal places. */
            amount?: components["schemas"]["currency"];
        };
        /**
         * Payment Detail
         * @description The payment details.
         */
        "payment-detail": {
            /**
             * @description The payment type in an invoicing flow. The [record refund](/docs/api/invoicing/v1/#invoices_record-refund) method supports the `EXTERNAL` refund type. The `PAYPAL` refund type is supported for backward compatibility.
             * @enum {string}
             */
            readonly type?: "PAYPAL" | "EXTERNAL";
            /** @description The ID for a PayPal payment transaction. Required for the `PAYPAL` payment type. */
            readonly transaction_id?: string;
            /**
             * @description The transaction type.
             * @enum {string}
             */
            readonly transaction_type?: "SALE" | "AUTHORIZATION" | "CAPTURE";
            /**
             * Format: date-time
             * @description The date when the invoice was paid, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
             */
            date?: string;
            /**
             * @description The payment mode or method.
             * @enum {string}
             */
            method: "BANK_TRANSFER" | "CASH" | "CHECK" | "CREDIT_CARD" | "DEBIT_CARD" | "PAYPAL" | "WIRE_TRANSFER" | "OTHER";
            /** @description A note associated with the payment. */
            note?: string;
            /** @description The payment amount to record against the invoice. If you omit this parameter, the total invoice amount is marked as paid. This amount cannot exceed the amount due. */
            amount?: components["schemas"]["currency"];
        };
        /**
         * Refund Detail
         * @description The invoicing refund details.
         */
        "refund-detail": {
            /**
             * @description The PayPal refund type. Indicates whether the refund was paid through PayPal or externally in the invoicing flow. The [record refund](/docs/api/invoicing/v1/#invoices_record-refund) method supports the `EXTERNAL` refund type. The `PAYPAL` refund type is supported for backward compatibility.
             * @enum {string}
             */
            readonly type?: "PAYPAL" | "EXTERNAL";
            /** @description The ID of the PayPal refund transaction. Required for the `PAYPAL` refund type. */
            readonly transaction_id?: string;
            /**
             * Format: date-time
             * @description The date when the invoice was refunded, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, `2014-02-27 PST`.
             */
            date?: string;
            /** @description A note associated with the refund. */
            note?: string;
            /** @description The currency and amount to record as refunded. If you omit the amount, the total invoice paid amount is recorded as refunded. */
            amount?: components["schemas"]["currency"];
        };
        /**
         * Metadata
         * @description The audit metadata.
         */
        metadata: {
            /**
             * Format: date-time
             * @description The date and time when the resource was created, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
             */
            readonly created_date?: string;
            /** @description The email address of the account that created the resource. */
            readonly created_by?: string;
            /**
             * Format: date-time
             * @description The date and time when the resource was canceled, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
             */
            readonly cancelled_date?: string;
            /** @description The actor who canceled the resource. */
            readonly cancelled_by?: string;
            /**
             * Format: date-time
             * @description The date and time when the resource was last edited, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
             */
            readonly last_updated_date?: string;
            /** @description The email address of the account that last edited the resource. */
            readonly last_updated_by?: string;
            /**
             * Format: date-time
             * @description The date and time when the resource was first sent, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
             */
            readonly first_sent_date?: string;
            /**
             * Format: date-time
             * @description The date and time when the resource was last sent, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
             */
            readonly last_sent_date?: string;
            /** @description The email address of the account that last sent the resource. */
            readonly last_sent_by?: string;
            /**
             * Format: uri
             * @description The URL for the payer's view of the invoice.
             */
            readonly payer_view_url?: string;
        };
        /**
         * Payment Summary
         * @description The payment and refund summary.
         */
        "payment-summary": {
            /** @description The currency and amount of the total paid or refunded through PayPal. */
            readonly paypal?: components["schemas"]["currency"];
            /** @description The currency and amount of the total paid or refunded through other sources. */
            readonly other?: components["schemas"]["currency"];
        };
        /**
         * File Attachment
         * @description The file that is attached to an invoice or template.
         */
        "file-attachment": {
            /** @description The name of the attached file. */
            name?: string;
            /**
             * Format: uri
             * @description The URL of the attached file. Use this URL to download the file.
             */
            url?: string;
        };
        /**
         * Link Description
         * @description The request-related [HATEOAS link](/docs/api/reference/api-responses/#hateoas-links) information.
         */
        link_description: {
            /** @description The complete target URL. To make the related call, combine the method with this [URI Template-formatted](https://tools.ietf.org/html/rfc6570) link. For pre-processing, include the `$`, `(`, and `)` characters. The `href` is the key HATEOAS component that links a completed call with a subsequent call. */
            href: string;
            /** @description The [link relation type](https://tools.ietf.org/html/rfc5988#section-4), which serves as an ID for a link that unambiguously describes the semantics of the link. See [Link Relations](https://www.iana.org/assignments/link-relations/link-relations.xhtml). */
            rel: string;
            /**
             * @description The HTTP method required to make the related call.
             * @enum {string}
             */
            method?: "GET" | "POST" | "PUT" | "DELETE" | "HEAD" | "CONNECT" | "OPTIONS" | "PATCH";
        };
        /**
         * Invoice
         * @description The invoice details.
         */
        invoice: {
            /** @description The ID of the invoice. */
            readonly id?: string;
            /** @description The invoice number. If you omit this value, the default is the number that the API automatically increments from the last number. */
            number?: string;
            /**
             * @description The invoice status. When you [search for invoices](/docs/api/invoicing/v1/#search_search), you must specify this value as an array. For example, `"status": ["REFUNDED"]`. The status indicates the phase of an invoice in its lifecycle. The status also indicates whether the invoice is unpaid, partially paid, fully paid, partially refunded, or fully refunded. An invoice payment can be either: <ul><li id="connected"><p><strong>Connected</strong> to an invoice. The customer clicks <strong>Pay</strong> on the invoice to make a payment. The payment is automatically recorded.</p></li><li id="disconnected"><p><strong>Disconnected</strong> from an invoice. The customer pays by check, wire transfer, or another method. The merchant manually records the payment.</p></li></ul><br/><a id="disconnected-refund"></a>Similarly, an invoice refund can be <strong>disconnected</strong> from an invoice. The merchant refunds a payment by check, wire transfer, or another method and manually records the refund. This table lists the typical order through which an invoice moves through status values: <table><thead><tr><th>Status</th><th>Occurs when</th></tr></thead><tbody><tr><td><code>DRAFT</code></td><td><p>A merchant <a href="/docs/api/invoicing/v1/#invoices_create">creates a draft invoice</a>.</p><blockquote><strong>Note:</strong> A customer cannot pay an invoice with this status. A customer cannot pay an invoice until it has a status of <code>SENT</code> or <code>UNPAID</code>.</blockquote></td></tr><tr><td><code>UNPAID</code></td><td><p>A merchant chooses to suppress the PayPal email notification when he or she sends the invoice through the <a href="/docs/api/invoicing/v1/#invoices_send">API</a> or the <a href="https://www.paypal.com/invoice/create">Create Invoice</a> page, and then manually sends the invoice link in his or her own email.</p><p>To send an invoice without email notification, the merchant either:</p><ul><li><p>Sets the <code>notify_merchant</code> and <code>notify_customer</code> query parameters to <code>false</code> when he or she <a href="/docs/api/invoicing/v1/#invoices_send">sends the invoice</a>.</p></li><li><p>Selects <strong>Share link myself</strong> from the <strong>Send</strong> menu when he or she sends the invoice through the web UI <a href="https://www.paypal.com/invoice/create">Create Invoice</a> page.</p></li></ul></td></tr><tr><td><code>SENT</code></td><td><p>A merchant accepts the default PayPal email notification when he or she sends the invoice through the <a href="/docs/api/invoicing/v1/#invoices_send">API</a> or the <a href="https://www.paypal.com/invoice/create">Create Invoice</a> page. PayPal automatically emails the invoice to the customer and a <strong>Pay</strong> button appears on the invoice, which enables the customer to pay the invoice. In a web app, the invoice appears as <code>Unpaid (sent)</code>.</p></td></tr><tr><td><code>SCHEDULED</code></td><td><p>A merchant <a href="/docs/api/invoicing/v1/#invoices_schedule">schedules an invoice</a> to send on a future date. At 07:00 on that date in the preferred time zone of the merchant's PayPal account profile, PayPal emails an invoice notification to the merchant and the customer, adds an online payment button to the customerâ€™s view of the invoice, and updates the invoice status to <code>SENT</code>.</li></ul></td></tr><tr><td><code>PARTIALLY_PAID</code></td><td><p>A customer makes a partial payment for the invoice through one of these methods:</p><ul><li><p>A customer makes a <a href="#disconnected">disconnected partial payment</a> for the invoice and the merchant manually <a href="/docs/api/invoicing/v1/#invoices_record-payment">marks the invoice as paid</a>.</p></li><li><p>A customer makes a <a href="#connected">connected partial payment</a> for the invoice.</p></li></ul></td></tr><tr><td><code>PAYMENT_PENDING</code></td><td><p>A customer pays an invoice but the payment is pending for one of these reasons:</p><ul><li>The payment is an uncleared eCheck.</li><li>The merchant must either accept the payment before it clears or deny the payment.</li><li>PayPal risk is reviewing the payment.</li></ul><blockquote><strong>Note:</strong> Most payments never go into a payment-pending state.</blockquote></td></tr><tr><td><code>PAID</code></td><td><p>A customer fully pays the invoice through one of these methods:</p><ul><li><p>A customer makes a <a href="#connected">connected full payment</a> for the invoice.</p></li><li><p>A customer makes a <a href="#connected">connected partial payment</a> for the invoice. Then, the customer makes a <a href="#disconnected">disconnected payment</a>, such as a check payment, to pay the balance of the invoice and the merchant manually marks the invoice as fully paid.</p></li></ul></td></tr><tr><td><code>MARKED_AS_PAID</code></td><td><p>A customer makes a <a href="#disconnected">disconnected payment</a> for the balance of the invoice. The merchant manually marks the invoice as paid.</p></td></tr><tr><td><code>CANCELLED</code></td><td><p>A merchant or customer <a href="/docs/api/invoicing/v1/#invoices_cancel">cancels a sent invoice</a>. You can cancel an invoice in <code>SENT</code> or <code>UNPAID</code> status.</p></td></tr><tr><td><code>REFUNDED</code></td><td><p>A merchant fully refunds an invoice through one these methods:</p><ul><li><p>A merchant makes a <a href="#connected">connected full refund</a> for the invoice.</p></li><li><p>A merchant makes a <a href="#connected">connected partial refund</a> for the invoice. Then, the merchant makes a <a href="#disconnected-refund">disconnected refund</a>, such as a check payment, for the invoice balance and manually marks the invoice as fully refunded.</p></li></ul></td></tr><tr><td><code>PARTIALLY_REFUNDED</code></td><td><p>A merchant partially refunds an invoice through one or both of these methods:</p><ul><li><p>A merchant makes a <a href="#disconnected">disconnected partial refund</a>, such as a check payment, for the invoice and marks the invoice as partially refunded. To complete this action, the merchant must previously <a href="/docs/api/invoicing/v1/#invoices_record-payment">mark the invoice as paid</a>.</p></li><li><p>A merchant makes a <a href="#connected">connected partial refund</a> for a <a href="#connected">connected partial payment</a>.</p></li></ul></td></tr><tr><td><code>MARKED_AS_REFUNDED</code></td><td><p>A merchant makes a <a href="#disconnected-refund">disconnected refund</a>, such as a check payment, for the invoice balance and manually marks the invoice as fully refunded.</p><blockquote><strong>Note:</strong> A merchant can only mark a <a href="/docs/api/invoicing/v1/#invoices_record-payment">marked-as-paid invoice</a> as refunded.</blockquote></td></tr></tbody></table>
             * @enum {string}
             */
            readonly status?: "DRAFT" | "UNPAID" | "SENT" | "SCHEDULED" | "PARTIALLY_PAID" | "PAYMENT_PENDING" | "PAID" | "MARKED_AS_PAID" | "CANCELLED" | "REFUNDED" | "PARTIALLY_REFUNDED" | "MARKED_AS_REFUNDED";
            /** @description The merchant information, such as business name, email, address, and so on. */
            merchant_info: components["schemas"]["merchant-info"];
            /** @description An array of billing information for the invoice recipient.<blockquote><strong>Note:</strong> This value is an array with only one element.</blockquote> */
            billing_info?: components["schemas"]["billing-info"][];
            /** @description The shipping information for the recipient of the invoice. */
            shipping_info?: components["schemas"]["shipping-info"];
            /** @description An array of email addresses to which PayPal sends a copy of the invoice. */
            cc_info?: components["schemas"]["participant"][];
            /** @description An array of invoice line item information. */
            items?: components["schemas"]["invoice-item"][];
            /**
             * Format: date
             * @description The invoice date as specified by the sender, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
             */
            invoice_date?: string;
            /** @description The payment due date of the invoice. If you include `due_date`, the `term_type` value is ignored. */
            payment_term?: components["schemas"]["payment-term"];
            /** @description The reference data, such as PO number. */
            reference?: string;
            /** @description The invoice level discount, as a percent or an amount value. */
            discount?: components["schemas"]["discount"];
            /** @description The shipping amount, as a percent or an amount value. */
            shipping_cost?: components["schemas"]["shipping-cost"];
            /** @description The custom amount to apply to an invoice. If you include a label, you must include a custom amount. */
            custom?: components["schemas"]["custom-amount"];
            /**
             * @description Indicates whether the invoice allows a partial payment. If `false`, the invoice must be paid in full. If `true`, the invoice allows partial payments.<blockquote><strong>Note:</strong> This feature is not available for merchants in `India`, `Brazil`, or `Israel`.</blockquote>
             * @default false
             */
            allow_partial_payment: boolean;
            /** @description The minimum amount allowed for a partial payment. Valid only if `allow_partial_payment` is `true`. */
            minimum_amount_due?: components["schemas"]["currency"];
            /**
             * @description Indicates whether the tax is calculated before or after a discount. If `false`, the tax is calculated before a discount. If `true`, the tax is calculated after a discount.
             * @default false
             */
            tax_calculated_after_discount: boolean;
            /**
             * @description Indicates whether the unit price includes tax.
             * @default false
             */
            tax_inclusive: boolean;
            /** @description The general terms of the invoice. */
            terms?: string;
            /** @description A note to the invoice recipient. The note also appears on the invoice notification email. */
            note?: string;
            /** @description A private bookkeeping memo for the merchant. */
            merchant_memo?: string;
            /**
             * Format: uri
             * @description The full URL to an external logo image. The logo must not be larger than 250 pixels wide by 90 pixels high. The logo must be stored on a secure server.
             */
            logo_url?: string;
            /** @description The total amount of the invoice. */
            readonly total_amount?: components["schemas"]["currency"];
            /** @description An array of payment details for the invoice. */
            readonly payments?: components["schemas"]["payment-detail"][];
            /** @description An array of refund details for the invoice. */
            readonly refunds?: components["schemas"]["refund-detail"][];
            /** @description The audit information for the invoice. */
            readonly metadata?: components["schemas"]["metadata"];
            /** @description The payment summary of the invoice. Includes the amount paid through PayPal and other sources. */
            readonly paid_amount?: components["schemas"]["payment-summary"];
            /** @description The payment summary of the invoice. Includes the amount refunded through PayPal and other sources. */
            readonly refunded_amount?: components["schemas"]["payment-summary"];
            /** @description An array of PayPal file IDs for the files that are attached to an invoice. You can attach up to five files. */
            readonly attachments?: components["schemas"]["file-attachment"][];
            /**
             * @description Indicates whether the invoice enables the customer to enter a tip amount during payment. If `true`, the invoice shows a tip amount field so that the customer can enter a tip amount. If `false`, the invoice does not show a tip amount field.<blockquote><strong>Note:</strong> This feature is not available for merchants in `Hong Kong`, `Taiwan`, `India`, or `Japan`.</blockquote>
             * @default false
             */
            allow_tip: boolean;
            /**
             * @description This value is only used to determine the layout to display on the create or edit invoice experience, such as which fields to show and hide. It does not impact the view of the invoice that the customer receives.<blockquote><strong>Note:</strong> If you are just using the Invoicing APIs to create and send invoices, leave this field blank. The `template_id` is only needed if you use the Invoicing API to build a full invoicing solution that includes templates.</blockquote>
             * @default PayPal system template
             */
            template_id: string;
            /** @description An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links). */
            readonly links?: components["schemas"]["link_description"][];
        };
        /**
         * Invoices
         * @description A list of merchant invoices. Can include the total invoices count and HATEOAS links for navigation.
         */
        invoices: {
            /** @description The total number of invoices that match the search criteria. */
            readonly total_count?: number;
            /** @description An array of invoice-level details.<blockquote><strong>Note:</strong> This array does not return item details for the invoice.</blockquote> */
            invoices?: components["schemas"]["invoice"][];
            /** @description An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links). */
            readonly links?: components["schemas"]["link_description"][];
        };
        /**
         * Search
         * @description The invoice search parameters.
         */
        search: {
            /** @description The initial letters of the email address. */
            email?: string;
            /** @description The initial letters of the recipient's first name. */
            recipient_first_name?: string;
            /** @description The initial letters of the recipient's last name. */
            recipient_last_name?: string;
            /** @description The initial letters of the recipient's business name. */
            recipient_business_name?: string;
            /** @description Any part of the invoice number. */
            number?: string;
            /**
             * @description The invoice status. To search by status, specify this value as an array. For example, `"status": ["REFUNDED"]`. The status indicates the phase of the invoice in its lifecycle:<table><thead><tr><th>Status</th><th>Occurs when</th></tr></thead><tbody><tr><td><code>CANCELLED</code></td><td><p>A merchant or customer <a href="/docs/api/invoicing/v1/#invoices_cancel">cancels a sent invoice</a>.</p></td></tr><tr><td><code>DRAFT</code></td><td><p>A merchant <a href="/docs/api/invoicing/v1/#invoices_create">creates a draft invoice</a>.</p><blockquote><strong>Note:</strong> A customer cannot pay an invoice until a merchant sends it.</blockquote></td></tr><tr><td><code>MARKED_AS_PAID</code></td><td><p>A merchant <a href="/docs/api/invoicing/v1/#invoices_record-payment">marks an invoice as paid</a> after he or she receives a check or cash payment for the invoice.</p></td></tr><tr><td><code>MARKED_AS_REFUNDED</code></td><td><p>A merchant <a href="/docs/api/invoicing/v1/#invoices_record-refund">marks an invoice as refunded</a>.</p><blockquote><strong>Note:</strong> A merchant can only mark a <a href="/docs/api/invoicing/v1/#invoices_record-payment">marked-as-paid invoice</a> as refunded.</blockquote></td></tr><tr><td><code>PAID</code></td><td><p>A customer fully pays an invoice. It is marked as paid through one or both of these methods:</p><ul><li>A merchant <a href="/docs/api/invoicing/v1/#invoices_record-payment">marks an invoice as paid</a> after he or she receives a check or cash payment from the customer for the invoice.</li><li>A customer makes an online payment for the invoice.</li></ul></td></tr><tr><td><code>PARTIALLY_PAID</code></td><td><p>A merchant or customer fully pays an invoice through one or both of these methods:</p><ul><li>A merchant <a href="/docs/api/invoicing/v1/#invoices_record-payment">marks an invoice as paid</a> after he or she receives a check or cash payment from the customer for the invoice.</li><li>A customer makes an online payment for the invoice.</li></ul></td></tr><tr><td><code>PARTIALLY_REFUNDED</code></td><td><p>A merchant partially refunds an invoice through one or both of these methods:</p><ul><li>A merchant <a href="/docs/api/invoicing/v1/#invoices_record-payment">marks an invoice as refunded</a>. To complete this action, the merchant must previously <a href="/docs/api/invoicing/v1/#invoices_record-payment">mark the invoice as paid</a>.</li><li>A merchant makes an online refund for an online invoice payment.</li></ul></td></tr><tr><td><code>PAYMENT_PENDING</code></td><td><p>A customer pays an invoice but the payment is pending for one of these reasons:</p><ul><li>The payment is an uncleared eCheck.</li><li>The payment is in an accept or deny state upon which the merchant must act.</li><li>PayPal risk is reviewing the payment.</li></ul><blockquote><strong>Note:</strong> Most payments never go into a payment-pending state.</blockquote></td></tr><tr><td><code>REFUNDED</code></td><td><p>A merchant fully refunds an invoice through one or both of these methods:</p><ul><li>A merchant <a href="/docs/api/invoicing/v1/#invoices_record-payment">marks an invoice as refunded</a>. To complete this action, the merchant must previously <a href="/docs/api/invoicing/v1/#invoices_record-payment">mark the invoice as paid</a>.</li><li>A merchant makes an online refund for an online invoice payment.</li></ul></td></tr><tr><td><code>SCHEDULED</code></td><td><p>A merchant <a href="/docs/api/invoicing/v1/#invoices_schedule">schedules an invoice</a> to be emailed by PayPal on a specified date.</p></td></tr><tr><td><code>SENT</code></td><td><p>A merchant <a href="/docs/api/invoicing/v1/#invoices_send">sends an invoice</a> to the customer.</p><p>After the merchant sends the invoice:</p><ul><li>PayPal emails the invoice to the customer.</li><li>A <strong>Payment</strong> button appears on the invoice. The customer can now pay the invoice.</li><li>In a web app, the invoice appears as <code>Unpaid (sent)</code>.</li></ul></td></tr><tr><td><code>UNPAID</code></td><td><p>A merchant <a href="/docs/api/invoicing/v1/#invoices_send">sends an invoice</a> and sets the <code>notify_merchant</code> and <code>notify_customer</code> query parameters to <code>false</code> to suppress the PayPal email notification. Then, the merchant manually sends the invoice link in his or her own email.</p></td></tr></tbody></table>
             * @enum {string}
             */
            status?: "DRAFT" | "SENT" | "SCHEDULED" | "PAID" | "MARKED_AS_PAID" | "CANCELLED" | "REFUNDED" | "PARTIALLY_REFUNDED" | "MARKED_AS_REFUNDED";
            /** @description The lower limit of the total amount. */
            lower_total_amount?: string;
            /** @description The upper limit of the total amount. */
            upper_total_amount?: string;
            /**
             * Format: date
             * @description The start date for the invoice, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *yyyy*-*MM*-*dd* *z*.
             */
            start_invoice_date?: string;
            /**
             * Format: date
             * @description The end date for the invoice, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *yyyy*-*MM*-*dd* *z*.
             */
            end_invoice_date?: string;
            /**
             * Format: date
             * @description The start due date for the invoice, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *yyyy*-*MM*-*dd* *z*.
             */
            start_due_date?: string;
            /**
             * Format: date
             * @description The end due date for the invoice, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *yyyy*-*MM*-*dd* *z*.
             */
            end_due_date?: string;
            /**
             * Format: date
             * @description The start payment date for the invoice, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *yyyy*-*MM*-*dd* *z*.
             */
            start_payment_date?: string;
            /**
             * Format: date
             * @description The end payment date for the invoice, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *yyyy*-*MM*-*dd* *z*.
             */
            end_payment_date?: string;
            /**
             * Format: date
             * @description The start creation date for the invoice, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *yyyy*-*MM*-*dd* *z*.
             */
            start_creation_date?: string;
            /**
             * Format: date
             * @description The end creation date for the invoice, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). For example, *yyyy*-*MM*-*dd* *z*.
             */
            end_creation_date?: string;
            /** @description The zero-relative start index of the entire list of merchant invoices to return in the response. So, a combination of `page=0` and `page_size=20` returns the first 20 invoices. A combination of `page=20` and `page_size=20` returns the next 20 invoices. */
            page?: number;
            /** @description The page size for the search results. */
            page_size?: number;
            /**
             * @description Indicates whether the response shows the total count.
             * @default false
             */
            total_count_required: boolean;
            /** @description Indicates whether to list merchant-archived invoices in the response. If `true`, response lists only merchant-archived invoices. If `false`, response lists only unarchived invoices. If `null`, response lists all invoices. */
            archived?: boolean;
        };
        /**
         * Notification
         * @description The email or SMS notification.
         */
        notification: {
            /** @description The subject of the notification. Default is a generic subject. */
            subject?: string;
            /** @description A note to the payer. */
            note?: string;
            /**
             * @description Indicates whether to send a copy of the email to the merchant.
             * @default true
             */
            send_to_merchant: boolean;
            /** @description An array of one or more CC: emails to which to send notification emails. If you omit this parameter, the API sends notification emails to all CC: email addresses that are part of the invoice.<blockquote><strong>Note:</strong> Valid values are email addresses in the `cc_info` array of the invoice.</blockquote> */
            cc_emails?: string[];
        };
        /**
         * Cancel Notification
         * @description Cancels an email or SMS notification.
         */
        "cancel-notification": {
            /** @description The subject of the notification. If left blank we include a generic subject. */
            subject?: string;
            /** @description A note to the payer. */
            note?: string;
            /**
             * @description Indicates whether to send the notification to the merchant.
             * @default true
             */
            send_to_merchant: boolean;
            /**
             * @description Indicates whether to send the notification to the payer.
             * @default true
             */
            send_to_payer: boolean;
            /** @description An array of one or more CC: emails to which to send notification emails. If you omit this parameter, the API sends notification emails to all CC: email addresses that are part of the invoice.<blockquote><strong>Note:</strong> Additional email addresses are not supported.</blockquote> */
            cc_emails?: string[];
        };
        /**
         * QR Code
         * @description The base64-encoded image of the `image/png` type.
         */
        qr_code: {
            /** @description The base64-encoded image of the `image/png` type. */
            image?: string;
        };
        /**
         * Invoice Number
         * @description The invoice number.
         */
        invoice_number: {
            /** @description The invoice number. If you omit this value from the request, the default is the number that the API automatically increments from the last number. */
            number?: string;
        };
        /**
         * Email
         * Format: email
         * @description The participant's email address.
         */
        email: string;
        /**
         * Template Data
         * @description The template data.
         */
        "template-data": {
            merchant_info: components["schemas"]["merchant-info"];
            /** @description The billing information of the invoice recipient.<blockquote><strong>Note:</strong> This value is an array with only one element.</blockquote> */
            billing_info?: components["schemas"]["billing-info"][];
            shipping_info?: components["schemas"]["shipping-info"];
            /** @description An array of email addresses to which PayPal sends a copy of the invoice. */
            cc_info?: components["schemas"]["email"][];
            /** @description An array of invoice line item information. The maximum items for an invoice is `100`. */
            items?: components["schemas"]["invoice-item"][];
            payment_term?: components["schemas"]["payment-term"];
            /** @description The reference data, such as a PO number. */
            reference?: string;
            /** @description The invoice level discount, as a percent or an amount value. */
            discount?: components["schemas"]["discount"];
            /** @description The shipping cost, as a percent or an amount value. */
            shipping_cost?: components["schemas"]["shipping-cost"];
            custom?: components["schemas"]["custom-amount"];
            /**
             * @description Indicates whether the invoice allows a partial payment. If `false`, the invoice must be paid in full. If `true`, the invoice allows partial payments.<blockquote><strong>Note:</strong> This feature is not available for merchants in `India`, `Brazil`, or `Israel`.</blockquote>
             * @default false
             */
            allow_partial_payment: boolean;
            /** @description The currency and amount of the minimum allowed for a partial payment. Valid only when `allow_partial_payment` is `true`. */
            minimum_amount_due?: components["schemas"]["currency"];
            /**
             * @description Indicates whether the tax is calculated before or after a discount. If `false`, the tax is calculated before a discount. If `true`, the tax is calculated after a discount.
             * @default false
             */
            tax_calculated_after_discount: boolean;
            /**
             * @description Indicates whether the unit price includes tax.
             * @default false
             */
            tax_inclusive: boolean;
            /** @description The general terms of the invoice. */
            terms?: string;
            /** @description A note to the invoice recipient. This note also appears on the invoice notification email. */
            note?: string;
            /** @description A private bookkeeping memo for the merchant. */
            merchant_memo?: string;
            /**
             * Format: uri
             * @description The full URL to an external logo image. The logo image must not be larger than 250 pixels wide by 90 pixels high.
             */
            logo_url?: string;
            /** @description The currency and amount of the invoice total. */
            readonly total_amount?: components["schemas"]["currency"];
            /** @description An array of PayPal file IDs for the files that are attached to an invoice. The maximum number of files is `5`. */
            attachments?: components["schemas"]["file-attachment"][];
        };
        /**
         * Template Settings Metadata
         * @description The template settings metadata.
         */
        "template-settings-metadata": {
            /**
             * @description Indicates whether to show or hide this field.
             * @default false
             */
            hidden: boolean;
        };
        /**
         * Template Settings
         * @description The template settings.
         */
        "template-settings": {
            /**
             * @description The field name in `template_data` for which to map corresponding display preferences.
             * @enum {string}
             */
            field_name?: "items.quantity" | "items.description" | "items.date" | "items.discount" | "items.tax" | "discount" | "shipping" | "custom";
            display_preference?: components["schemas"]["template-settings-metadata"];
        };
        /**
         * Template
         * @description The invoicing template.
         */
        template: {
            /** @description The ID of the template. */
            readonly template_id?: string;
            /** @description The template name.<blockquote><strong>Note:</strong> The template name must be unique.</blockquote> */
            name?: string;
            /** @description Indicates whether this template is the default merchant template. A merchant can have one default template. */
            default?: boolean;
            template_data?: components["schemas"]["template-data"];
            /** @description An array of template settings that describe which fields to show or hide when creating an invoice. */
            settings?: components["schemas"]["template-settings"][];
            /**
             * @description The unit of measure for the template.
             * @enum {string}
             */
            unit_of_measure?: "HOURS" | "QUANTITY" | "AMOUNT";
            /** @description Indicates whether this template is a merchant-created custom template. The system generates non-custom templates. */
            readonly custom?: boolean;
            /** @description An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links). */
            readonly links?: components["schemas"]["link_description"][];
        };
        /**
         * Templates
         * @description A merchant-created template with associated details. The associated details include the emails, addresses, and phone numbers from the user's PayPal profile.
         */
        templates: {
            /** @description An array of postal addresses in the user's PayPal profile. */
            addresses?: components["schemas"]["address"][];
            /** @description An array of email addresses in the user's PayPal profile. */
            emails?: string[];
            /** @description An array of phone numbers in the user's PayPal profile. */
            phones?: components["schemas"]["phone"][];
            /** @description The details for each template. If `fields` is `none`, returns only the template name, ID, and default status. */
            templates?: components["schemas"]["template"][];
            /** @description An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links). */
            readonly links?: components["schemas"]["link_description"][];
        };
    };
    responses: never;
    parameters: {
        /** @description The *zero-relative* start index of the entire list of merchant invoices that are returned in the response. So, the combination of `page=0` and `page_size=20` returns the first 20 invoices. The combination of `page=20` and `page_size=20` returns the next 20 invoices. */
        page: number;
        /** @description The number of invoices to return in the response. */
        page_size: number;
        /** @description Indicates whether to show the total count in the response. */
        total_count_required: boolean;
        /** @description The ID of the invoice for which to generate a QR code. */
        invoice_id: string;
        /** @description Indicates whether to send the invoice update notification to the merchant. */
        notify_merchant: boolean;
        /** @description The ID of the external refund transaction to delete. */
        transaction_id: string;
        /** @description The width, in pixels, of the QR code image. Value is from `150` to `500`. */
        width: number;
        /** @description The height, in pixels, of the QR code image. Value is from `150` to `500`. */
        height: number;
        /** @description The fields to return in the response. Value is `all` or `none`. To return only the template name, ID, and default attributes, specify `none`. */
        fields: string;
        /** @description The ID of the template to update. */
        template_id: string;
    };
    requestBodies: {
        invoice: {
            content: {
                "application/json": components["schemas"]["invoice"];
            };
        };
        template: {
            content: {
                "application/json": components["schemas"]["template"];
            };
        };
    };
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "invoice.get_all": {
        parameters: {
            query?: {
                /** @description The *zero-relative* start index of the entire list of merchant invoices that are returned in the response. So, the combination of `page=0` and `page_size=20` returns the first 20 invoices. The combination of `page=20` and `page_size=20` returns the next 20 invoices. */
                page?: components["parameters"]["page"];
                /** @description The number of invoices to return in the response. */
                page_size?: components["parameters"]["page_size"];
                /** @description Indicates whether to show the total count in the response. */
                total_count_required?: components["parameters"]["total_count_required"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that lists invoices with details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["invoices"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "invoice.create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["invoice"];
        responses: {
            /** @description A successful request returns the HTTP `201 Created` status code and a JSON response body that shows invoice details. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["invoice"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "invoice.search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["search"];
            };
        };
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that lists the invoices that match the search criteria. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["invoices"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "invoice.send": {
        parameters: {
            query?: {
                /** @description Indicates whether to send the invoice update notification to the merchant. */
                notify_merchant?: components["parameters"]["notify_merchant"];
            };
            header?: never;
            path: {
                /** @description The ID of the invoice for which to generate a QR code. */
                invoice_id: components["parameters"]["invoice_id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `202 Accepted` status code with no JSON response body. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "invoice.schedule": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the invoice for which to generate a QR code. */
                invoice_id: components["parameters"]["invoice_id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `202 Accepted` status code and a JSON response body with a link to the invoice . */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "invoice.remind": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the invoice for which to generate a QR code. */
                invoice_id: components["parameters"]["invoice_id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["notification"];
            };
        };
        responses: {
            /** @description A successful request returns the HTTP `202 Accepted` status code with no JSON response body. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "invoice.cancel": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the invoice for which to generate a QR code. */
                invoice_id: components["parameters"]["invoice_id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["cancel-notification"];
            };
        };
        responses: {
            /** @description A successful request returns the HTTP `204 No Content` status code with no JSON response body. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "invoice.record-payment": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the invoice for which to generate a QR code. */
                invoice_id: components["parameters"]["invoice_id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["payment-detail"];
            };
        };
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code with no JSON response body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "invoice.record-refund": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the invoice for which to generate a QR code. */
                invoice_id: components["parameters"]["invoice_id"];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["refund-detail"];
            };
        };
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code with no JSON response body. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "invoice.get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the invoice for which to generate a QR code. */
                invoice_id: components["parameters"]["invoice_id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that shows invoice details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["invoice"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "invoice.update": {
        parameters: {
            query?: {
                /** @description Indicates whether to send the invoice update notification to the merchant. */
                notify_merchant?: components["parameters"]["notify_merchant"];
            };
            header?: never;
            path: {
                /** @description The ID of the invoice for which to generate a QR code. */
                invoice_id: components["parameters"]["invoice_id"];
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["invoice"];
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that shows invoice details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["invoice"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "invoice.delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the invoice for which to generate a QR code. */
                invoice_id: components["parameters"]["invoice_id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `204 No Content` status code with no JSON response body. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "invoice.delete_external_payment": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the invoice for which to generate a QR code. */
                invoice_id: components["parameters"]["invoice_id"];
                /** @description The ID of the external refund transaction to delete. */
                transaction_id: components["parameters"]["transaction_id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `204 No Content` status code with no JSON response body. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "invoice.delete_external_refund": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the invoice for which to generate a QR code. */
                invoice_id: components["parameters"]["invoice_id"];
                /** @description The ID of the external refund transaction to delete. */
                transaction_id: components["parameters"]["transaction_id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `204 No Content` status code with no JSON response body. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "invoice.qr_code": {
        parameters: {
            query?: {
                /** @description The width, in pixels, of the QR code image. Value is from `150` to `500`. */
                width?: components["parameters"]["width"];
                /** @description The height, in pixels, of the QR code image. Value is from `150` to `500`. */
                height?: components["parameters"]["height"];
            };
            header?: never;
            path: {
                /** @description The ID of the invoice for which to generate a QR code. */
                invoice_id: components["parameters"]["invoice_id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that shows the QR code as a PNG image. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["qr_code"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "invoice.next_invoice_number": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that shows the next invoice number. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["invoice_number"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "template.get_templates": {
        parameters: {
            query?: {
                /** @description The fields to return in the response. Value is `all` or `none`. To return only the template name, ID, and default attributes, specify `none`. */
                fields?: components["parameters"]["fields"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that lists invoices. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["templates"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "template.create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["template"];
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that shows template details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["template"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "template.get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the template to update. */
                template_id: components["parameters"]["template_id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that shows template details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["template"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "template.update": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the template to update. */
                template_id: components["parameters"]["template_id"];
            };
            cookie?: never;
        };
        requestBody?: components["requestBodies"]["template"];
        responses: {
            /** @description A successful request returns the HTTP `200 OK` status code and a JSON response body that shows template details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["template"];
                };
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    "template.delete": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the template to update. */
                template_id: components["parameters"]["template_id"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A successful request returns the HTTP `204 No Content` status code with no JSON response body. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The error response. */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
}
